VIVA 3.01 Implementation Independent Algorithm Description Language
// Sheet   8/3/2006 3:12:07 PM


DataSet ZTerm = ( NULL ); //_Attributes 1,13684991,Layer2\ZTLib
DataSet ZTList = ( Variant , Variant ); //_Attributes 1,8421631,Layer2\ZTLib

Object CoreLib-ZTList
//_Attributes WipSheet
{
 //_ Object Prototypes
 Object Text;  //_GUI 7,27,Zero Terminated Lists (ZTLists) are designed for handling multiple dimensions of data elements. Here is an outline of the library:Arial,9,0,0
 Object Text;  //_GUI 7,35,The CorelibOverloads treegroup contains overloads for standard Corelib. For example, it allows the Add object in Corelib to handle the ZTList dataset. Critical objects in this tree include PushLsb and PopLsb, which are used exclusively to add and remove elements from the ZTLists.  ZTList library must be loaded with CoreLib.Arial,9,0,0
 Object Text;  //_GUI 106,49,The General treegroup contains all the operators for manipulating and extracting data from ZTLists. For example, Transpose, when passed a multidimensional list, performs a traditional linear algebra transposition on the elements of the list.Arial,9,0,0
 Object Text;  //_GUI 106,27,The NewZTList tree has objects for building elements into a ZTList. A ZTList can handle ZTList elements. This is how you build a multidimension list.Arial,9,0,0
 Object Text;  //_GUI 154,5,This library requires Corelib.Modified 4/7/06
 Object Text;  //_GUI 106,37,Currently Viva's Widgets don't support ZTLists, but they do support MSBLists and LSBLists, so in the examples we convert our single dimentional ZTLists into LSBLists before sending them to be displayed.Arial,9,0,0
 Object Text;  //_GUI 14,7,Welcome to ZTListLibArial,20,8388608,1
 Object Text;  //_GUI 5,21,Getting StartedArial,12,8421504,1
 Object Text;  //_GUI 4,15,.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .Arial,12,255,1
 Object Text;  //_GUI 100,20,............................................Arial,12,255,1
 Object Text;  //_GUI 13,63,Double-click the Examples box to view examples.Arial,8,255,1
 Object Text;  //_GUI 104,21,ZTLists, An IntroductionArial,12,8421504,1
 Object ZT_Examples;  //_GUI 31,54
 Object Text;  //_GUI 106,63,Here's a rundown of the common operators:PackZTList / NewZTList: put together some datasets and make a listUnpackZTList: access x number of the low items of a listPopLsb/StackPop/GetTail: grab an element off the bottom (terminator out on top for single element lists)PopMsb/StackUnshift/GetHead: grab an element of the list off the topPushLsb/StackPush/PutTail: shift an element onto the bottom of the listPushMsb/StackShift/GetHead: append an element onto the top of the listListPopLsb: same as PopLsb only you can access multiple items at once;         unpack(5) on a list of four elements results in all four elements exposed with zterm on top;         unpack(4) on a list of four elements results in three elements exposed with one element list on top;          unpack(6) on a list of four elements gives the same as unpack(5) with a null on topBit_ZtList: creates a list from a nonlist dataset          where each bit in the original becomes an element in the output listCat: append a list onto a list; i.e., combine two lists into one applying to only the outer dimensionBisect: split the list into two even halves applying only to the outer dimensionList_Mux_Sel: send in the number of the element you want out          or send in a ZTList to select a leaf from a multidimensional listList_Mux: send in a mask of the element you want to selectTranspose: yep -- along the diagonal and works for multiple dimensionsEveryOther: split the list into two even halfs made up of odd and even componentsInterleave: the opposite of EveryOtherROL/ROR: rotate the list left or right respectivelyDiffListStruct: usually this is used with a trap to make sure the compile did what we wantedBrowse around the library for more. There are overloads for a lot of the traditional CoreLib objects including Cast, $ADC, AND, OR....Arial,9,0,0
 Object Text;  //_GUI 97,8,<TreeGroup>CoreLib-ZTListArial,8,-2147483640,0

 // Behavior Topology
}

Object ZT_Examples
//_Attributes TreeGroup=CoreLib-ZTList\Examples,Icon=Example
{
 //_ Object Prototypes
 Object ( Variant Out1) CatWrong( ZTList Hi, Variant Lo) ;  //_GUI 7,36
 //_Attributes Documentation="ztlist/var"
 Object ( Variant Hi, Variant Lo) Show_Bisect( Variant In1) ;  //_GUI 25,36
 Object ( Variant O) Show_Cast_Ztl( Variant 1, Variant 2
    , Variant 21, Variant 22, LSB064 S) ;  //_GUI 48,27
 Object ( Variant LSBList) Show_Cat( Variant MSB, Variant In2
    , Variant In3, Variant LSB, Variant MSB1, Variant LSB1) ;  //_GUI 72,24
 Object ( Variant LSBList, Variant LSBList1) Show_Cat_PushLsb_Same( Variant MSB
    , Variant In2, Variant In3, Variant LSB, Variant In5
    , Variant MSB1, Variant In21, Variant In31, Variant LSB1
    , Variant In10) ;  //_GUI 129,12
 Object ( Variant LSBList) Show_EncodeRev_ZTList( LSB004 MSB, LSB004 In2
    , LSB004 In3, LSB004 In4, LSB004 In5, LSB004 In6
    , LSB004 In7, LSB004 In8, LSB004 LSB) ;  //_GUI 33,62
 Object ( Variant El, Variant El1, Variant El2
    , Variant El3, Variant El4, Variant El5, Variant El6
    , Variant El7, Variant El8, Variant El9, Variant El10
    , Variant El11) Show_GetLoElement( MSB005 Data, MSB005 Lo_e, MSB005 Data1
    , LSB002 Lo_e1, LSB002 Data2, MSB005 Lo_e2) ;  //_GUI 66,53
 Object ( Variant Out1, Variant Out2, Variant "LsbOutIsLsbIn+1"
    , Variant LsbOutIsLsbIn, Variant "LsbOutIsLsbIn+11", Variant LsbOutIsLsbIn1) Show_Interleave_and_EveryOther( Variant "LsbInIsLsbOut+1"
    , Variant LsbInIsLsbOut) ;  //_GUI 96,71
 Object ( Variant LSBList, Variant LSBList1) Show_LeafPushMsb( Bit B
    , Bit A, LSB009 b, LSB009 a) ;  //_GUI 139,77
 Object ( Variant Out1, Variant Out2) Show_LeastSig( Variant In1) ;  //_GUI 7,109
 Object ( Variant Data, Variant Data1, Variant Data2
    , Variant Data3, Variant Data4) Show_List_Mux( LSB008 Data, Bit Sel
    , LSB008 Data1, LSB008 Data2, LSB002 Sel1, LSB008 Data3
    , LSB008 Data4, LSB008 Data5, LSB008 Data6, MSB004 Sel2
    , LSB008 Data7, LSB008 Data8, MSB002 Sel3, LSB008 Data9
    , LSB008 Data10, MSB002 Sel4) ;  //_GUI 35,99
 Object ( Variant 1of2_outer, Variant 1of4_inner, Variant 1of2_outerAnd1of4_inner) Show_List_Mux_2D_Data
    ( LSB008 Data7, LSB008 Data6, LSB008 Data5, LSB008 Data4
    , LSB008 Data3, LSB008 Data2, LSB008 Data1, LSB008 Data0
    , MSB002 Sel, MSB004 Sel1) ;  //_GUI 61,99
 Object ( Variant 1of2_outer, Variant 1of4_inner, Variant 1of2_outerAnd1of4_inner) Show_List_Mux_Sel_2D_Data
    ( LSB008 Data7, LSB008 Data6, LSB008 Data5, LSB008 Data4
    , LSB008 Data3, LSB008 Data2, LSB008 Data1, LSB008 Data0
    , Bit SelOuter, MSB002 SelInner) ;  //_GUI 136,99
 Object ( Variant Out1, Variant LSBList) Show_ListFill( Bit DataToBeBroadcast) ;  //_GUI 136,135
 Object ( Variant Out1, Variant Out2) Show_MostSig( Variant In1) ;  //_GUI 7,121
 Object ( Variant Out1, Variant Out2) Show_NextMostSig( Variant Bits
    , Variant StartBit) ;  //_GUI 7,133
 Object ( Variant LSBList, Variant LSBList1) Show_RegClr_withZTLists( LSB004 DataMSB
    , LSB004 DataLSB, Bit ClkG, Bit EnMSB, Bit EnLSB
    , Bit ClrMSB, Bit ClrLSB) ;  //_GUI 135,149
 Object ( Variant Out1, Variant Out2) Show_ROL( Variant In1) ;  //_GUI 7,147
 Object ( Variant Out1, Variant Out2) Show_ROR( Variant In1) ;  //_GUI 7,163
 Object Show_SameListStruct;  //_GUI 61,135
 Object ( Variant LSB, Variant LSB1) Show_transpose_of_ZTList( LSB003 Data5
    , LSB003 Data4, LSB003 Data3, LSB003 Data2, LSB003 Data1
    , LSB003 Data0) ;  //_GUI 61,146
 Object ( Variant Out1, Variant Out2, Variant Out3
    , Variant LSB) Show_ZT_ReverseList( Variant MSB, Variant In2, Variant In3
    , Variant LSB) ;  //_GUI 31,158
 Object ( Variant 1D_ZTList_Size, Variant 2D_ZTList_Size) Show_ZTList_Size_and_BitLength( Variant MSB) ;  //_GUI 112,51
 Object ( Variant Data1, Variant Data2, Variant Data3
    , Variant Data4, Variant Data5, Variant Data6, Variant Data7
    , Variant Data8) Show_List_Mux_Sel( Variant ListData0, Bit Sel1, Variant ListData1
    , Variant ListData0, Bit Sel2, Variant ListData2, Variant ListData1
    , Variant ListData0, Bit Sel3, Variant ListData2, Variant ListData1
    , Variant ListData0, LSB002 Sel4, Variant ListData3, Variant ListData2
    , Variant ListData1, Variant ListData0, LSB002 Sel5, LSB003 Sel6
    , LSB004 Sel7, LSB032 BitListData, LSB005 Sel8) ;  //_GUI 102,95
 Object ( Variant LSBList, Variant LSBList, Variant LSBList
    , Variant LSB, Variant LSBList, Variant LSBList, Variant LSBList
    , Variant LSBList, Variant LSB, Variant LSBList) Show_Cat_PushLsb_Diff( Variant MSB
    , Variant In2, Variant In3, Variant LSB, Variant MSB
    , Variant LSB, Variant MSB, Variant In2, Variant In3
    , Variant LSB, Variant MSB, Variant LSB) ;  //_GUI 93,8

 // Behavior Topology
}

Object ( Variant OFL, Variant Out2) TwosExtnd( Variant Type
    , ZTList Data) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( Variant Type) Input;  //_GUI 45,39
 Object ( ZTList Data) Input:A;  //_GUI 58,56
 Object Output( Variant OFL) ;  //_GUI 145,40
 Object Output:A( Variant Out2) ;  //_GUI 145,56
 Object ( Variant OFL, Variant Out1) TwosExtnd( Variant Type
    , Variant Data) ;  //_GUI 95,41
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 65,54
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 126,54
 //_Attributes Documentation="ztl/var"
 Object ( Variant OFL, Variant Out1) TwosExtnd:A( Variant Type
    , Variant Data) ;  //_GUI 95,54
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In1) ;  //_GUI 88,42
 Object ( Variant Out1) PushLsb:A( Variant In1, Variant LSB) ;  //_GUI 133,38
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb:A.0;  
 Output:A.0 = PushLsb.0;  
 TwosExtnd.0 = Junction.1;  
 TwosExtnd.1 = PopLsb.0;  //_GUI 75,46
 PopLsb.0 = Input:A.0;  
 PushLsb.0 = TwosExtnd.1;  //_GUI 126,46
 PushLsb.1 = TwosExtnd:A.1;  
 TwosExtnd:A.0 = Junction.2;  //_GUI 89,56
 TwosExtnd:A.1 = PopLsb.1;  
 Junction.0 = Input.0;  //_GUI 89,40
 PushLsb:A.0 = TwosExtnd.0;  //_GUI 107,40
 PushLsb:A.1 = TwosExtnd:A.0;  //_GUI 113,43, 113,56
}

Object ( ZTerm OFL, ZTerm Out2) TwosExtnd( Variant Type
    , ZTerm Data) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( Variant Type) Input;  //_GUI 45,39
 Object ( ZTerm Data) Input:A;  //_GUI 58,56
 Object Output( ZTerm OFL) ;  //_GUI 145,40
 Object Output:A( ZTerm Out2) ;  //_GUI 145,56
 Object ( ZTerm Out1, ZTerm Out2, ZTerm Out3) Junction
    ( ZTerm In0) ;  //_GUI 130,56

 // Behavior Topology
 Output.0 = Junction.0;  //_GUI 131,41
 Output:A.0 = Junction.1;  
 Junction.0 = Input:A.0;  
}

Object ( Bit OFL, Variant Sign, Variant Unsigned) FromTwos
    ( ZTList TwosComplement) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList TwosComplement) Input;  //_GUI 39,24
 Object Output( Bit OFL) ;  //_GUI 175,4
 Object Output:A( Variant Sign) ;  //_GUI 175,8
 Object Output:B( Variant Unsigned) ;  //_GUI 175,16
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 45,22
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 138,14
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) PushLsb:A( Variant In1, Variant LSB) ;  //_GUI 138,6
 //_Attributes Documentation="ztl/var"
 Object ( Bit Out) OR( Bit In1, Bit In2) ;  //_GUI 165,2
 Object ( Bit OFL, Variant Sign, Variant Unsigned) FromTwos
    ( Variant TwosComplement) ;  //_GUI 92,8
 Object ( Bit OFL, Variant Sign, Variant Unsigned) FromTwos:A
    ( Variant TwosComplement) ;  //_GUI 92,24

 // Behavior Topology
 Output.0 = OR.0;  
 Output:A.0 = PushLsb:A.0;  
 Output:B.0 = PushLsb.0;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = FromTwos.2;  
 PushLsb.1 = FromTwos:A.2;  //_GUI 127,19, 127,32
 PushLsb:A.0 = FromTwos.1;  //_GUI 122,8, 122,13
 PushLsb:A.1 = FromTwos:A.1;  //_GUI 125,11, 125,29
 OR.0 = FromTwos.0;  //_GUI 117,4
 OR.1 = FromTwos:A.0;  //_GUI 165,26
 FromTwos.0 = PopLsb.0;  //_GUI 73,11, 73,24
 FromTwos:A.0 = PopLsb.1;  
}

Object ( Bit OFL, ZTerm Sign, ZTerm Unsigned) FromTwos
    ( ZTerm TwosComplement) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm TwosComplement) Input;  //_GUI 37,16
 Object Output( Bit OFL) ;  //_GUI 77,4
 Object Output:A( ZTerm Sign) ;  //_GUI 77,10
 Object Output:B( ZTerm Unsigned) ;  //_GUI 77,16
 Object ( ZTerm Out1, ZTerm Out2, ZTerm Out3) Junction
    ( ZTerm In0) ;  //_GUI 66,16
 Object ( Bit In) Input:A;  //_GUI 72,4
 //_Attributes Constant="*0"

 // Behavior Topology
 Output.0 = Input:A.0;  
 Output:A.0 = Junction.0;  //_GUI 67,11
 Output:B.0 = Junction.1;  
 Junction.0 = Input.0;  
}

Object ( Variant C, Variant Out2) SHR_Twos( ZTList In1
    , Variant CTypeOnly) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 37,65
 Object ( Variant CTypeOnly) Input:A;  //_GUI 36,83
 Object Output( Variant C) ;  //_GUI 137,59
 Object Output:A( Variant Out2) ;  //_GUI 138,74
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 48,63
 //_Attributes Documentation="var"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 115,72
 //_Attributes Documentation="var/var"
 Object ( Variant Out1) PushLsb:A( Variant In1, Variant LSB) ;  //_GUI 115,57
 //_Attributes Documentation="var/var"
 Object ( Variant C, Variant Out2) SHR_Twos( Variant In1
    , Variant CTypeOnly) ;  //_GUI 79,66
 //_Attributes Documentation="var"
 Object ( Variant C, Variant Out2) SHR_Twos:A( Variant In1
    , Variant CTypeOnly) ;  //_GUI 79,57
 //_Attributes Documentation="var"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In3) ;  //_GUI 70,70

 // Behavior Topology
 Output.0 = PushLsb:A.0;  
 Output:A.0 = PushLsb.0;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = SHR_Twos:A.1;  //_GUI 104,74, 104,62
 PushLsb.1 = SHR_Twos.1;  //_GUI 101,77, 101,71
 PushLsb:A.0 = SHR_Twos:A.0;  
 PushLsb:A.1 = SHR_Twos.0;  //_GUI 109,62, 109,68
 SHR_Twos.0 = PopLsb.1;  
 SHR_Twos.1 = Junction.2;  
 SHR_Twos:A.0 = PopLsb.0;  //_GUI 58,59
 SHR_Twos:A.1 = Junction.1;  //_GUI 71,62
 Junction.0 = Input:A.0;  //_GUI 71,84
}

Object ( ZTerm C, ZTerm Out2) SHR_Twos( ZTerm In1
    , Variant CTypeOnly) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 36,59
 Object ( Variant CTypeOnly) Input:A;  //_GUI 36,83
 Object Output( ZTerm C) ;  //_GUI 137,59
 Object Output:A( ZTerm Out2) ;  //_GUI 138,74
 Object ( ZTerm Out1, ZTerm Out2, ZTerm Out3) Junction
    ( ZTerm In0) ;  //_GUI 122,59

 // Behavior Topology
 Output.0 = Junction.1;  
 Output:A.0 = Junction.2;  //_GUI 123,75
 Junction.0 = Input.0;  
}

Object ( ZTerm ZTList) NewZTList
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList,Documentation="empty"
{
 //_ Object Prototypes
 Object Output( ZTerm ZTList) ;  //_GUI 35,20
 Object ( ZTerm Out1) ZeroTerminator;  //_GUI 17,18
 Object ( Bit ForceDrillInWithNonExistantGlobal) Input;  //_GUI 40,31
 //_Attributes Resource=Global

 // Behavior Topology
 Output.0 = ZeroTerminator.0;  
}

Object ( Variant ZTList) NewZTList( Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList,Documentation="single element"
{
 //_ Object Prototypes
 Object ( Variant LSB) Input;  //_GUI 11,26
 Object Output( Variant ZTList) ;  //_GUI 51,21
 Object Text;  //_GUI 13,36,Since there is only one element, the LSB is the MSB, so it doesn't matter which push we use.
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 38,19
 //_Attributes Documentation="ztl/var"
 Object ( ZTerm ZTList) NewZTList;  //_GUI 19,18

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input.0;  //_GUI 34,24, 34,27
}

Object ( Variant ZTList) NewZTList( Variant MSB, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant LSB) Input:A;  //_GUI 11,31
 Object Output( Variant ZTList) ;  //_GUI 50,21
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 38,19
 //_Attributes Documentation="ztl/var"
 Object ( Variant ZTList) NewZTList( Variant LSB) ;  //_GUI 20,18
 //_Attributes Documentation="single element"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input:A.0;  //_GUI 34,24, 34,32
 NewZTList.0 = Input.0;  
}

Object ( Variant Out1) NewZTList( Variant MSB, Variant In2
    , Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant In2) Input:A;  //_GUI 11,23
 Object ( Variant LSB) Input:B;  //_GUI 11,31
 Object Output( Variant Out1) ;  //_GUI 50,22
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 38,20
 //_Attributes Documentation="ztl/var"
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant LSB) ;  //_GUI 20,19

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input:B.0;  //_GUI 34,25, 34,32
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
}

Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant In2) Input:A;  //_GUI 11,23
 Object ( Variant In3) Input:B;  //_GUI 11,26
 Object ( Variant LSB) Input:C;  //_GUI 11,31
 Object Output( Variant ZTList) ;  //_GUI 54,22
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 42,20
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) NewZTList( Variant MSB, Variant In2
    , Variant LSB) ;  //_GUI 20,19

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input:C.0;  //_GUI 39,25, 39,32
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
}

Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In3, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant In2) Input:A;  //_GUI 11,23
 Object ( Variant In3) Input:B;  //_GUI 11,26
 Object ( Variant In3) Input:C;  //_GUI 11,29
 Object ( Variant LSB) Input:D;  //_GUI 11,39
 Object Output( Variant ZTList) ;  //_GUI 56,22
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 44,20
 //_Attributes Documentation="ztl/var"
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 21,19

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input:D.0;  //_GUI 34,25, 34,40
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  
}

Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In3, Variant In3, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant In2) Input:A;  //_GUI 11,23
 Object ( Variant In3) Input:B;  //_GUI 11,26
 Object ( Variant In3) Input:C;  //_GUI 11,29
 Object ( Variant In3) Input:D;  //_GUI 11,32
 Object ( Variant LSB) Input:E;  //_GUI 11,39
 Object Output( Variant ZTList) ;  //_GUI 54,22
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 42,20
 //_Attributes Documentation="ztl/var"
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In31, Variant LSB) ;  //_GUI 21,19

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input:E.0;  //_GUI 34,25, 34,40
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  
 NewZTList.4 = Input:D.0;  
}

Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In3, Variant In3, Variant In3
    , Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant In2) Input:A;  //_GUI 11,23
 Object ( Variant In3) Input:B;  //_GUI 11,26
 Object ( Variant In3) Input:C;  //_GUI 11,29
 Object ( Variant In3) Input:D;  //_GUI 11,32
 Object ( Variant In3) Input:E;  //_GUI 11,35
 Object ( Variant LSB) Input:F;  //_GUI 11,39
 Object Output( Variant ZTList) ;  //_GUI 54,22
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 42,20
 //_Attributes Documentation="ztl/var"
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In31, Variant In32, Variant LSB) ;  //_GUI 22,19

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input:F.0;  //_GUI 39,25, 39,40
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  
 NewZTList.4 = Input:D.0;  
 NewZTList.5 = Input:E.0;  
}

Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In3, Variant In3, Variant In3
    , Variant In3, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant In2) Input:A;  //_GUI 11,23
 Object ( Variant In3) Input:B;  //_GUI 11,26
 Object ( Variant In3) Input:C;  //_GUI 11,29
 Object ( Variant In3) Input:D;  //_GUI 11,32
 Object ( Variant In3) Input:E;  //_GUI 11,35
 Object ( Variant In3) Input:F;  //_GUI 11,38
 Object ( Variant LSB) Input:G;  //_GUI 11,42
 Object Output( Variant ZTList) ;  //_GUI 55,22
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 43,20
 //_Attributes Documentation="ztl/var"
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In31, Variant In32, Variant In33
    , Variant LSB) ;  //_GUI 23,19

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input:G.0;  //_GUI 41,25, 41,43
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  
 NewZTList.4 = Input:D.0;  
 NewZTList.5 = Input:E.0;  
 NewZTList.6 = Input:F.0;  
}

Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In3, Variant In3, Variant In3
    , Variant In3, Variant In3, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant In2) Input:A;  //_GUI 11,23
 Object ( Variant In3) Input:B;  //_GUI 11,26
 Object ( Variant In3) Input:C;  //_GUI 11,29
 Object ( Variant In3) Input:D;  //_GUI 11,32
 Object ( Variant In3) Input:E;  //_GUI 11,35
 Object ( Variant In3) Input:F;  //_GUI 11,38
 Object ( Variant In3) Input:G;  //_GUI 11,41
 Object ( Variant LSB) Input:H;  //_GUI 11,52
 Object Output( Variant ZTList) ;  //_GUI 59,22
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 47,20
 //_Attributes Documentation="ztl/var"
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In31, Variant In32, Variant In33
    , Variant In34, Variant LSB) ;  //_GUI 22,19

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input:H.0;  //_GUI 45,25, 45,53
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  
 NewZTList.4 = Input:D.0;  
 NewZTList.5 = Input:E.0;  
 NewZTList.6 = Input:F.0;  
 NewZTList.7 = Input:G.0;  
}

Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In3, Variant In3, Variant In3
    , Variant In3, Variant In3, Variant In3, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant In2) Input:A;  //_GUI 11,23
 Object ( Variant In3) Input:B;  //_GUI 11,26
 Object ( Variant In3) Input:C;  //_GUI 11,29
 Object ( Variant In3) Input:D;  //_GUI 11,32
 Object ( Variant In3) Input:E;  //_GUI 11,35
 Object ( Variant In3) Input:F;  //_GUI 11,38
 Object ( Variant In3) Input:G;  //_GUI 11,41
 Object ( Variant In3) Input:H;  //_GUI 11,44
 Object ( Variant LSB) Input:I;  //_GUI 11,52
 Object Output( Variant ZTList) ;  //_GUI 61,22
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 49,20
 //_Attributes Documentation="ztl/var"
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In31, Variant In32, Variant In33
    , Variant In34, Variant In35, Variant LSB) ;  //_GUI 23,19

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input:I.0;  //_GUI 43,25, 43,53
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  
 NewZTList.4 = Input:D.0;  
 NewZTList.5 = Input:E.0;  
 NewZTList.6 = Input:F.0;  
 NewZTList.7 = Input:G.0;  
 NewZTList.8 = Input:H.0;  
}

Object ( Variant ZTList) NewZTList( NULL LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList,Documentation="single element(NULL)"
{
 //_ Object Prototypes
 Object ( NULL LSB) Input;  //_GUI 11,26
 Object Output( Variant ZTList) ;  //_GUI 51,21
 Object Text;  //_GUI 13,36,Since there is only one element, the LSB is the MSB, so it doesn't matter which push we use.
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 38,19
 //_Attributes Documentation="ztl/var"
 Object ( ZTerm ZTList) NewZTList;  //_GUI 19,18

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input.0;  //_GUI 34,24, 34,27
}

Object ( ZTerm Out1) ZeroTerminator
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList
{
 //_ Object Prototypes
 Object Output( ZTerm Out1) ;  //_GUI 77,26
 Object ( NULL ZTermNULL_Remove) Input;  //_GUI 47,31
 //_Attributes Resource=Global,WarnOnRemoval=False
 Object ( ZTerm Out) ZTermOut( NULL In1) ;  //_GUI 58,29

 // Behavior Topology
 Output.0 = ZTermOut.0;  //_GUI 73,27, 73,32
 ZTermOut.0 = Input.0;  
}

Object ( Variant Out1) Bit_ZTList( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack,Documentation="var"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 28,28
 Object Output( Variant Out1) ;  //_GUI 77,28
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 65,26
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 34,26
 //_Attributes Documentation="list"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 48,25
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = Bit_ZTList.0;  
 PushLsb.1 = PopLsb.1;  
 PopLsb.0 = Input.0;  
 Bit_ZTList.0 = PopLsb.0;  
}

Object ( Variant ZTList) Bit_ZTList( Bit LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack,Documentation="bit"
{
 //_ Object Prototypes
 Object ( Bit LSB) Input;  //_GUI 28,28
 Object Output( Variant ZTList) ;  //_GUI 51,28
 Object ( Variant ZTList) NewZTList( Variant LSB) ;  //_GUI 34,26
 //_Attributes Documentation="single element"

 // Behavior Topology
 Output.0 = NewZTList.0;  
 NewZTList.0 = Input.0;  
}

Object ( Variant Out1) Bit_ZTList( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 28,28
 Object Output( Variant Out1) ;  //_GUI 77,28
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 34,26
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 64,26
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 48,25
 //_Attributes Documentation="var"
 Object ( Variant Out1) Bit_ZTList:A( Variant In1) ;  //_GUI 48,32
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = Bit_ZTList.0;  
 PushLsb.1 = Bit_ZTList:A.0;  //_GUI 62,31, 62,35
 Bit_ZTList.0 = PopLsb.0;  
 Bit_ZTList:A.0 = PopLsb.1;  //_GUI 46,35, 46,31
}

Object ( ZTerm Out1) Bit_ZTList( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 28,28
 Object Output( ZTerm Out1) ;  //_GUI 76,28

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( ZTerm ZTList) Bit_ZTList( NULL In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack,Documentation="NULL"
{
 //_ Object Prototypes
 Object ( NULL In1) Input;  //_GUI 28,28
 Object Output( ZTerm ZTList) ;  //_GUI 76,28
 Object ( ZTerm ZTList) NewZTList;  //_GUI 62,26
 //_Attributes Documentation="empty"
 Object Text;  //_GUI 23,40,If no bits to put into a list, send out an empty list.

 // Behavior Topology
 Output.0 = NewZTList.0;  
}

Object ( Variant Out1) "2^N_List"( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 8,44
 Object Output( Variant Out1) ;  //_GUI 110,42
 Object ( Variant Size) ListSize( Variant List) ;  //_GUI 26,25
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction
    ( ZTList In0) ;  //_GUI 22,44
 Object ( Variant Hi, Variant Lo) Lo_N( Variant Data
    , Variant Lo_N) ;  //_GUI 52,23
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:A
    ( Variant In0) ;  //_GUI 38,27
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 64,22
 //_Attributes Documentation="var"
 Object ( Variant DataList) ListFill( Variant Data, Variant List) ;  //_GUI 80,20
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 51,11
 //_Attributes Documentation="list"
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction:B
    ( ZTList In3) ;  //_GUI 22,27
 Object ( Variant Out1) Cat( Variant Hi, Variant Lo) ;  //_GUI 98,40
 //_Attributes Documentation="ztlist/ztlist"
 Object ( Variant Out1) Zero( Variant In1) ;  //_GUI 64,13
 //_Attributes Documentation="NULL"
 Object Text;  //_GUI 26,34,Subtract (using Lo_N) our list size (in bits) from the power of 2 size.
 Object Text;  //_GUI 64,32,Make a list with one element per bit
 Object Text;  //_GUI 79,29,Replace each element with a zeroed one from the origonal list.
 Object Text;  //_GUI 50,5,Get an element and zero it.
 Object Text;  //_GUI 99,30,Add the zeroed elements to the top (Most sig) end.
 Object ( Variant Out1) "Pad2^N"( Variant In1) ;  //_GUI 40,20

 // Behavior Topology
 Output.0 = Cat.0;  
 ListSize.0 = Junction:B.2;  
 Junction.0 = Input.0;  
 Lo_N.0 = "Pad2^N".0;  //_GUI 51,25, 51,23
 Lo_N.1 = Junction:A.1;  
 Junction:A.0 = ListSize.0;  
 Bit_ZTList.0 = Lo_N.0;  
 ListFill.0 = Zero.0;  //_GUI 77,22, 77,16
 ListFill.1 = Bit_ZTList.0;  
 PopLsb.0 = Junction:B.1;  //_GUI 23,14
 Junction:B.0 = Junction.0;  
 Cat.0 = ListFill.0;  //_GUI 95,42, 95,23
 Cat.1 = Junction.1;  
 Zero.0 = PopLsb.1;  
 "Pad2^N".0 = Junction:A.0;  //_GUI 39,23
}

Object ( ZTerm Out1) "2^N_List"( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="term"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 9,21
 Object Output( ZTerm Out1) ;  //_GUI 39,21
 Object Text;  //_GUI 14,10,I'm just guessing that if we get an empty list, we want to keep it empty.

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant ContextualData) AddContext( Variant ContextualType, ZTList Data) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( Variant ContextualType) Input;  //_GUI 55,44
 Object ( ZTList Data) Input:A;  //_GUI 55,74
 Object Output( Variant ContextualData) ;  //_GUI 142,46
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 63,72
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 117,44
 //_Attributes Documentation="ztl/var"
 Object ( Variant ContextualData) AddContext( Variant ContextualType, Variant Data) ;  //_GUI 80,43
 //_Attributes Documentation="var"
 Object ( Variant ContextualData) AddContext:A( Variant ContextualType, Variant Data) ;  //_GUI 81,56
 //_Attributes Documentation="var"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 69,44

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input:A.0;  
 PushLsb.0 = AddContext.0;  
 PushLsb.1 = AddContext:A.0;  //_GUI 113,49, 113,59
 AddContext.0 = Junction.1;  
 AddContext.1 = PopLsb.0;  //_GUI 73,48
 AddContext:A.0 = Junction.2;  //_GUI 70,58
 AddContext:A.1 = PopLsb.1;  //_GUI 81,77
 Junction.0 = Input.0;  
}

Object ( ZTerm ContextualData) AddContext( Variant ContextualType, ZTerm Data) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( Variant ContextualType) Input;  //_GUI 55,44
 Object ( ZTerm Data) Input:A;  //_GUI 55,74
 Object Output( ZTerm ContextualData) ;  //_GUI 142,46

 // Behavior Topology
 Output.0 = Input:A.0;  //_GUI 88,47, 88,75
}

Object ( Variant Out1) AND( ZTList In1, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/zlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 28,22
 Object ( ZTList In2) Input:A;  //_GUI 28,32
 Object Output( Variant Out1) ;  //_GUI 87,23
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 34,30
 //_Attributes Documentation="list"
 Object ( Variant Out1) AND( Variant In1, Variant In2) ;  //_GUI 56,20
 Object ( Variant Out1) AND:A( Variant In1, Variant In2) ;  //_GUI 56,30
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 75,21
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 34,20
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input:A.0;  
 AND.0 = PopLsb:A.0;  
 AND.1 = PopLsb.0;  //_GUI 53,25, 53,28, 47,28, 47,32
 AND:A.0 = PopLsb:A.1;  //_GUI 50,32, 50,25
 AND:A.1 = PopLsb.1;  
 PushLsb.0 = AND.0;  
 PushLsb.1 = AND:A.0;  //_GUI 70,26, 70,33
 PopLsb:A.0 = Input.0;  
}

Object ( ZTerm Out1) AND( ZTerm In1, ZTerm In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 28,23
 Object ( ZTerm In2) Input:A;  //_GUI 28,32
 Object Output( ZTerm Out1) ;  //_GUI 86,23

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( ZTerm Out1) AND( ZTerm In1, Variant In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/var"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 28,23
 Object ( Variant In2) Input:A;  //_GUI 28,32
 Object Output( ZTerm Out1) ;  //_GUI 86,23

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( ZTerm Out1) AND( Variant In1, ZTerm In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="var/zterm"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 28,23
 Object ( ZTerm In2) Input:A;  //_GUI 28,32
 Object Output( ZTerm Out1) ;  //_GUI 86,23

 // Behavior Topology
 Output.0 = Input:A.0;  //_GUI 59,24, 59,33
}

Object ( Variant Out1) AND( ZTList In1, Variant In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/var"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 28,22
 Object ( Variant In2) Input:A;  //_GUI 28,34
 Object Output( Variant Out1) ;  //_GUI 86,23
 Object ( Variant Out1) AND( Variant In1, Variant In2) ;  //_GUI 56,20
 Object ( Variant Out1) AND:A( Variant In1, Variant In2) ;  //_GUI 56,30
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 46,34
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 74,21
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 34,20
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 AND.0 = PopLsb.0;  
 AND.1 = Junction.0;  //_GUI 53,25, 53,28, 47,28
 AND:A.0 = PopLsb.1;  //_GUI 50,32, 50,25
 AND:A.1 = Junction.1;  
 Junction.0 = Input:A.0;  
 PushLsb.0 = AND.0;  
 PushLsb.1 = AND:A.0;  //_GUI 70,26, 70,33
 PopLsb.0 = Input.0;  
}

Object ( Variant Out1) AND( Variant In1, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="var/zlist"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 28,21
 Object ( ZTList In2) Input:A;  //_GUI 28,32
 Object Output( Variant Out1) ;  //_GUI 87,23
 Object ( Variant Out1) AND( Variant In1, Variant In2) ;  //_GUI 56,20
 Object ( Variant Out1) AND:A( Variant In1, Variant In2) ;  //_GUI 56,30
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 49,21
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 75,21
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 34,30
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 AND.0 = Junction.1;  
 AND.1 = PopLsb.0;  //_GUI 53,25, 53,28, 47,28, 47,32
 AND:A.0 = Junction.2;  //_GUI 50,32
 AND:A.1 = PopLsb.1;  
 Junction.0 = Input.0;  
 PushLsb.0 = AND.0;  
 PushLsb.1 = AND:A.0;  //_GUI 70,26, 70,33
 PopLsb.0 = Input:A.0;  
}

Object ( Variant Out1) AND( ZTList In1, Bit In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/bit"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 28,22
 Object ( Bit In2) Input:A;  //_GUI 28,34
 Object Output( Variant Out1) ;  //_GUI 86,23
 Object ( Variant Out1) AND( Variant In1, Variant In2) ;  //_GUI 56,20
 Object ( Variant Out1) AND:A( Variant In1, Variant In2) ;  //_GUI 56,30
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction
    ( Bit In0) ;  //_GUI 46,34
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 74,21
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 34,20
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 AND.0 = PopLsb.0;  
 AND.1 = Junction.0;  //_GUI 53,25, 53,28, 47,28
 AND:A.0 = PopLsb.1;  //_GUI 50,32, 50,25
 AND:A.1 = Junction.1;  
 Junction.0 = Input:A.0;  
 PushLsb.0 = AND.0;  
 PushLsb.1 = AND:A.0;  //_GUI 70,26, 70,33
 PopLsb.0 = Input.0;  
}

Object ( Variant Out1) AND( Bit In1, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="bit/zlist"
{
 //_ Object Prototypes
 Object ( Bit In1) Input;  //_GUI 28,21
 Object ( ZTList In2) Input:A;  //_GUI 28,32
 Object Output( Variant Out1) ;  //_GUI 86,23
 Object ( Variant Out1) AND( Variant In1, Variant In2) ;  //_GUI 56,20
 Object ( Variant Out1) AND:A( Variant In1, Variant In2) ;  //_GUI 56,30
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction
    ( Bit In0) ;  //_GUI 49,21
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 74,21
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 34,30
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 AND.0 = Junction.1;  
 AND.1 = PopLsb.0;  //_GUI 53,25, 53,28, 47,28, 47,32
 AND:A.0 = Junction.2;  //_GUI 50,32
 AND:A.1 = PopLsb.1;  
 Junction.0 = Input.0;  
 PushLsb.0 = AND.0;  
 PushLsb.1 = AND:A.0;  //_GUI 70,26, 70,33
 PopLsb.0 = Input:A.0;  
}

Object ( ZTerm Out1) AND( ZTerm In1, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/ztlist"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 28,23
 Object ( ZTList In2) Input:A;  //_GUI 28,32
 Object Output( ZTerm Out1) ;  //_GUI 86,23
 Object ( Bit In) Input:B;  //_GUI 55,42
 //_Attributes Constant="*1"
 Object Output:A( Bit Trap) ;  //_GUI 61,42
 //_Attributes Trap="Mismatched ZTList sizes in AND."

 // Behavior Topology
 Output.0 = Input.0;  
 Output:A.0 = Input:B.0;  
}

Object ( ZTerm Out1) AND( ZTList In1, ZTerm In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/zterm"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 28,23
 Object ( ZTerm In2) Input:A;  //_GUI 28,32
 Object Output( ZTerm Out1) ;  //_GUI 86,23
 Object ( Bit In) Input:B;  //_GUI 54,13
 //_Attributes Constant="*1"
 Object Output:A( Bit Trap) ;  //_GUI 59,13
 //_Attributes Trap="Mismatched ZTList sizes in AND."

 // Behavior Topology
 Output.0 = Input:A.0;  //_GUI 59,24, 59,33
 Output:A.0 = Input:B.0;  
}

Object ( ZTerm Out1) AND( Bit In1, ZTerm In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="bit/zterm"
{
 //_ Object Prototypes
 Object ( Bit In1) Input;  //_GUI 28,23
 Object ( ZTerm In2) Input:A;  //_GUI 28,32
 Object Output( ZTerm Out1) ;  //_GUI 86,23

 // Behavior Topology
 Output.0 = Input:A.0;  //_GUI 59,24, 59,33
}

Object ( ZTerm Out1) AND( ZTerm In1, Bit In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/bit"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 28,23
 Object ( Bit In2) Input:A;  //_GUI 28,32
 Object Output( ZTerm Out1) ;  //_GUI 86,23

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( ZTerm Hi, ZTerm Lo) Bisect( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 19,33
 Object Output( ZTerm Hi) ;  //_GUI 52,20
 Object Output:A( ZTerm Lo) ;  //_GUI 52,33
 Object ( ZTerm Out1, ZTerm Out2, ZTerm Out3) Junction
    ( ZTerm In0) ;  //_GUI 43,33

 // Behavior Topology
 Output.0 = Junction.0;  //_GUI 44,21
 Output:A.0 = Junction.1;  
 Junction.0 = Input.0;  
}

Object ( Variant Hi, Variant Lo) Bisect( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 20,58
 Object Output( Variant Hi) ;  //_GUI 163,36
 Object Output:A( Variant Lo) ;  //_GUI 163,49
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 33,56
 //_Attributes Documentation="list"
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 91,41
 //_Attributes Documentation="list"
 Object ( Variant Hi, Variant Lo) Bisect( Variant In1) ;  //_GUI 105,43
 //_Attributes Documentation="zterm"
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 119,40
 //_Attributes Documentation="var/zterm"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 150,47
 //_Attributes Documentation="ztl/var"
 Object ( Bit Out1) IsZTerm( Variant In1) ;  //_GUI 50,51
 //_Attributes Documentation="zterm"
 Object ( Variant "#0", Variant "#1") $SelectOut( Variant In1
    , Bit S) ;  //_GUI 66,46
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In3) ;  //_GUI 46,53
 Object ( Variant Out) $Select( Variant "#0", Variant "#1"
    , Bit S) ;  //_GUI 138,46
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:A
    ( Bit In0) ;  //_GUI 62,53
 Object ( Variant Out) $Select:A( Variant "#0", Variant "#1"
    , Bit S) ;  //_GUI 138,34
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:B
    ( Bit In0) ;  //_GUI 134,53
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:C
    ( Variant In0) ;  //_GUI 132,50
 Object Text;  //_GUI 48,35,If the ZTList only had one element, send a one element list out Lo and a zero element list out Hi.
 Object Text;  //_GUI 20,11,Basically what we do here is pop an element off of the bottom and another off of the top then recurse.  Then when we get the Hi and Lo back append to the Lo and prepend to the Hi.

 // Behavior Topology
 Output.0 = $Select:A.0;  
 Output:A.0 = PushLsb.0;  
 PopLsb.0 = Input.0;  
 PopMsb.0 = $SelectOut.0;  //_GUI 86,44, 86,48
 Bisect.0 = PopMsb.1;  
 PushMsb.0 = PopMsb.0;  //_GUI 104,42, 104,43
 PushMsb.1 = Bisect.0;  
 PushLsb.0 = $Select.0;  
 PushLsb.1 = PopLsb.1;  //_GUI 150,61
 IsZTerm.0 = Junction.2;  
 $SelectOut.0 = Junction.1;  //_GUI 47,48
 $SelectOut.1 = Junction:A.0;  //_GUI 63,51
 Junction.0 = PopLsb.0;  //_GUI 47,58
 $Select.0 = Bisect.1;  
 $Select.1 = Junction:C.1;  
 $Select.2 = Junction:B.1;  
 Junction:A.0 = IsZTerm.0;  
 $Select:A.0 = PushMsb.0;  //_GUI 130,36
 $Select:A.1 = Junction:C.0;  //_GUI 133,39
 $Select:A.2 = Junction:B.0;  //_GUI 135,42
 Junction:B.0 = Junction:A.1;  
 Junction:C.0 = $SelectOut.1;  
}

Object ( Variant Out1) Cat( ZTList Hi, ZTList Lo) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist/ztlist"
{
 //_ Object Prototypes
 Object ( ZTList Hi) Input;  //_GUI 7,19
 Object ( ZTList Lo) Input:A;  //_GUI 7,23
 Object Output( Variant Out1) ;  //_GUI 50,23
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 13,21
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 25,18
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) Cat( Variant Hi, Variant Lo) ;  //_GUI 38,21
 Object Text;  //_GUI 7,39,Combine two ztlists into one.If you want to put an element on, use push.

 // Behavior Topology
 Output.0 = Cat.0;  
 PopMsb.0 = Input:A.0;  
 PushLsb.0 = Input.0;  
 PushLsb.1 = PopMsb.0;  
 Cat.0 = PushLsb.0;  //_GUI 37,23, 37,21
 Cat.1 = PopMsb.1;  
}

Object ( ZTList Out1) Cat( ZTList Hi, ZTerm Lo) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist/zterm"
{
 //_ Object Prototypes
 Object ( ZTList Hi) Input;  //_GUI 7,19
 Object ( ZTerm Lo) Input:A;  //_GUI 7,23
 Object Output( ZTList Out1) ;  //_GUI 20,19

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( ZTList Out1) Cat( ZTerm Hi, ZTList Lo) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm/ztlist"
{
 //_ Object Prototypes
 Object ( ZTerm Hi) Input;  //_GUI 7,19
 Object ( ZTList Lo) Input:A;  //_GUI 7,23
 Object Output( ZTList Out1) ;  //_GUI 20,23

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( ZTerm Out1) Cat( ZTerm Hi, ZTerm Lo) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm/zterm"
{
 //_ Object Prototypes
 Object ( ZTerm Hi) Input;  //_GUI 7,19
 Object ( ZTerm Lo) Input:A;  //_GUI 7,23
 Object Output( ZTerm Out1) ;  //_GUI 27,23

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Variant Out1) CatWrong( ZTList Hi, Variant Lo) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples,Documentation="ztlist/var"
{
 //_ Object Prototypes
 Object ( ZTList Hi) Input;  //_GUI 7,19
 Object ( Variant Lo) Input:A;  //_GUI 7,22
 Object Output( Variant Out1) ;  //_GUI 44,20
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 25,18
 //_Attributes Documentation="ztl/var"
 Object Text;  //_GUI 9,31,Cat is to combine two ztlists.  What this does is put an element (not a ztlist) on the bottom.

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = Input.0;  
 PushLsb.1 = Input:A.0;  
}

Object ( Variant Out1) CollectLeavesAsLsb( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist"
{
 // Will work for any dimentions of lists as long as all of the leaves reside in the same dimention.
 // Will not work if any of the lists (except the first) are empty because the level at which the leaves are located is ambiguous.
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 16,23
 Object Output( Variant Out1) ;  //_GUI 57,23
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 22,21
 //_Attributes Documentation="list"
 Object ( Variant Out1) $CollectLeavesAsLsb( Variant In1, Variant LSB) ;  //_GUI 34,21
 //_Attributes Documentation="zterm/var"

 // Behavior Topology
 Output.0 = $CollectLeavesAsLsb.0;  
 PopLsb.0 = Input.0;  
 $CollectLeavesAsLsb.0 = PopLsb.0;  
 $CollectLeavesAsLsb.1 = PopLsb.1;  
}

Object ( NULL Out1) CollectLeavesAsLsb( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 16,23
 Object Output( NULL Out1) ;  //_GUI 43,21
 Object ( NULL Out1) $Cast( ZTerm Data, NULL Type) ;  //_GUI 28,19

 // Behavior Topology
 Output.0 = $Cast.0;  
 $Cast.0 = Input.0;  
}

Object ( Variant El) GetLoElememt( Variant Data, Variant Lo_e) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/var"
{
 //_ Object Prototypes
 Object ( Variant Data) Input;  //_GUI 24,49
 Object ( Variant Lo_e) Input:A;  //_GUI 24,57
 Object Output( Variant El) ;  //_GUI 80,49
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 30,55
 //_Attributes Documentation="list"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 30,47
 //_Attributes Documentation="list"
 Object ( Variant El) GetLoElememt( Variant Data, Variant Lo_e) ;  //_GUI 48,43
 Object ( Bit Out1) IsZTerm( Variant In1) ;  //_GUI 50,54
 //_Attributes Documentation="zterm"
 Object ( Variant Out) $Select( Variant "#0", Variant "#1"
    , Bit S) ;  //_GUI 68,47
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 44,56

 // Behavior Topology
 Output.0 = $Select.0;  
 PopLsb.0 = Input:A.0;  
 PopLsb:A.0 = Input.0;  
 GetLoElememt.0 = PopLsb:A.0;  //_GUI 42,45, 42,49
 GetLoElememt.1 = Junction.0;  //_GUI 45,48
 IsZTerm.0 = Junction.1;  
 $Select.0 = GetLoElememt.0;  //_GUI 65,49, 65,46
 $Select.1 = PopLsb:A.1;  
 $Select.2 = IsZTerm.0;  //_GUI 65,55, 65,57
 Junction.0 = PopLsb.0;  
}

Object ( Variant El) GetLoElememt( Variant Data, Bit Lo_e) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/bit"
{
 //_ Object Prototypes
 Object ( Variant Data) Input;  //_GUI 24,49
 Object ( Bit Lo_e) Input:A;  //_GUI 24,57
 Object Output( Variant El) ;  //_GUI 43,51
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 30,47
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = PopLsb.1;  
 PopLsb.0 = Input.0;  
}

Object ( NULL El) GetLoElememt( Variant Data, ZTerm Lo_e) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/zterm"
{
 //_ Object Prototypes
 Object ( Variant Data) Input;  //_GUI 24,49
 Object ( ZTerm Lo_e) Input:A;  //_GUI 24,57
 Object Output( NULL El) ;  //_GUI 46,52
 Object ( NULL Out1) NULL;  //_GUI 34,50
 Object Text;  //_GUI 22,68,No element to get.In the recursion case of ztl/ztl this sheet is called, but the result is disconnected.

 // Behavior Topology
 Output.0 = NULL.0;  
}

Object ( NULL El) GetLoElememt( NULL Data, ZTerm Lo_e) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="NULL/zterm"
{
 //_ Object Prototypes
 Object ( NULL Data) Input;  //_GUI 24,49
 Object ( ZTerm Lo_e) Input:A;  //_GUI 24,57
 Object Output( NULL El) ;  //_GUI 46,52
 Object ( NULL Out1) NULL;  //_GUI 34,50
 Object Text;  //_GUI 22,68,No element to get.In the recursion case of var/ztl where var and ztl have the same number of elements,  this sheet is called, but the result is disconnected.

 // Behavior Topology
 Output.0 = NULL.0;  
}

Object ( ZTerm Out1) Interleave( ZTerm "LsbInIsLsbOut+1", ZTerm LsbInIsLsbOut) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm/zterm"
{
 //_ Object Prototypes
 Object ( ZTerm "LsbInIsLsbOut+1") Input;  //_GUI 26,14
 Object ( ZTerm LsbInIsLsbOut) Input:A;  //_GUI 26,25
 Object Output( ZTerm Out1) ;  //_GUI 56,14

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Bit Out1) IsAZTList( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 33,21
 Object Output( Bit Out1) ;  //_GUI 63,21
 Object ( Bit In) Input:A;  //_GUI 58,21
 //_Attributes Constant="*1"

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Bit Out1) IsAZTList( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 33,21
 Object Output( Bit Out1) ;  //_GUI 63,21
 Object ( Bit In) Input:A;  //_GUI 58,21
 //_Attributes Constant="*1"
 Object Text;  //_GUI 30,29,A ZTerm by itself is an empty ZTList so it is therefor a ZTList.See IsZTList and IsZTerm to test for ZTList and ZTerm independently.

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Bit Out1) IsAZTList( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="var"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 33,21
 Object Output( Bit Out1) ;  //_GUI 63,21
 Object ( Bit In) Input:A;  //_GUI 58,21
 //_Attributes Constant="*0"

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Bit Out1) IsZTerm( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 33,21
 Object Output( Bit Out1) ;  //_GUI 63,21
 Object ( Bit In) Input:A;  //_GUI 58,21
 //_Attributes Constant="*1"

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Bit Out1) IsZTerm( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="var"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 33,21
 Object Output( Bit Out1) ;  //_GUI 63,21
 Object ( Bit In) Input:A;  //_GUI 58,21
 //_Attributes Constant="*0"

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Bit Out1) IsZTList( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 33,21
 Object Output( Bit Out1) ;  //_GUI 63,21
 Object ( Bit In) Input:A;  //_GUI 58,21
 //_Attributes Constant="*1"

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Bit Out1) IsZTList( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="var"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 33,21
 Object Output( Bit Out1) ;  //_GUI 63,21
 Object ( Bit In) Input:A;  //_GUI 58,21
 //_Attributes Constant="*0"

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Variant MSB, Variant Out2) LeafPopMsb( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 30,32
 Object Output( Variant MSB) ;  //_GUI 48,31
 Object Output:A( Variant Out2) ;  //_GUI 48,34
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 36,30
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = PopMsb.0;  
 Output:A.0 = PopMsb.1;  
 PopMsb.0 = Input.0;  
}

Object ( Variant MSB, Variant Out1) LeafPopMsb( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist"
{
 // The MSB value is not coming out correctly
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 30,32
 Object Output( Variant MSB) ;  //_GUI 96,28
 Object Output:A( Variant Out1) ;  //_GUI 97,37
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 36,30
 //_Attributes Documentation="list"
 Object Text;  //_GUI 41,17,The order in which we recurse through the list is independent of which elememt we pop at the leaf.
 Object ( Variant MSB, Variant Out2) LeafPopMsb( Variant In1) ;  //_GUI 52,35
 //_Attributes Documentation="var"
 Object ( Variant MSB, Variant Out2) LeafPopMsb:A( Variant In1) ;  //_GUI 52,26
 //_Attributes Documentation="var"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 77,26
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) PushLsb:A( Variant In1, Variant LSB) ;  //_GUI 77,35
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 Output:A.0 = PushLsb:A.0;  
 PopLsb.0 = Input.0;  
 LeafPopMsb.0 = PopLsb.1;  //_GUI 49,38, 49,35
 LeafPopMsb:A.0 = PopLsb.0;  //_GUI 49,29, 49,32
 PushLsb.0 = LeafPopMsb:A.0;  
 PushLsb.1 = LeafPopMsb.0;  //_GUI 72,31, 72,37
 PushLsb:A.0 = LeafPopMsb:A.1;  //_GUI 75,37, 75,34, 69,34, 69,31
 PushLsb:A.1 = LeafPopMsb.1;  
}

Object ( ZTerm MSB, ZTerm Out2) LeafPopMsb( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 30,28
 Object Output( ZTerm MSB) ;  //_GUI 89,28
 Object Output:A( ZTerm Out2) ;  //_GUI 89,37
 Object Text;  //_GUI 45,21,Signal the end of both lists
 Object ( ZTerm Out1, ZTerm Out2, ZTerm Out3) Junction
    ( ZTerm In0) ;  //_GUI 83,28

 // Behavior Topology
 Output.0 = Junction.1;  
 Output:A.0 = Junction.2;  //_GUI 84,38
 Junction.0 = Input.0;  
}

Object ( ZTerm Out1) LeafPushLsb( ZTerm In1, ZTerm LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm/zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 36,39
 Object ( ZTerm LSB) Input:A;  //_GUI 36,41
 Object Output( ZTerm Out1) ;  //_GUI 54,39
 Object Text;  //_GUI 35,48,The LSB and the list to put it on to should run out simultaneously in a multi-dimentional case.

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant Out1) LeafPushLsb( ZTList In1, ZTList LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist/ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 36,38
 Object ( ZTList LSB) Input:A;  //_GUI 36,47
 Object Output( Variant Out1) ;  //_GUI 95,39
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 42,36
 //_Attributes Documentation="list"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 42,45
 //_Attributes Documentation="list"
 Object ( Variant Out1) LeafPushLsb( Variant In1, Variant LSB) ;  //_GUI 60,36
 //_Attributes Documentation="var/var"
 Object ( Variant Out1) LeafPushLsb:A( Variant In1, Variant LSB) ;  //_GUI 60,45
 //_Attributes Documentation="var/var"
 Object Text;  //_GUI 35,57,We are not down to our leaf element to push yet so continue to recurse
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 82,37
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input.0;  
 PopLsb:A.0 = Input:A.0;  
 LeafPushLsb.0 = PopLsb.0;  
 LeafPushLsb.1 = PopLsb:A.0;  //_GUI 58,41, 58,47
 LeafPushLsb:A.0 = PopLsb.1;  //_GUI 56,47, 56,41
 LeafPushLsb:A.1 = PopLsb:A.1;  
 PushLsb.0 = LeafPushLsb.0;  
 PushLsb.1 = LeafPushLsb:A.0;  //_GUI 78,42, 78,48
}

Object ( Variant Out1) LeafPushMsb( Variant MSB, Variant In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/var"
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 36,38
 Object ( Variant In2) Input:A;  //_GUI 36,41
 Object Output( Variant Out1) ;  //_GUI 55,39
 Object Text;  //_GUI 35,48,We are down to  the new leaf element, so put it on.Note that we assume we are down to our leaf dimention because our LSB input dimention is at its leaf.
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 42,37
 //_Attributes Documentation="var/zterm"
 Object Text;  //_GUI 16,45,either a ZTList or a ZTerm

 // Behavior Topology
 Output.0 = PushMsb.0;  
 PushMsb.0 = Input.0;  
 PushMsb.1 = Input:A.0;  
}

Object ( ZTerm Out1) LeafPushMsb( ZTerm MSB, ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm/zterm"
{
 //_ Object Prototypes
 Object ( ZTerm MSB) Input;  //_GUI 36,36
 Object ( ZTerm In1) Input:A;  //_GUI 36,39
 Object Output( ZTerm Out1) ;  //_GUI 54,39
 Object Text;  //_GUI 35,48,The MSB and the list to put it on to should run out simultaneously in a multi-dimentional case.

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Variant Out1) LeafPushMsb( ZTList MSB, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist/ztlist"
{
 //_ Object Prototypes
 Object ( ZTList MSB) Input;  //_GUI 36,38
 Object ( ZTList In2) Input:A;  //_GUI 36,47
 Object Output( Variant Out1) ;  //_GUI 101,39
 Object ( Variant Out1) LeafPushMsb( Variant MSB, Variant In2) ;  //_GUI 63,36
 //_Attributes Documentation="var/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 43,36
 //_Attributes Documentation="list"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 43,45
 //_Attributes Documentation="list"
 Object ( Variant Out1) LeafPushMsb:A( Variant MSB, Variant In2) ;  //_GUI 63,45
 //_Attributes Documentation="var/var"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 88,37
 //_Attributes Documentation="ztl/var"
 Object Text;  //_GUI 35,57,We are not down to our leaf element to push yet so continue to recurse

 // Behavior Topology
 Output.0 = PushLsb.0;  
 LeafPushMsb.0 = PopLsb.0;  
 LeafPushMsb.1 = PopLsb:A.0;  //_GUI 60,41, 60,44, 56,44, 56,47
 PopLsb.0 = Input.0;  
 PopLsb:A.0 = Input:A.0;  
 LeafPushMsb:A.0 = PopLsb.1;  //_GUI 58,47, 58,41
 LeafPushMsb:A.1 = PopLsb:A.1;  
 PushLsb.0 = LeafPushMsb.0;  
 PushLsb.1 = LeafPushMsb:A.0;  //_GUI 83,42, 83,48
}

Object ( ZTerm Out1) LeastSig( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 42,38
 Object Output( ZTerm Out1) ;  //_GUI 56,38

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant Out1) LeastSig( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="tlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 29,38
 Object Output( Variant Out1) ;  //_GUI 135,39
 Object ( Variant Out1) INVERT( Variant In1) ;  //_GUI 65,35
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 64,40
 Object ( Bit Out1) EqualZero( Variant In1) ;  //_GUI 104,36
 Object Text;  //_GUI 63,56,If the MSB is one and the rest of the bits are zero, then the current bit is one.
 Object ( Variant Out1) LeastSig( Variant In1) ;  //_GUI 85,48
 //_Attributes Documentation="NULL"
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 51,36
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 120,37
 //_Attributes Documentation="var/zterm"
 Object ( Variant Out1) CollectLSB( Variant In2, Variant In3) ;  //_GUI 84,36

 // Behavior Topology
 Output.0 = PushMsb.0;  
 INVERT.0 = PopMsb.0;  
 Junction.0 = PopMsb.1;  
 EqualZero.0 = CollectLSB.0;  
 LeastSig.0 = Junction.2;  //_GUI 65,51
 PopMsb.0 = Input.0;  
 PushMsb.0 = EqualZero.0;  
 PushMsb.1 = LeastSig.0;  //_GUI 117,42, 117,51
 CollectLSB.0 = INVERT.0;  
 CollectLSB.1 = Junction.1;  
}

Object ( Variant A) List_DMux( Variant I, ZTList S) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/ztlist"
{
 //_ Object Prototypes
 Object ( Variant I) Input;  //_GUI 62,25
 Object ( ZTList S) Input:A;  //_GUI 62,37
 Object Output( Variant A) ;  //_GUI 124,35
 Object ( Variant Out1) AND( Variant In1, Variant In2) ;  //_GUI 96,35
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 68,35
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 112,33
 //_Attributes Documentation="ztl/var"
 Object ( Variant A) List_DMux( Variant I, Variant S) ;  //_GUI 96,24
 //_Attributes Documentation="ztlist/ztlist"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 89,25

 // Behavior Topology
 Output.0 = PushLsb.0;  
 AND.0 = Junction.2;  //_GUI 90,37
 AND.1 = PopLsb.1;  
 PopLsb.0 = Input:A.0;  
 PushLsb.0 = List_DMux.0;  //_GUI 110,35, 110,27
 PushLsb.1 = AND.0;  
 List_DMux.0 = Junction.1;  
 List_DMux.1 = PopLsb.0;  //_GUI 87,29, 87,37
 Junction.0 = Input.0;  
}

Object ( ZTerm A) List_DMux( Variant I, ZTerm S) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/zterm"
{
 //_ Object Prototypes
 Object ( Variant I) Input;  //_GUI 62,26
 Object ( ZTerm S) Input:A;  //_GUI 62,37
 Object Output( ZTerm A) ;  //_GUI 142,37

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Variant A) List_DMux_Sel( Variant I, Variant S) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/var"
{
 //_ Object Prototypes
 Object ( Variant I) Input;  //_GUI 62,34
 Object ( Variant S) Input:A;  //_GUI 62,39
 Object Output( Variant A) ;  //_GUI 116,35
 Object ( Variant A) List_DMux( Variant I, Variant S) ;  //_GUI 101,33
 //_Attributes Documentation="ztlist/ztlist"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 84,37
 //_Attributes Documentation="var"
 Object ( Variant Mask) NumToMask( Variant Num) ;  //_GUI 68,37

 // Behavior Topology
 Output.0 = List_DMux.0;  
 List_DMux.0 = Input.0;  
 List_DMux.1 = Bit_ZTList.0;  //_GUI 98,38, 98,40
 Bit_ZTList.0 = NumToMask.0;  
 NumToMask.0 = Input:A.0;  
}

Object ( NULL Data) List_Mux( ZTerm Data, ZTerm Mask) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/zterm"
{
 //_ Object Prototypes
 Object ( ZTerm Data) Input;  //_GUI 61,73
 Object ( ZTerm Mask) Input:A;  //_GUI 61,78
 Object Output( NULL Data) ;  //_GUI 99,71
 Object Text;  //_GUI 51,25,We output a NULL here because the output is put into an OR gate which ORes against variants in the single dimentional case.In the outer-most multi-dimensional case the ORing is performed on ZTLs.  An OR of a NULL/ZTL pair will pass through the ZTL unchaged.In the non-outer-most multi-dimensional case, we need a zterm to pass through instead of a NULL.  We can't do that here because we can't detect the condition here.  It is done with $Selects in the ZTList/ZTList overload.
 Object ( NULL Out1) NULL;  //_GUI 88,69

 // Behavior Topology
 Output.0 = NULL.0;  
}

Object ( Variant Data) List_Mux( ZTList Data, Bit Mask) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/bit"
{
 //_ Object Prototypes
 Object ( ZTList Data) Input;  //_GUI 30,36
 Object ( Bit Mask) Input:A;  //_GUI 30,39
 Object Output( Variant Data) ;  //_GUI 87,37
 Object ( Variant Out1) AND( Variant In1, Variant In2) ;  //_GUI 60,35
 Object Text;  //_GUI 24,18,This is to support multi-dimentional ztlist data

 // Behavior Topology
 Output.0 = AND.0;  
 AND.0 = Input.0;  
 AND.1 = Input:A.0;  
}

Object ( Variant Data) List_Mux( ZTerm Data, Bit Sel
    , Bit In3) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/bit"
{
 //_ Object Prototypes
 Object ( ZTerm Data) Input;  //_GUI 30,36
 Object ( Bit Sel) Input:A;  //_GUI 30,39
 Object ( Bit In3) Input:B;  //_GUI 29,47
 Object Output( Variant Data) ;  //_GUI 56,36
 Object Output:A( Bit Trap) ;  //_GUI 35,47
 //_Attributes Trap="Data and Sel are different sizes"
 Object Text;  //_GUI 24,22,If data is an empty list, no data can be selected.

 // Behavior Topology
 Output:A.0 = Input:B.0;  
}

Object ( Variant Data) List_Mux_Sel( Variant ListData, ZTList Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="var/ztlist"
{
 //_ Object Prototypes
 Object ( Variant ListData) Input;  //_GUI 45,27
 Object ( ZTList Sel) Input:A;  //_GUI 45,30
 Object Output( Variant Data) ;  //_GUI 76,28
 Object Text;  //_GUI 27,6,An N-dimention mux
 Object Text;  //_GUI 8,13,Keep ListData a Variant so the number of List_Mux_Sel overload permutations doesn't square!  This means we can't overload on itt, so overload using a different object instead.
 Object ( Variant Data) $List_Mux_Sel_ZTList( Variant ListData, ZTList Sel) ;  //_GUI 52,26
 //_Attributes Documentation="ZTList/ZTList"

 // Behavior Topology
 Output.0 = $List_Mux_Sel_ZTList.0;  
 $List_Mux_Sel_ZTList.0 = Input.0;  
 $List_Mux_Sel_ZTList.1 = Input:A.0;  
}

Object ( Variant Data) List_Mux_Sel( Variant ListData, ZTerm Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="var/zterm"
{
 //_ Object Prototypes
 Object ( Variant ListData) Input;  //_GUI 23,11
 Object ( ZTerm Sel) Input:A;  //_GUI 23,24
 Object Output( Variant Data) ;  //_GUI 82,11
 Object Text;  //_GUI 18,33,We have reached the end of our selecting list, so nothing else needs to be selected, so pass the remaining data (if there is any) through unchanged.

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( ZTerm DataList) ListFill( Variant Data, ZTerm List) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 // to support zero terminated lists
 //_ Object Prototypes
 Object ( Variant Data) Input;  //_GUI 74,37
 Object ( ZTerm List) Input:A;  //_GUI 74,46
 Object Output( ZTerm DataList) ;  //_GUI 149,46

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Variant DataList) ListFill( Variant Data, ZTList List) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 // to support zero terminated lists
 //_ Object Prototypes
 Object ( Variant Data) Input;  //_GUI 10,12
 Object ( ZTList List) Input:A;  //_GUI 10,21
 Object Output( Variant DataList) ;  //_GUI 69,19
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 24,19
 //_Attributes Documentation="list"
 Object ( Variant DataList) ListFill( Variant Data, Variant List) ;  //_GUI 39,16
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 35,12
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 57,17
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input:A.0;  
 ListFill.0 = Junction.2;  //_GUI 36,18
 ListFill.1 = PopLsb.0;  
 Junction.0 = Input.0;  
 PushLsb.0 = ListFill.0;  
 PushLsb.1 = Junction.1;  //_GUI 55,22, 55,13
}

Object ( ZTerm DataList) ListFillLeaf( Variant Data, ZTerm List) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/zterm"
{
 // to support zero terminated lists
 //_ Object Prototypes
 Object ( Variant Data) Input;  //_GUI 74,37
 Object ( ZTerm List) Input:A;  //_GUI 74,46
 Object Output( ZTerm DataList) ;  //_GUI 149,46

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Variant DataList) ListFillLeaf( Variant Data, ZTList List) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/ztlist"
{
 // to support zero terminated lists
 //_ Object Prototypes
 Object ( Variant Data) Input;  //_GUI 11,17
 Object ( ZTList List) Input:A;  //_GUI 10,21
 Object Output( Variant DataList) ;  //_GUI 82,19
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 38,17
 Object ( Variant DataList) ListFillLeaf( Variant Data, Variant List) ;  //_GUI 45,16
 //_Attributes Documentation="var/zterm"
 Object ( Variant DataList) ListFillLeaf:A( Variant Data, Variant List) ;  //_GUI 45,25
 //_Attributes Documentation="var/zterm"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 70,17
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 24,19
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 Junction.0 = Input.0;  
 ListFillLeaf.0 = Junction.1;  
 ListFillLeaf.1 = PopLsb.0;  
 ListFillLeaf:A.0 = Junction.2;  //_GUI 39,27
 ListFillLeaf:A.1 = PopLsb.1;  //_GUI 34,30
 PushLsb.0 = ListFillLeaf.0;  
 PushLsb.1 = ListFillLeaf:A.0;  //_GUI 67,22, 67,28
 PopLsb.0 = Input:A.0;  
}

Object ( Variant DataList) ListFillLeaf( Variant Data, Variant List) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/var"
{
 // to support zero terminated lists
 //_ Object Prototypes
 Object ( Variant Data) Input;  //_GUI 11,17
 Object ( Variant List) Input:A;  //_GUI 11,20
 Object Output( Variant DataList) ;  //_GUI 36,18
 Object ( Variant DataList) ListFill( Variant Data, Variant List) ;  //_GUI 18,16

 // Behavior Topology
 Output.0 = ListFill.0;  
 ListFill.0 = Input.0;  
 ListFill.1 = Input:A.0;  
}

Object ( ZTList ZTList) LsbListToZTList( Variant LsbList) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var"
{
 //_ Object Prototypes
 Object ( Variant LsbList) Input;  //_GUI 20,32
 Object Output( ZTList ZTList) ;  //_GUI 57,32
 Object ( ZTList ZTList) NewZTList( Variant LSB) ;  //_GUI 37,30
 //_Attributes Documentation="single element"

 // Behavior Topology
 Output.0 = NewZTList.0;  
 NewZTList.0 = Input.0;  
}

Object ( ZTList ZTList) LsbListToZTList( List LsbList) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="list"
{
 //_ Object Prototypes
 Object ( List LsbList) Input;  //_GUI 20,32
 Object Output( ZTList ZTList) ;  //_GUI 74,32
 Object ( Variant Out1, Variant Out2) ListIn( List In) ;  //_GUI 27,30
 Object ( ZTList ZTList) LsbListToZTList( Variant LsbList) ;  //_GUI 40,29
 //_Attributes Documentation="var"
 Object ( ZTList Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 60,30
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 ListIn.0 = Input.0;  
 LsbListToZTList.0 = ListIn.1;  
 PushLsb.0 = LsbListToZTList.0;  
 PushLsb.1 = ListIn.0;  
}

Object ( ZTerm Out1) MostSig( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 42,38
 Object Output( ZTerm Out1) ;  //_GUI 56,38

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant Out1) MostSig( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 41,38
 Object Output( Variant Out1) ;  //_GUI 137,36
 Object ( Variant Out1) MostSig( Variant In1) ;  //_GUI 83,24
 //_Attributes Documentation="NULL"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 51,36
 //_Attributes Documentation="list"
 Object ( Variant Out1) INVERT( Variant In1) ;  //_GUI 65,38
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 64,37
 Object ( Bit Out1) EqualZero( Variant In1) ;  //_GUI 102,36
 Object Text;  //_GUI 62,49,If the LSB is one and the rest of the bits are zero, then the current bit is one.
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 119,34
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) CollectLSB( Variant In2, Variant In3) ;  //_GUI 81,36

 // Behavior Topology
 Output.0 = PushLsb.0;  
 MostSig.0 = Junction.0;  //_GUI 65,27
 PopLsb.0 = Input.0;  
 INVERT.0 = PopLsb.1;  
 Junction.0 = PopLsb.0;  
 EqualZero.0 = CollectLSB.0;  
 PushLsb.0 = MostSig.0;  //_GUI 119,27
 PushLsb.1 = EqualZero.0;  
 CollectLSB.0 = Junction.1;  
 CollectLSB.1 = INVERT.0;  
}

Object ( NULL Out1) NextLeastSig( Variant Bits, NULL StartBit) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/NULL"
{
 //_ Object Prototypes
 Object ( Variant Bits) Input;  //_GUI 25,27
 Object ( NULL StartBit) Input:A;  //_GUI 25,34
 Object Output( NULL Out1) ;  //_GUI 41,34

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Variant Out1) NextLeastSig( Variant Bits, Variant StartBit) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/var"
{
 //_ Object Prototypes
 Object ( Variant Bits) Input;  //_GUI 25,27
 Object ( Variant StartBit) Input:A;  //_GUI 25,44
 Object Output( Variant Out1) ;  //_GUI 117,29
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 33,42
 //_Attributes Documentation="list"
 Object ( Variant Out1) ROR( Variant In1) ;  //_GUI 43,25
 //_Attributes Documentation="var"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 36,27
 Object ( Variant Out1) AND( Variant In1, Variant In2) ;  //_GUI 66,34
 Object ( Variant Out1) OR( Variant In1, Variant In2) ;  //_GUI 99,27
 Object ( Variant Out1) ROL( Variant In1) ;  //_GUI 83,26
 //_Attributes Documentation="var"
 Object ( Variant Out1) LeastSig( Variant In1) ;  //_GUI 43,33
 //_Attributes Documentation="NULL"
 Object ( Variant Out1) NextLeastSig( Variant Bits, Variant StartBit) ;  //_GUI 65,26
 //_Attributes Documentation="var/NULL"

 // Behavior Topology
 Output.0 = OR.0;  
 PopLsb.0 = Input:A.0;  
 ROR.0 = Junction.1;  
 Junction.0 = Input.0;  
 AND.0 = LeastSig.0;  
 AND.1 = PopLsb.1;  //_GUI 66,47
 OR.0 = ROL.0;  
 OR.1 = AND.0;  //_GUI 96,32, 96,37
 ROL.0 = NextLeastSig.0;  
 LeastSig.0 = Junction.2;  //_GUI 37,36
 NextLeastSig.0 = ROR.0;  
 NextLeastSig.1 = PopLsb.0;  //_GUI 59,31, 59,44
}

Object ( Variant Out1) NextLeastSig( Variant Bits, ZTerm StartBit) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/zterm"
{
 //_ Object Prototypes
 Object ( Variant Bits) Input;  //_GUI 25,27
 Object ( ZTerm StartBit) Input:A;  //_GUI 25,34
 Object Output( Variant Out1) ;  //_GUI 50,35
 Object ( Variant Out1) Zero( Variant In1) ;  //_GUI 31,25
 //_Attributes Documentation="Bit"

 // Behavior Topology
 Output.0 = Zero.0;  //_GUI 45,36, 45,28
 Zero.0 = Input.0;  
}

Object ( NULL Out1) NextMostSig( Variant Bits, NULL StartBit) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/NULL"
{
 //_ Object Prototypes
 Object ( Variant Bits) Input;  //_GUI 25,27
 Object ( NULL StartBit) Input:A;  //_GUI 25,34
 Object Output( NULL Out1) ;  //_GUI 41,34

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Variant Out1) NextMostSig( Variant Bits, Variant StartBit) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/var"
{
 //_ Object Prototypes
 Object ( Variant Bits) Input;  //_GUI 25,27
 Object ( Variant StartBit) Input:A;  //_GUI 25,44
 Object Output( Variant Out1) ;  //_GUI 112,29
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 33,42
 //_Attributes Documentation="list"
 Object ( Variant Out1) ROR( Variant In1) ;  //_GUI 43,25
 //_Attributes Documentation="var"
 Object ( Variant Out1) MostSig( Variant In1) ;  //_GUI 43,33
 //_Attributes Documentation="NULL"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 36,27
 Object ( Variant Out1) NextMostSig( Variant Bits, Variant StartBit) ;  //_GUI 65,26
 //_Attributes Documentation="var/NULL"
 Object ( Variant Out1) AND( Variant In1, Variant In2) ;  //_GUI 66,34
 Object ( Variant Out1) OR( Variant In1, Variant In2) ;  //_GUI 99,27
 Object ( Variant Out1) ROL( Variant In1) ;  //_GUI 83,26
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = OR.0;  
 PopLsb.0 = Input:A.0;  
 ROR.0 = Junction.1;  
 MostSig.0 = Junction.2;  //_GUI 37,36
 Junction.0 = Input.0;  
 NextMostSig.0 = ROR.0;  
 NextMostSig.1 = PopLsb.0;  //_GUI 59,31, 59,44
 AND.0 = MostSig.0;  
 AND.1 = PopLsb.1;  //_GUI 66,47
 OR.0 = ROL.0;  
 OR.1 = AND.0;  //_GUI 96,32, 96,37
 ROL.0 = NextMostSig.0;  
}

Object ( Variant Out1) One( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 // Polymorphic Constant One - will prodoce a logically correct one for any data set given on the input.
 //
 // Date Last Modified:
 // 17 May 2002
 //
 // Author:
 // Samuel Brown
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 27,30
 Object Output( Variant Out1) ;  //_GUI 100,30
 Object ( Variant Out1) One( Variant In1) ;  //_GUI 64,38
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 88,28
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 34,28
 //_Attributes Documentation="list"
 Object ( Variant Out1) One:A( Variant In1) ;  //_GUI 66,27

 // Behavior Topology
 Output.0 = PushLsb.0;  
 One.0 = PopLsb.1;  //_GUI 54,41, 54,33
 PushLsb.0 = One:A.0;  
 PushLsb.1 = One.0;  //_GUI 83,33, 83,41
 PopLsb.0 = Input.0;  
 One:A.0 = PopLsb.0;  
}

Object ( ZTerm Out1) One( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 // Polymorphic Constant One - will prodoce a logically correct one for any data set given on the input.
 //
 // Date Last Modified:
 // 17 May 2002
 //
 // Author:
 // Samuel Brown
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 27,30
 Object Output( ZTerm Out1) ;  //_GUI 100,30

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant Out1) OR( ZTList In1, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 41,23
 Object ( ZTList In2) Input:A;  //_GUI 41,36
 Object Output( Variant Out1) ;  //_GUI 100,29
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 47,34
 //_Attributes Documentation="list"
 Object ( Variant Out1) OR( Variant In1, Variant In2) ;  //_GUI 67,21
 Object ( Variant Out1) OR:A( Variant In1, Variant In2) ;  //_GUI 67,34
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 47,21
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 87,27
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input:A.0;  
 OR.0 = PopLsb:A.0;  
 OR.1 = PopLsb.0;  //_GUI 62,26, 62,36
 OR:A.0 = PopLsb:A.1;  //_GUI 65,36, 65,26
 OR:A.1 = PopLsb.1;  
 PopLsb:A.0 = Input.0;  
 PushLsb.0 = OR.0;  //_GUI 82,29, 82,24
 PushLsb.1 = OR:A.0;  //_GUI 82,32, 82,37
}

Object ( ZTerm Out1) OR( ZTerm In1, ZTerm In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 41,23
 Object ( ZTerm In2) Input:A;  //_GUI 41,36
 Object Output( ZTerm Out1) ;  //_GUI 98,29

 // Behavior Topology
 Output.0 = Input.0;  //_GUI 72,30, 72,24
}

Object ( ZTerm Out1) OR( Variant In1, ZTerm In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="var/zterm"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 41,23
 Object ( ZTerm In2) Input:A;  //_GUI 41,36
 Object Output( ZTerm Out1) ;  //_GUI 98,29

 // Behavior Topology
 Output.0 = Input:A.0;  //_GUI 72,30, 72,37
}

Object ( ZTerm Out1) OR( ZTerm In1, Variant In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/var"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 41,23
 Object ( Variant In2) Input:A;  //_GUI 41,36
 Object Output( ZTerm Out1) ;  //_GUI 98,29

 // Behavior Topology
 Output.0 = Input.0;  //_GUI 72,30, 72,24
}

Object ( Variant Out1) OR( ZTList In1, Variant In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/var"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 41,23
 Object ( Variant In2) Input:A;  //_GUI 41,38
 Object Output( Variant Out1) ;  //_GUI 99,29
 Object ( Variant Out1) OR( Variant In1, Variant In2) ;  //_GUI 67,21
 Object ( Variant Out1) OR:A( Variant In1, Variant In2) ;  //_GUI 67,34
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 62,38
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 47,21
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 86,27
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 OR.0 = PopLsb.0;  
 OR.1 = Junction.0;  //_GUI 63,26
 OR:A.0 = PopLsb.1;  //_GUI 65,36, 65,32, 61,32, 61,26
 OR:A.1 = Junction.1;  
 Junction.0 = Input:A.0;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = OR.0;  //_GUI 82,29, 82,24
 PushLsb.1 = OR:A.0;  //_GUI 82,32, 82,37
}

Object ( Variant Out1) OR( Variant In1, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="var/ztlist"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 41,22
 Object ( ZTList In2) Input:A;  //_GUI 41,36
 Object Output( Variant Out1) ;  //_GUI 100,24
 Object ( Variant Out1) OR( Variant In1, Variant In2) ;  //_GUI 67,21
 Object ( Variant Out1) OR:A( Variant In1, Variant In2) ;  //_GUI 67,34
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 63,22
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 87,22
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 47,34
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 OR.0 = Junction.1;  
 OR.1 = PopLsb.0;  //_GUI 62,26, 62,36
 OR:A.0 = Junction.2;  //_GUI 64,36
 OR:A.1 = PopLsb.1;  
 Junction.0 = Input.0;  
 PushLsb.0 = OR.0;  
 PushLsb.1 = OR:A.0;  //_GUI 83,27, 83,37
 PopLsb.0 = Input:A.0;  
}

Object ( Variant Out1) OR( ZTerm In1, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/ztlist"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 41,23
 Object ( ZTList In2) Input:A;  //_GUI 41,36
 Object Output( Variant Out1) ;  //_GUI 97,30
 Object Output:A( Bit Trap) ;  //_GUI 79,51
 //_Attributes Trap="Mismatched ZTList sizes in OR. Inputs ZTerm and ZTList"
 Object ( Bit In) Input:B;  //_GUI 74,51
 //_Attributes Constant="*1"

 // Behavior Topology
 Output:A.0 = Input:B.0;  
}

Object ( Variant Out1) OR( ZTList In1, ZTerm In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/zterm"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 41,23
 Object ( ZTerm In2) Input:A;  //_GUI 41,36
 Object Output( Variant Out1) ;  //_GUI 96,29
 Object Output:A( Bit Trap) ;  //_GUI 57,45
 //_Attributes Trap="Mismatched ZTList sizes in OR.  Inputs ZTList and ZTerm"
 Object ( Bit In) Input:B;  //_GUI 52,45
 //_Attributes Constant="*1"

 // Behavior Topology
 Output:A.0 = Input:B.0;  
}

Object ( Variant Out1) OR-outer( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 19,20
 Object Output( Variant Out1) ;  //_GUI 65,20
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 25,18
 //_Attributes Documentation="list"
 Object ( Variant Out1) OR( Variant In1, Variant In2) ;  //_GUI 53,18
 Object ( Variant Out1) OR-outer( Variant In1) ;  //_GUI 39,17
 //_Attributes Documentation="ztlist"

 // Behavior Topology
 Output.0 = OR.0;  
 PopLsb.0 = Input.0;  
 OR.0 = OR-outer.0;  
 OR.1 = PopLsb.1;  
 OR-outer.0 = PopLsb.0;  
}

Object ( NULL Out1) OR-outer( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 19,22
 Object Output( NULL Out1) ;  //_GUI 43,22
 Object ( NULL Out1) NULL;  //_GUI 28,30
 Object Text;  //_GUI 13,44,Basically we are transforming from the ztlist domain into the var domain.  Usually the output of this object goes into an OR gate which has overloads for NULL.The ZeroTerminator would have worked fine with out this overload  if the variant version of OR didn't call Symitrize or if Symatrize worked properly on contextual datasets or if SameDatasets worked on contextual datasets.

 // Behavior Topology
 Output.0 = NULL.0;  //_GUI 41,23, 41,33
}

Object ( Variant Out1, Variant LSB) PopLsb( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 15,19
 Object Output( Variant Out1) ;  //_GUI 35,18
 Object Output:A( Variant LSB) ;  //_GUI 35,21
 Object ( Variant Out1, Variant Out2) ZTListIn( ZTList In) ;  //_GUI 22,17
 Object Text;  //_GUI 15,27,A ZTList (Zero Terminated List) by convention is more specifically an LSB ordered zero terminated list.  By zero terminating we allow for the deepest element (such as the MSB element of an LSB ordered list) to be another list, otherwise the transition is undetectable.  By fixing the order we eliminate ambiguities inherant in arbitrarily ordered lists when you have lists of lists.  LSB ordering was chosen over MSB ordering because of personal preference of the designer.  One reason for the preference is that I feel it more closely maps to the data representation.  For instance when you remove a bit from an LSB orderd series of n bits, you get the LSB (Least Significant Bit) first.  The designer's prefered bit numbering convention is to have the LSB numbered 0 (or 1 in a one-based convention) and the MSB numbered n-1 (or n in a one-based convention).  Thus with LSB ordered series of n bits when you say "Get bit x," you recurse x times and there is your bit.  The same holds true for arrays.  Generally the least significant element is at index 0 (or 1) and you itterate by incrementing your index.  This maps directly to LSB ordered recursion.The fact that a ZTList is implimented using LSB ordering is an implimintation issue and should never be relied upon.  So never use the ZTListIn and ZTListOut primatives directly.  Always use the PopLsb, PopMsb, PushLsb and PushMsb functions instead, which are overloaded for the ZTList datatype.  Because the ZTList is implemented with LSB ordering, the LSB versions of Push and Pop compile more efficiently than the MSB versions.  This is fine with me because I almost always perform LSB ordered recursion, because I think it more closely resembles the data model than MSB ordered recursion.  Note that LSB and MSB ordered recursion are identical in runtime efficiency.
 Object Text;  //_GUI 51,16,Because a ZTList is implemented using LSB ordering, the data element is always on the bottom and the top is always either a ZTLIst or a ZTerm

 // Behavior Topology
 Output.0 = ZTListIn.1;  
 Output:A.0 = ZTListIn.0;  
 ZTListIn.0 = Input.0;  
}

Object ( NULL Out1, NULL LSB) PopLsb( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 14,21
 Object Output( NULL Out1) ;  //_GUI 44,9
 Object Output:A( NULL LSB) ;  //_GUI 45,21
 Object Text;  //_GUI 15,46,Generally you should arrange your ZTList recursion such that this function is not called with the ZTerm dataset.  (It can be ambiguous with the case of null data in a list.)  But if you do, here are some NULLs that will get ripped out eventually.
 Object ( NULL Out1) NULL;  //_GUI 23,29
 Object ( NULL Out1, NULL Out2, NULL Out3) Junction
    ( NULL In3) ;  //_GUI 38,21

 // Behavior Topology
 Output.0 = Junction.1;  //_GUI 39,10
 Output:A.0 = Junction.2;  
 Junction.0 = NULL.0;  //_GUI 39,32
}

Object ( NULL MSB, NULL Out1) PopMsb( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 11,17
 Object Output( NULL MSB) ;  //_GUI 39,10
 Object Output:A( NULL Out1) ;  //_GUI 39,17
 Object Text;  //_GUI 10,27,Generally you should arrange your ZTList recursion such that this function is not called with the ZTerm dataset.  (It can be ambiguous with the case of null data in a list.)  But if you do, here are some NULLs that will get ripped out eventually.
 Object ( NULL Out1) NULL;  //_GUI 22,15
 Object ( NULL Out1, NULL Out2, NULL Out3) Junction
    ( NULL In0) ;  //_GUI 34,17

 // Behavior Topology
 Output.0 = Junction.0;  //_GUI 35,11
 Output:A.0 = Junction.1;  
 Junction.0 = NULL.0;  
}

Object ( Variant MSB, Variant Out2) PopMsb( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 15,19
 Object Output( Variant MSB) ;  //_GUI 48,18
 Object Output:A( Variant Out2) ;  //_GUI 48,21
 Object ( Variant MSB, Variant Out1) $PopMsb( Variant In1
    , Variant In11) ;  //_GUI 35,17
 //_Attributes Documentation="var/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 21,17
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = $PopMsb.0;  
 Output:A.0 = $PopMsb.1;  
 $PopMsb.0 = PopLsb.0;  
 $PopMsb.1 = PopLsb.1;  
 PopLsb.0 = Input.0;  
}

Object ( Variant Out1) PushLsb( ZTList In1, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztl/var"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 19,14
 Object ( Variant LSB) Input:A;  //_GUI 19,17
 Object Output( Variant Out1) ;  //_GUI 45,15
 Object ( ZTList Out) ZTListOut( Variant In1, Variant In2) ;  //_GUI 25,13

 // Behavior Topology
 Output.0 = ZTListOut.0;  
 ZTListOut.0 = Input:A.0;  
 ZTListOut.1 = Input.0;  
}

Object ( Variant Out1) PushLsb( ZTerm In1, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/var"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 19,14
 Object ( Variant LSB) Input:A;  //_GUI 19,17
 Object Output( Variant Out1) ;  //_GUI 42,15
 Object ( ZTList Out) ZTListOut( Variant In1, Variant In2) ;  //_GUI 25,13

 // Behavior Topology
 Output.0 = ZTListOut.0;  
 ZTListOut.0 = Input:A.0;  
 ZTListOut.1 = Input.0;  
}

Object ( Variant Out1) PushLsb( ZTerm In1, NULL LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/NULL"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 19,14
 Object ( NULL LSB) Input:A;  //_GUI 19,17
 Object Output( Variant Out1) ;  //_GUI 42,15
 Object ( ZTList Out) ZTListOut( Variant In1, Variant In2) ;  //_GUI 25,13

 // Behavior Topology
 Output.0 = ZTListOut.0;  
 ZTListOut.0 = Input:A.0;  
 ZTListOut.1 = Input.0;  
}

Object ( Variant Out1) PushLsb( ZTList In1, NULL LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztl/NULL"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 19,14
 Object ( NULL LSB) Input:A;  //_GUI 19,17
 Object Output( Variant Out1) ;  //_GUI 45,15
 Object ( ZTList Out) ZTListOut( Variant In1, Variant In2) ;  //_GUI 25,13

 // Behavior Topology
 Output.0 = ZTListOut.0;  
 ZTListOut.0 = Input:A.0;  
 ZTListOut.1 = Input.0;  
}

Object ( Variant Out1) PushMsb( Variant MSB, ZTerm In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="var/zterm"
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 25,26
 Object ( ZTerm In2) Input:A;  //_GUI 25,31
 Object Output( Variant Out1) ;  //_GUI 82,24
 Object Text;  //_GUI 25,42,We are now at the most significant end of the list, put the new element on.
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 55,22
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = Input:A.0;  //_GUI 42,24, 42,32
 PushLsb.1 = Input.0;  
}

Object ( Variant Out1) PushMsb( Variant MSB, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="var/ztlist"
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 25,27
 Object ( ZTList In2) Input:A;  //_GUI 25,31
 Object Output( Variant Out1) ;  //_GUI 71,31
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 31,29
 //_Attributes Documentation="list"
 Object Text;  //_GUI 25,46,Pop off LSBs until we get to the MSB.(We do this because zero terminated lists are implemented in LSB order.)
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 58,29
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 43,26
 //_Attributes Documentation="var/zterm"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input:A.0;  
 PushLsb.0 = PushMsb.0;  //_GUI 56,31, 56,29
 PushLsb.1 = PopLsb.1;  
 PushMsb.0 = Input.0;  
 PushMsb.1 = PopLsb.0;  
}

Object ( Variant Out1) RemoveContext( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist"
{
 // Recurses until the first non-overloaded element reached then if it is a contextual dataset, it removes the context then passes it back.
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 28,32
 Object Output( Variant Out1) ;  //_GUI 77,32
 Object ( Variant Out1) RemoveContext( Variant In1) ;  //_GUI 46,29
 //_Attributes Documentation="var"
 Object ( Variant Out1) RemoveContext:A( Variant In1) ;  //_GUI 46,32
 //_Attributes Documentation="var"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 65,30
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 34,30
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 RemoveContext.0 = PopLsb.0;  
 RemoveContext:A.0 = PopLsb.1;  
 PushLsb.0 = RemoveContext.0;  
 PushLsb.1 = RemoveContext:A.0;  
 PopLsb.0 = Input.0;  
}

Object ( ZTerm Out1) RemoveContext( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm"
{
 // Recurses until the first non-overloaded element reached then if it is a contextual dataset, it removes the context then passes it back.
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 28,32
 Object Output( ZTerm Out1) ;  //_GUI 76,32

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( ZTerm Out1) ReverseBits( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Icon=Swap,Documentation="zterm"
{
 // Date Last Modified:
 // 10 Nov 2002
 //
 // Author:
 // Samuel Brown
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 27,20
 Object Output( ZTerm Out1) ;  //_GUI 40,20

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant Out1) ReverseBits( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Icon=Swap,Documentation="ztlist"
{
 // Date Last Modified:
 // 10 Nov 2002
 //
 // Author:
 // Samuel Brown
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 27,20
 Object Output( Variant Out1) ;  //_GUI 88,20
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 33,18
 //_Attributes Documentation="list"
 Object ( Variant Out1) ReverseBits( Variant In1) ;  //_GUI 51,28
 //_Attributes Documentation="Leaf"
 Object ( Variant Out1) ReverseBits:A( Variant In1) ;  //_GUI 51,11
 //_Attributes Documentation="Leaf"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 68,18
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input.0;  
 ReverseBits.0 = PopLsb.1;  //_GUI 51,23
 ReverseBits:A.0 = PopLsb.0;  //_GUI 43,14
 PushLsb.0 = ReverseBits:A.0;  //_GUI 64,20
 PushLsb.1 = ReverseBits.0;  //_GUI 64,23
}

Object ( Variant Out1) ROL( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 39,34
 Object Output( Variant Out1) ;  //_GUI 91,35
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 45,34
 Object Text;  //_GUI 41,21,Any behavior other than this must be overloaded.
 Object Text;  //_GUI 39,45,Rotate an element off the left (top or MSB) and put it on the right (bottom or LSB).
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 49,32
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 66,35
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) Context( Variant Type, Variant Data) ;  //_GUI 79,33

 // Behavior Topology
 Output.0 = Context.0;  
 Junction.0 = Input.0;  
 PopMsb.0 = Junction.1;  
 PushLsb.0 = PopMsb.1;  
 PushLsb.1 = PopMsb.0;  //_GUI 63,40, 63,34
 Context.0 = Junction.0;  //_GUI 79,29, 46,29
 Context.1 = PushLsb.0;  
}

Object ( NULL Out1) ROL( NULL In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="NULL"
{
 //_ Object Prototypes
 Object ( NULL In1) Input;  //_GUI 39,34
 Object Output( NULL Out1) ;  //_GUI 49,34

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( ZTerm Out1) ROL( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 39,34
 Object Output( ZTerm Out1) ;  //_GUI 49,34

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant Out1) ROL( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 39,34
 Object Output( Variant Out1) ;  //_GUI 79,37
 Object Text;  //_GUI 41,19,Any behavior other than this must be overloaded.
 Object Text;  //_GUI 39,45,Rotate an element off the left (top or MSB) and put it on the right (bottom or LSB).
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 49,32
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 66,35
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopMsb.0 = Input.0;  
 PushLsb.0 = PopMsb.1;  
 PushLsb.1 = PopMsb.0;  //_GUI 63,40, 63,34
}

Object ( Variant Out1) ROR( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 39,34
 Object Output( Variant Out1) ;  //_GUI 91,29
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 49,32
 //_Attributes Documentation="list"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 45,34
 Object Text;  //_GUI 41,19,Any behavior other than this must be overloaded.
 Object Text;  //_GUI 39,45,Rotate an element off the right (bottom or LSB) and put it on the left (top or MSB).
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 66,29
 //_Attributes Documentation="var/zterm"
 Object ( Variant Out1) Context( Variant Type, Variant Data) ;  //_GUI 79,27

 // Behavior Topology
 Output.0 = Context.0;  
 PopLsb.0 = Junction.1;  
 Junction.0 = Input.0;  
 PushMsb.0 = PopLsb.1;  //_GUI 62,31, 62,37
 PushMsb.1 = PopLsb.0;  
 Context.0 = Junction.0;  //_GUI 79,25, 46,25
 Context.1 = PushMsb.0;  
}

Object ( NULL Out1) ROR( NULL In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="NULL"
{
 //_ Object Prototypes
 Object ( NULL In1) Input;  //_GUI 39,34
 Object Output( NULL Out1) ;  //_GUI 49,34

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant Out1) ROR( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 39,34
 Object Output( Variant Out1) ;  //_GUI 79,31
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 49,32
 //_Attributes Documentation="list"
 Object Text;  //_GUI 41,19,Any behavior other than this must be overloaded.
 Object Text;  //_GUI 39,45,Rotate an element off the right (bottom or LSB) and put it on the left (top or MSB).
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 66,29
 //_Attributes Documentation="var/zterm"

 // Behavior Topology
 Output.0 = PushMsb.0;  
 PopLsb.0 = Input.0;  
 PushMsb.0 = PopLsb.1;  //_GUI 62,31, 62,37
 PushMsb.1 = PopLsb.0;  
}

Object ( ZTerm Out1) ROR( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 39,34
 Object Output( ZTerm Out1) ;  //_GUI 49,34

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Bit Out1) SameListDataSets( List In1, List In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="list/list"
{
 //_ Object Prototypes
 Object ( List In1) Input;  //_GUI 22,19
 Object ( List In2) Input:A;  //_GUI 22,28
 Object Output( Bit Out1) ;  //_GUI 81,23
 Object ( Variant Out1, Variant Out2) ListIn( List In) ;  //_GUI 28,17
 Object ( Variant Out1, Variant Out2) ListIn:A( List In) ;  //_GUI 28,26
 Object ( Bit Out) AND( Bit In1, Bit In2) ;  //_GUI 67,21
 Object ( Bit Out1) SameListDataSets( Variant In1, Variant In2) ;  //_GUI 46,17
 //_Attributes Documentation="list/list"
 Object ( Bit Out1) SameListDataSets:A( Variant In1, Variant In2) ;  //_GUI 46,26
 //_Attributes Documentation="list/list"

 // Behavior Topology
 Output.0 = AND.0;  
 ListIn.0 = Input.0;  
 ListIn:A.0 = Input:A.0;  
 AND.0 = SameListDataSets.0;  //_GUI 66,23, 66,20
 AND.1 = SameListDataSets:A.0;  //_GUI 66,26, 66,29
 SameListDataSets.0 = ListIn.1;  
 SameListDataSets.1 = ListIn:A.1;  //_GUI 43,22, 43,28
 SameListDataSets:A.0 = ListIn.0;  //_GUI 46,25, 41,25, 41,22
 SameListDataSets:A.1 = ListIn:A.0;  
}

Object ( Bit Out1) SameListDataSets( Variant In1, Variant In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="var/var"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 41,24
 Object ( Variant In2) Input:A;  //_GUI 41,27
 Object Output( Bit Out1) ;  //_GUI 64,25
 Object ( Bit Out1) SameDataSets( Variant In1, Variant In2) ;  //_GUI 47,23

 // Behavior Topology
 Output.0 = SameDataSets.0;  
 SameDataSets.0 = Input.0;  
 SameDataSets.1 = Input:A.0;  
}

Object ( Bit Out1) SameListDataSets( ZTList In1, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="ztlist/ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 22,19
 Object ( ZTList In2) Input:A;  //_GUI 22,28
 Object Output( Bit Out1) ;  //_GUI 80,23
 Object ( Bit Out) AND( Bit In1, Bit In2) ;  //_GUI 66,21
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 28,17
 //_Attributes Documentation="list"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 28,26
 //_Attributes Documentation="list"
 Object ( Bit Out1) SameListDataSets( Variant In1, Variant In2) ;  //_GUI 46,17
 //_Attributes Documentation="list/list"
 Object ( Bit Out1) SameListDataSets:A( Variant In1, Variant In2) ;  //_GUI 46,26
 //_Attributes Documentation="list/list"

 // Behavior Topology
 Output.0 = AND.0;  
 AND.0 = SameListDataSets.0;  //_GUI 65,23, 65,20
 AND.1 = SameListDataSets:A.0;  //_GUI 65,26, 65,29
 PopLsb.0 = Input.0;  
 PopLsb:A.0 = Input:A.0;  
 SameListDataSets.0 = PopLsb.0;  
 SameListDataSets.1 = PopLsb:A.0;  //_GUI 43,22, 43,28
 SameListDataSets:A.0 = PopLsb.1;  //_GUI 46,25, 38,25
 SameListDataSets:A.1 = PopLsb:A.1;  
}

Object ( Bit Out1) SameListDataSets( NULL In1, Variant In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="NULL/var"
{
 //_ Object Prototypes
 Object ( NULL In1) Input;  //_GUI 22,19
 Object ( Variant In2) Input:A;  //_GUI 22,28
 Object Output( Bit Out1) ;  //_GUI 64,25
 Object ( Bit In) Input:B;  //_GUI 58,25
 //_Attributes Constant="*0"

 // Behavior Topology
 Output.0 = Input:B.0;  
}

Object ( Bit Out1) SameListDataSets( Variant In1, NULL In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="var/NULL"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 22,19
 Object ( NULL In2) Input:A;  //_GUI 22,28
 Object Output( Bit Out1) ;  //_GUI 64,25
 Object ( Bit In) Input:B;  //_GUI 58,25
 //_Attributes Constant="*0"

 // Behavior Topology
 Output.0 = Input:B.0;  
}

Object ( Bit Out1) SameListDataSets( NULL In1, NULL In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="NULL/NULL"
{
 //_ Object Prototypes
 Object ( NULL In1) Input;  //_GUI 22,19
 Object ( NULL In2) Input:A;  //_GUI 22,28
 Object Output( Bit Out1) ;  //_GUI 64,25
 Object ( Bit In) Input:B;  //_GUI 58,25
 //_Attributes Constant="*1"

 // Behavior Topology
 Output.0 = Input:B.0;  
}

Object ( Bit Out1) SameListStruct( ZTList In1, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="ztlist/ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 22,19
 Object ( ZTList In2) Input:A;  //_GUI 22,28
 Object Output( Bit Out1) ;  //_GUI 77,23
 Object ( Bit Out1) SameListStruct( Variant In1, Variant In2) ;  //_GUI 46,17
 Object ( Bit Out1) SameListStruct:A( Variant In1, Variant In2) ;  //_GUI 46,26
 Object ( Bit Out) AND( Bit In1, Bit In2) ;  //_GUI 63,21
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 28,17
 //_Attributes Documentation="list"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 28,26
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = AND.0;  
 SameListStruct.0 = PopLsb.0;  
 SameListStruct.1 = PopLsb:A.0;  //_GUI 43,22, 43,28
 SameListStruct:A.0 = PopLsb.1;  //_GUI 46,25, 38,25
 SameListStruct:A.1 = PopLsb:A.1;  
 AND.0 = SameListStruct.0;  //_GUI 62,23, 62,20
 AND.1 = SameListStruct:A.0;  //_GUI 62,26, 62,29
 PopLsb.0 = Input.0;  
 PopLsb:A.0 = Input:A.0;  
}

Object ( Bit Out1) SameListStruct( ZTList In1, Variant In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="ztlist/var"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 22,19
 Object ( Variant In2) Input:A;  //_GUI 22,28
 Object Output( Bit Out1) ;  //_GUI 70,25
 Object ( Bit In) Input:B;  //_GUI 64,25
 //_Attributes Constant="*0"
 Object Text;  //_GUI 32,18,List nodes are different, send out False

 // Behavior Topology
 Output.0 = Input:B.0;  
}

Object ( Bit Out1) SameListStruct( Variant In2, ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="var/ztlist"
{
 //_ Object Prototypes
 Object ( Variant In2) Input;  //_GUI 22,19
 Object ( ZTList In1) Input:A;  //_GUI 22,28
 Object Output( Bit Out1) ;  //_GUI 64,25
 Object Text;  //_GUI 32,18,List nodes are different, send out False
 Object ( Bit In) Input:B;  //_GUI 58,25
 //_Attributes Constant="*0"

 // Behavior Topology
 Output.0 = Input:B.0;  
}

Object ( Bit Out1) SameListStruct( ZTList In1, List In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="ztlist/list"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 22,19
 Object ( List In2) Input:A;  //_GUI 22,28
 Object Output( Bit Out1) ;  //_GUI 64,25
 Object ( Bit In) Input:B;  //_GUI 58,25
 //_Attributes Constant="*0"
 Object Text;  //_GUI 32,18,List nodes are different, send out False

 // Behavior Topology
 Output.0 = Input:B.0;  
}

Object ( Bit Out1) SameListStruct( List In2, ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="list/ztlist"
{
 //_ Object Prototypes
 Object ( List In2) Input;  //_GUI 22,19
 Object ( ZTList In1) Input:A;  //_GUI 22,28
 Object Output( Bit Out1) ;  //_GUI 64,25
 Object Text;  //_GUI 32,18,List nodes are different, send out False
 Object ( Bit In) Input:B;  //_GUI 58,25
 //_Attributes Constant="*0"

 // Behavior Topology
 Output.0 = Input:B.0;  
}

Object ( Variant Q) StickyReg( Variant D, Bit ClkG
    , Variant CLRBit, Bit CLRAll) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var"
{
 // The StickyReg starts out in a 0 state.  When the D input goes high, the StickyReg will enter a 1 state (on the positive clock edge).  It will remain in this state until a CLR (asynchronous) is received.
 //
 // Inputs:
 // D (Bit) - values of 1 will 'stick'
 // CLR - asynchronous clear
 //
 // Outputs:
 // Q - current state
 //
 // Date Last Modified:
 // 26 Jan 2003
 //
 // Author:
 // Samuel Brown
 //_ Object Prototypes
 Object ( Variant D) Input;  //_GUI 36,46
 Object ( Bit ClkG) Input:A;  //_GUI 36,58
 //_Attributes Resource=*Global
 Object ( Variant CLRBit) Input:B;  //_GUI 36,67
 Object ( Bit CLRAll) Input:C;  //_GUI 36,72
 Object Output( Variant Q) ;  //_GUI 123,45
 Object ( Variant Out1, Variant Out2) VariantIn( Variant In) ;  //_GUI 48,65
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction
    ( Bit In0) ;  //_GUI 70,58
 Object ( Variant Out1, Variant Out2) VariantIn:A( Variant In) ;  //_GUI 48,44
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:A
    ( Bit In0) ;  //_GUI 73,72
 Object ( Variant Out) VariantOut( Variant In1, Variant In2) ;  //_GUI 97,45
 Object ( Variant Q) StickyReg( Variant D, Bit ClkG
    , Variant CLRBit, Bit CLRAll) ;  //_GUI 77,44
 Object ( Variant Q) StickyReg:A( Variant D, Bit ClkG
    , Variant CLRBit, Bit CLRAll) ;  //_GUI 77,62
 Object ( Variant Out) $Cast( Variant Data, Variant Type) ;  //_GUI 111,43
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:B
    ( Variant In0) ;  //_GUI 43,46

 // Behavior Topology
 Output.0 = $Cast.0;  
 VariantIn.0 = Input:B.0;  
 Junction.0 = Input:A.0;  
 VariantIn:A.0 = Junction:B.1;  
 Junction:A.0 = Input:C.0;  
 VariantOut.0 = StickyReg:A.0;  //_GUI 93,50, 93,65
 VariantOut.1 = StickyReg.0;  
 StickyReg.0 = VariantIn:A.1;  
 StickyReg.1 = Junction.0;  //_GUI 71,49
 StickyReg.2 = VariantIn.1;  //_GUI 68,52, 68,67
 StickyReg.3 = Junction:A.0;  //_GUI 74,55
 StickyReg:A.0 = VariantIn:A.0;  //_GUI 59,64
 StickyReg:A.1 = Junction.2;  //_GUI 71,67
 StickyReg:A.2 = VariantIn.0;  
 StickyReg:A.3 = Junction:A.1;  
 $Cast.0 = VariantOut.0;  
 $Cast.1 = Junction:B.0;  //_GUI 111,42, 44,42
 Junction:B.0 = Input.0;  
}

Object ( Bit Q) StickyReg( Bit D, Bit ClkG
    , Bit CLRBit, Bit CLRAll) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="bit"
{
 // The StickyReg starts out in a 0 state.  When the D input goes high, the StickyReg will enter a 1 state (on the positive clock edge).  It will remain in this state until a CLR (asynchronous) is received.
 //
 // Inputs:
 // D (Bit) - values of 1 will 'stick'
 // CLR - asynchronous clear
 //
 // Outputs:
 // Q - current state
 //
 // Date Last Modified:
 // 26 Jan 2003
 //
 // Author:
 // Samuel Brown
 //_ Object Prototypes
 Object ( Bit D) Input;  //_GUI 36,46
 Object ( Bit ClkG) Input:A;  //_GUI 36,58
 //_Attributes Resource=*Global
 Object ( Bit CLRBit) Input:B;  //_GUI 36,67
 Object ( Bit CLRAll) Input:C;  //_GUI 36,72
 Object Output( Bit Q) ;  //_GUI 105,47
 Object ( Bit Q) StickyReg( Bit D, Bit ClkG
    , Bit CLR) ;  //_GUI 78,45
 Object ( Bit Out) OR( Bit In1, Bit In2) ;  //_GUI 42,67

 // Behavior Topology
 Output.0 = StickyReg.0;  
 StickyReg.0 = Input.0;  
 StickyReg.1 = Input:A.0;  //_GUI 66,50, 66,59
 StickyReg.2 = OR.0;  //_GUI 78,70
 OR.0 = Input:B.0;  //_GUI 41,69, 41,68
 OR.1 = Input:C.0;  //_GUI 41,72, 41,73
}

Object ( List Q) StickyReg( List D, Bit ClkG
    , List CLRBit, Bit CLRAll) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="list"
{
 // The StickyReg starts out in a 0 state.  When the D input goes high, the StickyReg will enter a 1 state (on the positive clock edge).  It will remain in this state until a CLR (asynchronous) is received.
 //
 // Inputs:
 // D (Bit) - values of 1 will 'stick'
 // CLR - asynchronous clear
 //
 // Outputs:
 // Q - current state
 //
 // Date Last Modified:
 // 26 Jan 2003
 //
 // Author:
 // Samuel Brown
 //_ Object Prototypes
 Object ( List D) Input;  //_GUI 36,46
 Object ( Bit ClkG) Input:A;  //_GUI 36,58
 //_Attributes Resource=*Global
 Object ( List CLRBit) Input:B;  //_GUI 36,67
 Object ( Bit CLRAll) Input:C;  //_GUI 36,72
 Object Output( List Q) ;  //_GUI 111,47
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction
    ( Bit In0) ;  //_GUI 70,58
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:A
    ( Bit In0) ;  //_GUI 73,72
 Object ( Variant Q) StickyReg( Variant D, Bit ClkG
    , Variant CLRBit, Bit CLRAll) ;  //_GUI 77,44
 Object ( Variant Q) StickyReg:A( Variant D, Bit ClkG
    , Variant CLRBit, Bit CLRAll) ;  //_GUI 77,62
 Object ( Variant Out1, Variant Out2) ListIn( List In) ;  //_GUI 48,44
 Object ( List Out) ListOut( Variant In1, Variant In2) ;  //_GUI 97,45
 Object ( Variant Out1, Variant Out2) ListIn:A( List In) ;  //_GUI 48,65

 // Behavior Topology
 Output.0 = ListOut.0;  
 Junction.0 = Input:A.0;  
 Junction:A.0 = Input:C.0;  
 StickyReg.0 = ListIn.1;  
 StickyReg.1 = Junction.0;  //_GUI 71,49
 StickyReg.2 = ListIn:A.1;  //_GUI 68,52, 68,67
 StickyReg.3 = Junction:A.0;  //_GUI 74,55
 StickyReg:A.0 = ListIn.0;  //_GUI 59,64
 StickyReg:A.1 = Junction.2;  //_GUI 71,67
 StickyReg:A.2 = ListIn:A.0;  
 StickyReg:A.3 = Junction:A.1;  
 ListIn.0 = Input.0;  
 ListOut.0 = StickyReg:A.0;  //_GUI 93,50, 93,65
 ListOut.1 = StickyReg.0;  
 ListIn:A.0 = Input:B.0;  
}

Object ( Variant Q) StickyReg( ZTList D, Bit ClkG
    , ZTList CLRBit, Bit CLRAll) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist/ztlist"
{
 // The StickyReg starts out in a 0 state.  When the D input goes high, the StickyReg will enter a 1 state (on the positive clock edge).  It will remain in this state until a CLR (asynchronous) is received.
 //
 // Inputs:
 // D (Bit) - values of 1 will 'stick'
 // CLR - asynchronous clear
 //
 // Outputs:
 // Q - current state
 //
 // Date Last Modified:
 // 26 Jan 2003
 //
 // Author:
 // Samuel Brown
 //_ Object Prototypes
 Object ( ZTList D) Input;  //_GUI 36,46
 Object ( Bit ClkG) Input:A;  //_GUI 36,58
 //_Attributes Resource=*Global
 Object ( ZTList CLRBit) Input:B;  //_GUI 36,67
 Object ( Bit CLRAll) Input:C;  //_GUI 36,72
 Object Output( Variant Q) ;  //_GUI 111,47
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction
    ( Bit In0) ;  //_GUI 70,58
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:A
    ( Bit In0) ;  //_GUI 73,72
 Object ( Variant Q) StickyReg( Variant D, Bit ClkG
    , Variant CLRBit, Bit CLRAll) ;  //_GUI 77,44
 Object ( Variant Q) StickyReg:A( Variant D, Bit ClkG
    , Variant CLRBit, Bit CLRAll) ;  //_GUI 77,62
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 48,44
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 99,45
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 48,65
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 Junction.0 = Input:A.0;  
 Junction:A.0 = Input:C.0;  
 StickyReg.0 = PopLsb.0;  
 StickyReg.1 = Junction.0;  //_GUI 71,49
 StickyReg.2 = PopLsb:A.0;  //_GUI 68,52, 68,67
 StickyReg.3 = Junction:A.0;  //_GUI 74,55
 StickyReg:A.0 = PopLsb.1;  //_GUI 58,64
 StickyReg:A.1 = Junction.2;  //_GUI 71,67
 StickyReg:A.2 = PopLsb:A.1;  
 StickyReg:A.3 = Junction:A.1;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = StickyReg.0;  
 PushLsb.1 = StickyReg:A.0;  //_GUI 93,50, 93,65
 PopLsb:A.0 = Input:B.0;  
}

Object ( ZTerm Q) StickyReg( ZTerm D, Bit ClkG
    , ZTerm CLRBit, Bit CLRAll) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm/zterm"
{
 // The StickyReg starts out in a 0 state.  When the D input goes high, the StickyReg will enter a 1 state (on the positive clock edge).  It will remain in this state until a CLR (asynchronous) is received.
 //
 // Inputs:
 // D (Bit) - values of 1 will 'stick'
 // CLR - asynchronous clear
 //
 // Outputs:
 // Q - current state
 //
 // Date Last Modified:
 // 26 Jan 2003
 //
 // Author:
 // Samuel Brown
 //_ Object Prototypes
 Object ( ZTerm D) Input;  //_GUI 36,47
 Object ( Bit ClkG) Input:A;  //_GUI 36,58
 //_Attributes Resource=*Global
 Object ( ZTerm CLRBit) Input:B;  //_GUI 36,67
 Object ( Bit CLRAll) Input:C;  //_GUI 36,72
 Object Output( ZTerm Q) ;  //_GUI 111,47

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( ZTList Out1, ZTList Out1) Symmetrize( ZTList In1
    , ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztl"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 11,7
 Object ( ZTList In2) Input:A;  //_GUI 11,20
 Object Output( ZTList Out1) ;  //_GUI 52,7
 Object Output:A( ZTList Out1) ;  //_GUI 52,20
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction
    ( ZTList In0) ;  //_GUI 20,20
 Object ( Bit Out) INVERT( Bit In1) ;  //_GUI 39,11
 Object Output:B( Bit Trap) ;  //_GUI 51,13
 //_Attributes Trap="Lists not same structure"
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction:A
    ( ZTList In0) ;  //_GUI 20,7
 Object ( Bit Out1) SameListStruct( Variant In1, Variant In2) ;  //_GUI 22,11
 //_Attributes Documentation="list/list"

 // Behavior Topology
 Output.0 = Junction:A.1;  
 Output:A.0 = Junction.1;  
 Junction.0 = Input:A.0;  
 INVERT.0 = SameListStruct.0;  
 Output:B.0 = INVERT.0;  
 Junction:A.0 = Input.0;  
 SameListStruct.0 = Junction:A.2;  //_GUI 21,13
 SameListStruct.1 = Junction.0;  //_GUI 21,16
}

Object ( Variant Out1) Zero( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 // Zero - Variant Select Case
 //
 // Date Last Modified:
 // 13 May 2002
 //
 // Author:
 // Samuel Brown
 // SBS Inc.
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 22,25
 Object Output( Variant Out1) ;  //_GUI 91,25
 Object ( Variant Out1) Zero( Variant In1) ;  //_GUI 51,32
 Object ( Variant Out1) Zero:A( Variant In1) ;  //_GUI 51,22
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 30,23
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 76,23
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 Zero.0 = PopLsb.1;  //_GUI 47,35, 47,28
 Zero:A.0 = PopLsb.0;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = Zero:A.0;  
 PushLsb.1 = Zero.0;  //_GUI 68,28, 68,35
}

Object ( ZTerm Out1) Zero( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 // Zero - Variant Select Case
 //
 // Date Last Modified:
 // 13 May 2002
 //
 // Author:
 // Samuel Brown
 // SBS Inc.
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 22,25
 Object Output( ZTerm Out1) ;  //_GUI 91,25

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant Data) ZeroNulls( ZTerm Data, Variant Type) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm Data) Input;  //_GUI 26,25
 Object ( Variant Type) Input:A;  //_GUI 26,31
 Object Output( Variant Data) ;  //_GUI 53,25
 Object ( Variant Out1) Zero( Variant In1) ;  //_GUI 41,23

 // Behavior Topology
 Output.0 = Zero.0;  
 Zero.0 = Input:A.0;  //_GUI 35,26, 35,32
}

Object ( ZTerm Out1) ZTList_Size( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="Leaf(Var)"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 25,38
 Object Output( ZTerm Out1) ;  //_GUI 51,38
 Object Text;  //_GUI 25,14,This is an element of a ZTList.This element is not another ZTList which means it is not multi-dimentional at this level.We return an empty list here to indicate that this element contains no dimentions for which sizes need to be reported.
 Object ( ZTerm ZTList) NewZTList;  //_GUI 37,36
 //_Attributes Documentation="empty"

 // Behavior Topology
 Output.0 = NewZTList.0;  
}

Object ( Variant Out1) ZTList_Size( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 25,38
 Object Output( Variant Out1) ;  //_GUI 59,38
 Object Text;  //_GUI 25,14,This is the end of a ZTList.At this point we create a single element list where the element is zero bits (NULL).Upon this element, in subsequent egress recursions, one bit is added for each element in this list (this dimention).
 Object ( Variant ZTList) NewZTList( Variant LSB) ;  //_GUI 45,36
 //_Attributes Documentation="single element"
 Object ( NULL Out1) NULL;  //_GUI 33,36

 // Behavior Topology
 Output.0 = NewZTList.0;  
 NewZTList.0 = NULL.0;  
}

Object ( Variant Out1) ZTList_Size( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 25,49
 Object Output( Variant Out1) ;  //_GUI 156,46
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 31,47
 //_Attributes Documentation="list"
 Object ( Variant Out1) ZTList_Size( Variant In1) ;  //_GUI 45,43
 //_Attributes Documentation="Leaf(Var)"
 Object ( Variant Out1) ZTList_Size:A( Variant In1) ;  //_GUI 45,65
 //_Attributes Documentation="Leaf(Var)"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 63,43
 //_Attributes Documentation="list"
 Object ( Bit bit) Input:A;  //_GUI 111,52
 //_Attributes Constant="*0"
 Object Text;  //_GUI 58,31,A list of the sizes of each dimention upto this point.
 Object Text;  //_GUI 74,50,This is the LSB element of the size list and is the size of our current dimention
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 144,44
 //_Attributes Documentation="ztl/var"
 Object Text;  //_GUI 111,57,Add a bit to the size representing our dimention.
 Object Text;  //_GUI 141,56,Append the size of our dimention onto the list of the inner dimention sizes.
 Object ( Bit Out1) IsZTerm( Variant In1) ;  //_GUI 105,27
 //_Attributes Documentation="zterm"
 Object ( Variant "#0", Variant "#1") $SelectOut( Variant In1
    , Bit S) ;  //_GUI 118,23
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In3) ;  //_GUI 100,29
 Object ( Bit Out) INVERT( Bit In1) ;  //_GUI 155,23
 Object Output:A( Bit Trap) ;  //_GUI 167,25
 //_Attributes Trap="Inconsistant size within a dimention"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:A
    ( Variant In3) ;  //_GUI 132,45
 Object Text;  //_GUI 74,27,This will either be an empty list (ZTerm) if we are at the end of our dimention, or it will be a size list of the inner dimentions.
 Object Text;  //_GUI 60,70,This is the size list of the inner dimentions.  If this is the innermost dimention, this list will be empty.
 Object ( Bit Out1) SameListDataSets( Variant In1, Variant In2) ;  //_GUI 135,23
 //_Attributes Documentation="list/list"
 Object Text;  //_GUI 122,10,The ZTList_Size of the current element must match the ZTList_Size of the other elements in the same dimention.  Otherwise the dimention would have an inconsistant size.
 Object Text;  //_GUI 99,12,Only check consistancy if other dimentions exist
 Object ( Variant Out1) CollectLSB( Variant In2, Variant In3) ;  //_GUI 117,46

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input.0;  
 ZTList_Size.0 = PopLsb.0;  //_GUI 43,46, 43,49
 ZTList_Size:A.0 = PopLsb.1;  //_GUI 41,68
 PopLsb:A.0 = ZTList_Size.0;  
 PushLsb.0 = Junction:A.2;  
 PushLsb.1 = CollectLSB.0;  
 IsZTerm.0 = Junction.2;  
 $SelectOut.0 = Junction.1;  //_GUI 101,25
 $SelectOut.1 = IsZTerm.0;  //_GUI 117,28, 117,30
 Junction.0 = PopLsb:A.0;  //_GUI 101,45
 INVERT.0 = SameListDataSets.0;  
 Output:A.0 = INVERT.0;  
 Junction:A.0 = ZTList_Size:A.0;  //_GUI 133,68
 SameListDataSets.0 = $SelectOut.0;  
 SameListDataSets.1 = Junction:A.1;  //_GUI 133,28
 CollectLSB.0 = PopLsb:A.1;  
 CollectLSB.1 = Input:A.0;  //_GUI 116,51, 116,53
}

Object ( List LSBList) ZTListToLSBList( ZTList ZTList) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList ZTList) Input;  //_GUI 20,32
 Object Output( List LSBList) ;  //_GUI 58,32
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 26,30
 //_Attributes Documentation="list"
 Object ( Variant LSBList) $ZTListToLSBList( Variant ZTList, Variant In2) ;  //_GUI 38,30
 //_Attributes Documentation="ztlist/var"

 // Behavior Topology
 Output.0 = $ZTListToLSBList.0;  
 PopLsb.0 = Input.0;  
 $ZTListToLSBList.0 = PopLsb.0;  
 $ZTListToLSBList.1 = PopLsb.1;  
}

Object ( NULL LSBList) ZTListToLSBList( ZTerm ZTList) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm ZTList) Input;  //_GUI 20,32
 Object Output( NULL LSBList) ;  //_GUI 40,30
 Object ( NULL Out1) NULL;  //_GUI 28,28

 // Behavior Topology
 Output.0 = NULL.0;  
}

Object ( NULL LSBList) ZTListToLSBList( NULL ZTList) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="NULL"
{
 //_ Object Prototypes
 Object ( NULL ZTList) Input;  //_GUI 20,32
 Object Output( NULL LSBList) ;  //_GUI 58,32

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant Data1, Variant Data2, Variant Data3
    , Variant Data4, Variant Data5, Variant Data6, Variant Data7
    , Variant Data8) Show_List_Mux_Sel( Variant ListData0, Bit Sel1, Variant ListData1
    , Variant ListData0, Bit Sel2, Variant ListData2, Variant ListData1
    , Variant ListData0, Bit Sel3, Variant ListData2, Variant ListData1
    , Variant ListData0, LSB002 Sel4, Variant ListData3, Variant ListData2
    , Variant ListData1, Variant ListData0, LSB002 Sel5, LSB003 Sel6
    , LSB004 Sel7, LSB032 BitListData, LSB005 Sel8) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant ListData0) Input;  //_GUI 35,12
 Object ( Bit Sel1) Input:A;  //_GUI 35,15
 Object ( Variant ListData1) Input:B;  //_GUI 24,26
 Object ( Variant ListData0) Input:C;  //_GUI 24,29
 Object ( Bit Sel2) Input:D;  //_GUI 36,35
 Object ( Variant ListData2) Input:E;  //_GUI 22,43
 Object ( Variant ListData1) Input:F;  //_GUI 22,46
 Object ( Variant ListData0) Input:G;  //_GUI 22,49
 Object ( Bit Sel3) Input:H;  //_GUI 34,55
 Object ( Variant ListData2) Input:I;  //_GUI 22,62
 Object ( Variant ListData1) Input:J;  //_GUI 22,65
 Object ( Variant ListData0) Input:K;  //_GUI 22,68
 Object ( LSB002 Sel4) Input:L;  //_GUI 34,74
 Object ( Variant ListData3) Input:M;  //_GUI 22,83
 Object ( Variant ListData2) Input:N;  //_GUI 22,86
 Object ( Variant ListData1) Input:O;  //_GUI 22,89
 Object ( Variant ListData0) Input:P;  //_GUI 22,92
 Object ( LSB002 Sel5) Input:Q;  //_GUI 34,97
 Object ( LSB003 Sel6) Input:R;  //_GUI 33,133
 Object ( LSB004 Sel7) Input:S;  //_GUI 35,190
 Object ( LSB032 BitListData) Input:T;  //_GUI 23,207
 //_Attributes WidgetHex=True,WidgetWidth=129,WidgetHeight=41
 Object ( LSB005 Sel8) Input:U;  //_GUI 23,212
 Object Output( Variant Data1) ;  //_GUI 57,13
 //_Attributes WidgetLeft=260,WidgetTop=65
 Object Output:A( Variant Data2) ;  //_GUI 58,28
 //_Attributes WidgetLeft=260,WidgetTop=225
 Object Output:B( Variant Data3) ;  //_GUI 58,45
 //_Attributes WidgetTop=390,WidgetLeft=260
 Object Output:C( Variant Data4) ;  //_GUI 58,64
 //_Attributes WidgetTop=610,WidgetLeft=260
 Object Output:D( Variant Data5) ;  //_GUI 58,85
 //_Attributes WidgetTop=885,WidgetLeft=260
 Object Output:E( Variant Data6) ;  //_GUI 57,121
 //_Attributes WidgetTop=935,WidgetLeft=260
 Object Output:F( Variant Data7) ;  //_GUI 59,178
 //_Attributes WidgetTop=985,WidgetLeft=260
 Object Output:G( Variant Data8) ;  //_GUI 58,208
 //_Attributes WidgetTop=1090,WidgetLeft=260
 Object ( Variant Data) List_Mux_Sel( Variant Data, Variant Sel) ;  //_GUI 42,83
 //_Attributes Documentation="List/Var"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 29,205
 //_Attributes Documentation="var"
 Object ( List Out1) PackLSB( Variant In1, Variant In2
    , Variant In3) ;  //_GUI 28,42
 Object ( Variant Data) List_Mux_Sel:A( Variant Data, Variant Sel) ;  //_GUI 42,206
 //_Attributes Documentation="List/Var"
 Object ( List Out1) PackLSB:A( Variant In1, Variant In2
    , Variant In3, Variant In4) ;  //_GUI 28,82
 Object Text;  //_GUI 76,13,ListData can have less elements than can be selected.
 Object Text;  //_GUI 76,44,ListData can have more elements than can be selected. The topmost input (ListData2) gets optimized out.
 Object ( LSB008 In20) Input:V;  //_GUI 21,110
 //_Attributes Constant="*15"
 Object ( LSB008 In20) Input:W;  //_GUI 21,113
 //_Attributes Constant="*14"
 Object ( LSB008 In20) Input:X;  //_GUI 21,116
 //_Attributes Constant="*13"
 Object ( LSB008 In20) Input:Y;  //_GUI 21,119
 //_Attributes Constant="*12"
 Object ( LSB008 In20) Input:Z;  //_GUI 21,122
 //_Attributes Constant="*11"
 Object ( LSB008 In20) Input:a;  //_GUI 21,125
 //_Attributes Constant="*10"
 Object ( Variant Data) List_Mux_Sel:B( Variant Data, Variant Sel) ;  //_GUI 42,62
 //_Attributes Documentation="List/Var"
 Object ( Variant Data) List_Mux_Sel:C( Variant ListData, Bit Sel) ;  //_GUI 42,43
 //_Attributes Documentation="var/bit"
 Object ( MSB008 ListData) Input:b;  //_GUI 21,104
 //_Attributes Constant="*17"
 Object ( LSB008 In20) Input:c;  //_GUI 21,107
 //_Attributes Constant="*16"
 Object ( Variant Data) List_Mux_Sel:D( Variant ListData, Bit Sel) ;  //_GUI 42,26
 //_Attributes Documentation="var/bit"
 Object ( Variant Data) List_Mux_Sel:E( Variant ListData, Bit Sel) ;  //_GUI 41,11
 //_Attributes Documentation="var/bit"
 Object ( Variant Data) List_Mux_Sel:F( Variant Data, Variant Sel) ;  //_GUI 41,119
 //_Attributes Documentation="List/Var"
 Object ( List Out1) PackLSB:B( Variant In1, Variant In2
    , Variant In3, Variant In4, Variant In5, Variant In6
    , Variant In7, Variant In8, Variant In9, Variant In10
    , Variant In11, Variant In12, Variant In13, Variant In14
    , Variant In15, Variant In16) ;  //_GUI 29,139
 Object ( Variant Data) List_Mux_Sel:G( Variant Data, Variant Sel) ;  //_GUI 43,176
 //_Attributes Documentation="List/Var"
 Object ( List Out1) PackLSB:C( Variant In1, Variant In2
    , Variant In3) ;  //_GUI 28,61
 Object ( List Out1) PackLSB:D( Variant In1, Variant In2
    , Variant In3, Variant In4, Variant In5, Variant In6
    , Variant In7, Variant In8) ;  //_GUI 27,103
 Object ( List Out) ListOut( Variant In1, Variant In2) ;  //_GUI 30,25
 Object ( MSB008 ListData) Input:d;  //_GUI 23,140
 //_Attributes Constant="*115"
 Object ( LSB008 In20) Input:e;  //_GUI 23,143
 //_Attributes Constant="*114"
 Object ( LSB008 In20) Input:f;  //_GUI 23,146
 //_Attributes Constant="*113"
 Object ( LSB008 In20) Input:AA;  //_GUI 23,149
 //_Attributes Constant="*112"
 Object ( LSB008 In20) Input:BA;  //_GUI 23,152
 //_Attributes Constant="*111"
 Object ( LSB008 In20) Input:CA;  //_GUI 23,155
 //_Attributes Constant="*110"
 Object ( LSB008 In20) Input:DA;  //_GUI 23,158
 //_Attributes Constant="*109"
 Object ( LSB008 In20) Input:EA;  //_GUI 23,161
 //_Attributes Constant="*108"
 Object ( LSB008 In20) Input:FA;  //_GUI 23,167
 //_Attributes Constant="*106"
 Object ( LSB008 In20) Input:GA;  //_GUI 23,170
 //_Attributes Constant="*105"
 Object ( LSB008 In20) Input:HA;  //_GUI 23,173
 //_Attributes Constant="*104"
 Object ( LSB008 In20) Input:IA;  //_GUI 23,176
 //_Attributes Constant="*103"
 Object ( LSB008 In20) Input:JA;  //_GUI 23,179
 //_Attributes Constant="*102"
 Object ( LSB008 In20) Input:KA;  //_GUI 23,182
 //_Attributes Constant="*101"
 Object ( LSB008 In20) Input:LA;  //_GUI 23,185
 //_Attributes Constant="*100"
 Object ( LSB008 In20) Input:MA;  //_GUI 23,164
 //_Attributes Constant="*107"
 Object Text;  //_GUI 74,63,'Sel4' line could address more inputs. By default, the unused states get set to '0'.

 // Behavior Topology
 Output.0 = List_Mux_Sel:E.0;  
 Output:A.0 = List_Mux_Sel:D.0;  
 Output:B.0 = List_Mux_Sel:C.0;  
 Output:C.0 = List_Mux_Sel:B.0;  
 Output:D.0 = List_Mux_Sel.0;  
 Output:E.0 = List_Mux_Sel:F.0;  
 Output:F.0 = List_Mux_Sel:G.0;  
 Output:G.0 = List_Mux_Sel:A.0;  
 List_Mux_Sel.0 = PackLSB:A.0;  
 List_Mux_Sel.1 = Input:Q.0;  //_GUI 40,88, 40,98
 Bit_ZTList.0 = Input:T.0;  
 PackLSB.0 = Input:E.0;  
 PackLSB.1 = Input:F.0;  
 PackLSB.2 = Input:G.0;  
 List_Mux_Sel:A.0 = Bit_ZTList.0;  
 List_Mux_Sel:A.1 = Input:U.0;  //_GUI 41,211, 41,213
 PackLSB:A.0 = Input:M.0;  
 PackLSB:A.1 = Input:N.0;  
 PackLSB:A.2 = Input:O.0;  
 PackLSB:A.3 = Input:P.0;  
 List_Mux_Sel:B.0 = PackLSB:C.0;  
 List_Mux_Sel:B.1 = Input:L.0;  //_GUI 40,67, 40,75
 List_Mux_Sel:C.0 = PackLSB.0;  
 List_Mux_Sel:C.1 = Input:H.0;  //_GUI 40,48, 40,56
 List_Mux_Sel:D.0 = ListOut.0;  
 List_Mux_Sel:D.1 = Input:D.0;  //_GUI 41,31, 41,36
 List_Mux_Sel:E.0 = Input.0;  
 List_Mux_Sel:E.1 = Input:A.0;  
 List_Mux_Sel:F.0 = PackLSB:D.0;  //_GUI 40,121, 40,106
 List_Mux_Sel:F.1 = Input:R.0;  //_GUI 39,124, 39,134
 PackLSB:B.0 = Input:d.0;  
 PackLSB:B.1 = Input:e.0;  
 PackLSB:B.2 = Input:f.0;  
 PackLSB:B.3 = Input:AA.0;  
 PackLSB:B.4 = Input:BA.0;  
 PackLSB:B.5 = Input:CA.0;  
 PackLSB:B.6 = Input:DA.0;  
 PackLSB:B.7 = Input:EA.0;  
 PackLSB:B.8 = Input:MA.0;  
 PackLSB:B.9 = Input:FA.0;  
 PackLSB:B.10 = Input:GA.0;  
 PackLSB:B.11 = Input:HA.0;  
 PackLSB:B.12 = Input:IA.0;  
 PackLSB:B.13 = Input:JA.0;  
 PackLSB:B.14 = Input:KA.0;  
 PackLSB:B.15 = Input:LA.0;  
 List_Mux_Sel:G.0 = PackLSB:B.0;  //_GUI 42,178, 42,142
 List_Mux_Sel:G.1 = Input:S.0;  //_GUI 41,181, 41,191
 PackLSB:C.0 = Input:I.0;  
 PackLSB:C.1 = Input:J.0;  
 PackLSB:C.2 = Input:K.0;  
 PackLSB:D.0 = Input:b.0;  
 PackLSB:D.1 = Input:c.0;  
 PackLSB:D.2 = Input:V.0;  
 PackLSB:D.3 = Input:W.0;  
 PackLSB:D.4 = Input:X.0;  
 PackLSB:D.5 = Input:Y.0;  
 PackLSB:D.6 = Input:Z.0;  
 PackLSB:D.7 = Input:a.0;  
 ListOut.0 = Input:C.0;  
 ListOut.1 = Input:B.0;  
}

Object ( Variant LSB, Variant LSB) Show_transpose_of_ZTList( LSB003 Data5
    , LSB003 Data4, LSB003 Data3, LSB003 Data2, LSB003 Data1
    , LSB003 Data0) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( LSB003 Data5) Input;  //_GUI 22,39
 Object ( LSB003 Data4) Input:A;  //_GUI 22,42
 Object ( LSB003 Data3) Input:B;  //_GUI 22,48
 Object ( LSB003 Data2) Input:C;  //_GUI 22,51
 Object ( LSB003 Data1) Input:D;  //_GUI 22,57
 Object ( LSB003 Data0) Input:E;  //_GUI 22,60
 Object Output( Variant LSB) ;  //_GUI 163,37
 Object Output:A( Variant LSB) ;  //_GUI 163,49
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 110,45
 //_Attributes Documentation="list"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 128,33
 //_Attributes Documentation="list"
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 144,35
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 144,47
 //_Attributes Documentation="ztlist"
 Object ( ZTList ZTList) NewZTList( Variant MSB, Variant In2
    , Variant LSB) ;  //_GUI 76,45
 Object ( Variant Out1) Transpose( ZTList In1) ;  //_GUI 93,45
 Object Text;  //_GUI 49,21,Transposing a [3x2] should produce a [2x3]
 Object Text;  //_GUI 130,61,Here we pull off the two rows of three
 Object ( Variant ZTList) NewZTList:A( Variant MSB, Variant LSB) ;  //_GUI 32,38
 Object ( Variant ZTList) NewZTList:B( Variant MSB, Variant LSB) ;  //_GUI 32,47
 Object ( Variant ZTList) NewZTList:C( Variant MSB, Variant LSB) ;  //_GUI 32,56
 Object Text;  //_GUI 14,20,Data5        Data4Data3        Data2Data1        Data0
 Object Text;  //_GUI 49,37,[Data5, Data4] ZT
 Object Text;  //_GUI 49,46,[Data3, Data2] ZT
 Object Text;  //_GUI 49,55,[Data1, Data0] ZT
 Object Text;  //_GUI 38,26,(([Data5, Data4] ZT), ([Data3, Data2]) ZT, ([Data1, Data0]) ZT) ZT)
 Object Text;  //_GUI 90,29,|||||VArial,8,255,1
 Object Text;  //_GUI 96,14,(([Data5, Data3, Data1] ZT), ([Data4, Data2, Data0]) ZT) ZT)
 Object Text;  //_GUI 176,40,Data5, Data3, Data1
 Object Text;  //_GUI 176,44,Data4, Data2, Data0
 Object Text;  //_GUI 107,18,|||||||||VArial,8,255,1

 // Behavior Topology
 Output.0 = ZTListToLSBList.0;  
 Output:A.0 = ZTListToLSBList:A.0;  
 PopLsb.0 = Transpose.0;  
 PopLsb:A.0 = PopLsb.0;  //_GUI 124,36, 124,47
 ZTListToLSBList.0 = PopLsb:A.1;  
 ZTListToLSBList:A.0 = PopLsb.1;  
 NewZTList.0 = NewZTList:A.0;  //_GUI 71,47, 71,41
 NewZTList.1 = NewZTList:B.0;  
 NewZTList.2 = NewZTList:C.0;  //_GUI 71,53, 71,59
 Transpose.0 = NewZTList.0;  
 NewZTList:A.0 = Input.0;  
 NewZTList:A.1 = Input:A.0;  
 NewZTList:B.0 = Input:B.0;  
 NewZTList:B.1 = Input:C.0;  
 NewZTList:C.0 = Input:D.0;  
 NewZTList:C.1 = Input:E.0;  
}

Object ( Variant LSBList) Show_EncodeRev_ZTList( LSB004 MSB, LSB004 In2
    , LSB004 In3, LSB004 In4, LSB004 In5, LSB004 In6
    , LSB004 In7, LSB004 In8, LSB004 LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( LSB004 MSB) Input;  //_GUI 32,40
 Object ( LSB004 In2) Input:A;  //_GUI 32,43
 Object ( LSB004 In3) Input:B;  //_GUI 32,46
 Object ( LSB004 In4) Input:C;  //_GUI 32,49
 Object ( LSB004 In5) Input:D;  //_GUI 32,52
 Object ( LSB004 In6) Input:E;  //_GUI 32,55
 Object ( LSB004 In7) Input:F;  //_GUI 32,58
 Object ( LSB004 In8) Input:G;  //_GUI 32,61
 Object ( LSB004 LSB) Input:H;  //_GUI 32,64
 Object Output( Variant LSBList) ;  //_GUI 96,41
 Object Text;  //_GUI 68,36,ztl9 of bit
 Object Text;  //_GUI 47,35,ztl9 of lsb2
 Object ( ZTList ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In31, Variant In32, Variant In33
    , Variant In34, Variant In35, Variant LSB) ;  //_GUI 38,39
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 77,39
 //_Attributes Documentation="ztlist"
 Object ( Variant Num) MaskToNum( Variant Mask) ;  //_GUI 55,39

 // Behavior Topology
 Output.0 = ZTListToLSBList.0;  
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  
 NewZTList.4 = Input:D.0;  
 NewZTList.5 = Input:E.0;  
 NewZTList.6 = Input:F.0;  
 NewZTList.7 = Input:G.0;  
 NewZTList.8 = Input:H.0;  
 ZTListToLSBList.0 = MaskToNum.0;  
 MaskToNum.0 = NewZTList.0;  
}

Object ( Variant Out1, Variant LSBList) Show_ListFill( Bit DataToBeBroadcast) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Bit DataToBeBroadcast) Input;  //_GUI 90,8
 Object Output( Variant Out1) ;  //_GUI 143,16
 Object Output:A( Variant LSBList) ;  //_GUI 162,39
 //_Attributes WidgetHex=False,WidgetWidth=129,WidgetHeight=41
 Object ( LSB006 In) Input:A;  //_GUI 5,41
 //_Attributes Constant="*10"
 Object ( LSB006 In) Input:B;  //_GUI 5,47
 //_Attributes Constant="*8"
 Object ( LSB006 In) Input:C;  //_GUI 5,50
 //_Attributes Constant="*7"
 Object ( LSB005 In) Input:D;  //_GUI 5,56
 //_Attributes Constant="*5"
 Object ( LSB006 In) Input:E;  //_GUI 5,59
 //_Attributes Constant="*4"
 Object ( LSB006 In) Input:F;  //_GUI 5,53
 //_Attributes Constant="*6"
 Object ( LSB006 In) Input:G;  //_GUI 5,44
 //_Attributes Constant="*9"
 Object ( LSB006 In) Input:H;  //_GUI 5,68
 //_Attributes Constant="*1"
 Object ( ZTList ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In31, Variant In32, Variant In33
    , Variant In34, Variant In35, Variant In36, Variant LSB) ;  //_GUI 12,40
 Object ( ZTList ZTList) NewZTList:A( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 82,19
 Object ( LSB006 In) Input:I;  //_GUI 5,32
 //_Attributes Constant="*10"
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction
    ( ZTList In0) ;  //_GUI 27,42
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:A
    ( Variant In0) ;  //_GUI 44,35
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:B
    ( Variant In0) ;  //_GUI 60,29
 Object ( LSB006 In) Input:J;  //_GUI 5,62
 //_Attributes Constant="*3"
 Object ( LSB006 In) Input:K;  //_GUI 5,65
 //_Attributes Constant="*2"
 Object ( LSB006 In) Input:L;  //_GUI 5,26
 //_Attributes Constant="*10"
 Object ( LSB006 A) Input:M;  //_GUI 5,17
 //_Attributes Constant="*10"
 Object ( Bit CO, Variant S) $ADC( Variant A
    , Variant B, Bit CI) ;  //_GUI 64,16
 //_Attributes Documentation="Variant"
 Object ( Bit CO, Variant S) $ADC:A( Variant A
    , Variant B, Bit CI) ;  //_GUI 47,25
 //_Attributes Documentation="Variant"
 Object ( Bit CO, Variant S) $ADC:B( Variant A
    , Variant B, Bit CI) ;  //_GUI 31,31
 //_Attributes Documentation="Variant"
 Object ( Variant DataList) ListFill( Variant Data, Variant List) ;  //_GUI 107,14
 //_Attributes Documentation="zterm"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 129,35
 //_Attributes Documentation="list"
 Object ( Variant DataList) ListFillLeaf( Variant Data, Variant List) ;  //_GUI 108,35
 //_Attributes Documentation="var/zterm"
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction:C
    ( ZTList In0) ;  //_GUI 100,21
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:D
    ( Bit In1) ;  //_GUI 104,15
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 143,37
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 123,14
 //_Attributes Documentation="ztlist"
 Object Text;  //_GUI 108,3,ListFill only goes one level deep to do the replacement.
 Object Text;  //_GUI 109,44,ListFillLeaf goes all the way to the non-ZTList element before it does the replacement.
 Object Text;  //_GUI 129,44,Just grab one of the four lists.
 Object Text;  //_GUI 21,77,Arbitrary data that will get replaced.

 // Behavior Topology
 Output.0 = ZTListToLSBList:A.0;  
 Output:A.0 = ZTListToLSBList.0;  
 NewZTList.0 = Input:A.0;  
 NewZTList.1 = Input:G.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  
 NewZTList.4 = Input:F.0;  
 NewZTList.5 = Input:D.0;  
 NewZTList.6 = Input:E.0;  
 NewZTList.7 = Input:J.0;  
 NewZTList.8 = Input:K.0;  
 NewZTList.9 = Input:H.0;  
 NewZTList:A.0 = $ADC.1;  
 NewZTList:A.1 = Junction:B.1;  //_GUI 76,24, 76,30
 NewZTList:A.2 = Junction:A.1;  //_GUI 78,27, 78,36
 NewZTList:A.3 = Junction.1;  //_GUI 80,30, 80,43
 Junction.0 = NewZTList.0;  
 Junction:A.0 = $ADC:B.1;  
 Junction:B.0 = $ADC:A.1;  
 $ADC.0 = Input:M.0;  
 $ADC.1 = Junction:B.0;  //_GUI 61,21
 $ADC:A.0 = Input:L.0;  
 $ADC:A.1 = Junction:A.0;  //_GUI 45,30
 $ADC:B.0 = Input:I.0;  
 $ADC:B.1 = Junction.0;  //_GUI 28,36
 ListFill.0 = Junction:D.1;  
 ListFill.1 = Junction:C.0;  //_GUI 101,19
 PopLsb.0 = ListFillLeaf.0;  
 ListFillLeaf.0 = Junction:D.2;  //_GUI 105,37
 ListFillLeaf.1 = Junction:C.2;  //_GUI 101,40
 Junction:C.0 = NewZTList:A.0;  
 Junction:D.0 = Input.0;  //_GUI 105,9
 ZTListToLSBList.0 = PopLsb.1;  
 ZTListToLSBList:A.0 = ListFill.0;  
}

Object ( Variant LSBList, Variant LSBList) Show_RegClr_withZTLists( LSB004 DataMSB
    , LSB004 DataLSB, Bit ClkG, Bit EnMSB, Bit EnLSB
    , Bit ClrMSB, Bit ClrLSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( LSB004 DataMSB) Input;  //_GUI 10,28
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=50
 Object ( LSB004 DataLSB) Input:A;  //_GUI 10,31
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=50
 Object ( Bit ClkG) Input:B;  //_GUI 10,35
 //_Attributes Resource=*Global
 Object ( Bit EnMSB) Input:C;  //_GUI 10,40
 Object ( Bit EnLSB) Input:D;  //_GUI 10,43
 Object ( Bit ClrMSB) Input:E;  //_GUI 10,50
 Object ( Bit ClrLSB) Input:F;  //_GUI 10,53
 Object Output( Variant LSBList) ;  //_GUI 92,17
 Object Output:A( Variant LSBList) ;  //_GUI 91,38
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction
    ( ZTList In0) ;  //_GUI 31,29
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction:A
    ( ZTList In3) ;  //_GUI 31,24
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:B
    ( Variant In0) ;  //_GUI 53,30
 Object ( Bit Out1) SameListStruct( Variant In1, Variant In2) ;  //_GUI 58,23
 //_Attributes Documentation="list/list"
 Object ( Bit Out) INVERT( Bit In1) ;  //_GUI 78,23
 Object ( ZTList ZTList) NewZTList( Variant MSB, Variant LSB) ;  //_GUI 16,39
 Object ( ZTList ZTList) NewZTList:A( Variant MSB, Variant LSB) ;  //_GUI 16,49
 Object ( Variant Q) RegClr( Variant D, Variant ClkG
    , Variant EN, Variant CLR) ;  //_GUI 40,28
 Object Output:B( Bit Trap) ;  //_GUI 92,25
 //_Attributes Trap="List structures differ."
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 73,15
 //_Attributes Documentation="ztlist"
 Object ( ZTList ZTList) NewZTList:B( Variant MSB, Variant LSB) ;  //_GUI 16,27
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 72,36
 //_Attributes Documentation="ztlist"

 // Behavior Topology
 Output.0 = ZTListToLSBList.0;  
 Output:A.0 = ZTListToLSBList:A.0;  
 Junction.0 = NewZTList:B.0;  
 Junction:A.0 = Junction.0;  
 Junction:B.0 = RegClr.0;  
 SameListStruct.0 = Junction:A.2;  
 SameListStruct.1 = Junction:B.0;  //_GUI 54,28
 INVERT.0 = SameListStruct.0;  
 NewZTList.0 = Input:C.0;  
 NewZTList.1 = Input:D.0;  
 NewZTList:A.0 = Input:E.0;  
 NewZTList:A.1 = Input:F.0;  
 RegClr.0 = Junction.1;  
 RegClr.1 = Input:B.0;  //_GUI 32,33, 32,36
 RegClr.2 = NewZTList.0;  //_GUI 34,36, 34,42
 RegClr.3 = NewZTList:A.0;  //_GUI 36,39, 36,52
 Output:B.0 = INVERT.0;  
 ZTListToLSBList.0 = Junction:A.1;  //_GUI 32,18
 NewZTList:B.0 = Input.0;  
 NewZTList:B.1 = Input:A.0;  
 ZTListToLSBList:A.0 = Junction:B.2;  //_GUI 54,39
}

Object ( Variant LSBList, Variant LSBList) Show_LeafPushMsb( Bit B
    , Bit A, LSB009 b, LSB009 a) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Bit B) Input;  //_GUI 5,15
 Object ( Bit A) Input:A;  //_GUI 5,18
 Object ( LSB009 b) Input:B;  //_GUI 5,48
 Object ( LSB009 a) Input:C;  //_GUI 5,56
 Object Output( Variant LSBList) ;  //_GUI 118,29
 Object Output:A( Variant LSBList) ;  //_GUI 118,38
 Object ( Variant Out1) LeafPushMsb( Variant MSB, Variant In2) ;  //_GUI 52,34
 //_Attributes Documentation="var/var"
 Object ( ZTList ZTList) NewZTList( Variant MSB, Variant LSB) ;  //_GUI 31,47
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 11,46
 //_Attributes Documentation="var"
 Object ( Variant Out1) Bit_ZTList:A( Variant In1) ;  //_GUI 11,54
 //_Attributes Documentation="var"
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 99,27
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 70,34
 //_Attributes Documentation="list"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 87,25
 //_Attributes Documentation="list"
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 99,36
 //_Attributes Documentation="ztlist"
 Object ( ZTList ZTList) NewZTList:A( Variant MSB, Variant LSB) ;  //_GUI 11,14
 Object Text;  //_GUI 8,65,[(a8, a7, a6, a5, a4, a3, a2, a1, a0),ZT]
 Object Text;  //_GUI 7,35,[(b8,ba7, b6, b5, b4, b3, b2, b1, b0),ZT]
 Object Text;  //_GUI 28,55,^||Arial,8,255,1
 Object Text;  //_GUI 28,39,||vArial,8,255,1
 Object Text;  //_GUI 26,28,[(B,A),ZT]
 Object Text;  //_GUI 49,11,[{[(B, b8, ba7, b6, b5, b4, b3, b2, b1, b0), ZT], [(A, a8, a7, a6, a5, a4, a3, a2, a1, a0), ZT]}, ZT]
 Object Text;  //_GUI 30,18,^||Arial,8,255,1
 Object Text;  //_GUI 75,50,[(A, a8, a7, a6, a5, a4, a3, a2, a1, a0), ZT]
 Object Text;  //_GUI 67,19,[(B, b8, ba7, b6, b5, b4, b3, b2, b1, b0), ZT]
 Object Text;  //_GUI 80,23,||vArial,8,255,1
 Object Text;  //_GUI 90,40,^||Arial,8,255,1
 Object Text;  //_GUI 45,57,[{[(b8, ba7, b6, b5, b4, b3, b2, b1, b0), ZT], [(a8, a7, a6, a5, a4, a3, a2, a1, a0), ZT]}, ZT]
 Object Text;  //_GUI 49,44,^|||Arial,8,255,1

 // Behavior Topology
 Output.0 = ZTListToLSBList.0;  
 Output:A.0 = ZTListToLSBList:A.0;  
 LeafPushMsb.0 = NewZTList:A.0;  //_GUI 47,36, 47,17
 LeafPushMsb.1 = NewZTList.0;  //_GUI 47,39, 47,50
 NewZTList.0 = Bit_ZTList.0;  
 NewZTList.1 = Bit_ZTList:A.0;  //_GUI 26,52, 26,57
 Bit_ZTList.0 = Input:B.0;  
 Bit_ZTList:A.0 = Input:C.0;  
 ZTListToLSBList.0 = PopLsb:A.1;  
 PopLsb.0 = LeafPushMsb.0;  
 PopLsb:A.0 = PopLsb.0;  //_GUI 83,28, 83,36
 ZTListToLSBList:A.0 = PopLsb.1;  
 NewZTList:A.0 = Input.0;  
 NewZTList:A.1 = Input:A.0;  
}

Object ( Variant O) Show_Cast_Ztl( Variant 1, Variant 2
    , Variant 3, Variant 4, LSB064 S) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant 1) Input;  //_GUI 5,15
 Object ( Variant 2) Input:A;  //_GUI 5,18
 Object ( Variant 3) Input:B;  //_GUI 5,21
 Object ( Variant 4) Input:C;  //_GUI 5,24
 Object ( LSB064 S) Input:D;  //_GUI 5,27
 //_Attributes WidgetHex=True,WidgetWidth=129,WidgetHeight=41
 Object Output( Variant O) ;  //_GUI 128,40
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 18,14
 Object ( Variant Out) VariantOut( Variant In1, Variant In2) ;  //_GUI 66,40
 Object ( Variant Out1) Cast( Variant Type, Variant Data) ;  //_GUI 90,38
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 59,15
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 36,16
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:A
    ( Variant In0) ;  //_GUI 14,24
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 106,38
 //_Attributes Documentation="ztlist"
 Object Text;  //_GUI 68,62,You would use the Cast to resolve feedback loops -- never to change the actual dataset.
 Object Text;  //_GUI 93,14,Creates a list of 5 elements each having an 8-bit dataset. Even though the 'S' input has a 64-bit dataset, it still gets cast as the dataset on Input '4' and the MSBs on the 64 bit dataset is ignored.
 Object Text;  //_GUI 102,31,|| VArial,8,255,1

 // Behavior Topology
 Output.0 = ZTListToLSBList.0;  
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Junction:A.1;  
 VariantOut.0 = Input:D.0;  //_GUI 13,45, 13,28
 VariantOut.1 = Junction.2;  //_GUI 37,42
 Cast.0 = PushLsb.0;  //_GUI 90,18
 Cast.1 = VariantOut.0;  
 PushLsb.0 = Junction.1;  
 PushLsb.1 = Junction:A.2;  //_GUI 42,20, 42,29, 15,29
 Junction.0 = NewZTList.0;  
 Junction:A.0 = Input:C.0;  
 ZTListToLSBList.0 = Cast.0;  
}

Object ( Variant Out1, Variant Out2) Show_ROL( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 8,14
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=50
 Object Output( Variant Out1) ;  //_GUI 77,14
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=50
 Object Output:A( Variant Out2) ;  //_GUI 77,28
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 15,14
 Object ( Variant Out1) ROL( Variant In1) ;  //_GUI 38,26
 //_Attributes Documentation="var"
 Object ( Variant Out1) ROL:A( Variant In1) ;  //_GUI 42,12
 //_Attributes Documentation="var"
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 54,26
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 21,26
 //_Attributes Documentation="var"
 Object Text;  //_GUI 10,42,Compiling with an LSB dataset should perform a left rotation o fthe bits.

 // Behavior Topology
 Output.0 = ROL:A.0;  
 Output:A.0 = ZTListToLSBList.0;  
 Junction.0 = Input.0;  
 ROL.0 = Bit_ZTList.0;  
 ROL:A.0 = Junction.1;  
 ZTListToLSBList.0 = ROL.0;  
 Bit_ZTList.0 = Junction.2;  //_GUI 16,29
}

Object ( Variant Out1, Variant Out2) Show_ROR( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 13,16
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=50
 Object Output( Variant Out1) ;  //_GUI 82,16
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=50
 Object Output:A( Variant Out2) ;  //_GUI 82,30
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 20,16
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 59,28
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 26,28
 //_Attributes Documentation="var"
 Object ( Variant Out1) ROR( Variant In1) ;  //_GUI 47,14
 //_Attributes Documentation="var"
 Object ( Variant Out1) ROR:A( Variant In1) ;  //_GUI 47,28
 //_Attributes Documentation="var"
 Object Text;  //_GUI 25,38,Compiling with an LSB dataset should perform a right rotation o fthe bits.

 // Behavior Topology
 Output.0 = ROR.0;  
 Output:A.0 = ZTListToLSBList.0;  
 Junction.0 = Input.0;  
 ZTListToLSBList.0 = ROR:A.0;  
 Bit_ZTList.0 = Junction.2;  //_GUI 21,31
 ROR.0 = Junction.1;  
 ROR:A.0 = Bit_ZTList.0;  
}

Object ( Variant Out1, Variant Out2) Show_MostSig( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 49,21
 Object Output( Variant Out1) ;  //_GUI 122,21
 Object Output:A( Variant Out2) ;  //_GUI 122,35
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 56,21
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 99,33
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 62,33
 //_Attributes Documentation="var"
 Object ( Variant Out1) MostSig( Variant In1) ;  //_GUI 85,19
 //_Attributes Documentation="NULL"
 Object ( Variant Out1) MostSig:A( Variant In1) ;  //_GUI 85,33
 //_Attributes Documentation="NULL"

 // Behavior Topology
 Output.0 = MostSig.0;  
 Output:A.0 = ZTListToLSBList.0;  
 Junction.0 = Input.0;  
 ZTListToLSBList.0 = MostSig:A.0;  
 Bit_ZTList.0 = Junction.2;  //_GUI 57,36
 MostSig.0 = Junction.1;  
 MostSig:A.0 = Bit_ZTList.0;  
}

Object ( Variant Out1, Variant Out2) Show_NextMostSig( Variant Bits
    , Variant StartBit) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant Bits) Input;  //_GUI 49,21
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=50
 Object ( Variant StartBit) Input:A;  //_GUI 48,43
 Object Output( Variant Out1) ;  //_GUI 122,22
 Object Output:A( Variant Out2) ;  //_GUI 122,36
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 56,21
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 99,34
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 62,33
 //_Attributes Documentation="var"
 Object ( Variant Out1) Bit_ZTList:A( Variant In1) ;  //_GUI 62,41
 //_Attributes Documentation="var"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:A
    ( Variant In0) ;  //_GUI 58,43
 Object ( Variant Out1) NextLeastSig( Variant Bits, Variant StartBit) ;  //_GUI 82,20
 //_Attributes Documentation="var/NULL"
 Object ( Variant Out1) NextLeastSig:A( Variant Bits, Variant StartBit) ;  //_GUI 82,34
 //_Attributes Documentation="var/NULL"

 // Behavior Topology
 Output.0 = NextLeastSig.0;  
 Output:A.0 = ZTListToLSBList.0;  
 Junction.0 = Input.0;  
 ZTListToLSBList.0 = NextLeastSig:A.0;  
 Bit_ZTList.0 = Junction.2;  //_GUI 57,36
 Bit_ZTList:A.0 = Junction:A.1;  
 Junction:A.0 = Input:A.0;  
 NextLeastSig.0 = Junction.1;  
 NextLeastSig.1 = Junction:A.0;  //_GUI 59,25
 NextLeastSig:A.0 = Bit_ZTList.0;  
 NextLeastSig:A.1 = Bit_ZTList:A.0;  //_GUI 76,39, 76,44
}

Object ( Variant Out1, Variant Out2) Show_LeastSig( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 49,21
 Object Output( Variant Out1) ;  //_GUI 122,21
 Object Output:A( Variant Out2) ;  //_GUI 122,35
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 56,21
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 99,33
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 62,33
 //_Attributes Documentation="var"
 Object ( Variant Out1) LeastSig( Variant In1) ;  //_GUI 85,19
 //_Attributes Documentation="NULL"
 Object ( Variant Out1) LeastSig:A( Variant In1) ;  //_GUI 85,33
 //_Attributes Documentation="NULL"

 // Behavior Topology
 Output.0 = LeastSig.0;  
 Output:A.0 = ZTListToLSBList.0;  
 Junction.0 = Input.0;  
 ZTListToLSBList.0 = LeastSig:A.0;  
 Bit_ZTList.0 = Junction.2;  //_GUI 57,36
 LeastSig.0 = Junction.1;  
 LeastSig:A.0 = Bit_ZTList.0;  
}

Object ( Variant LSBList) Show_Cat( Variant MSB, Variant In2
    , Variant In3, Variant LSB, Variant MSB, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 38,23
 Object ( Variant In2) Input:A;  //_GUI 38,26
 Object ( Variant In3) Input:B;  //_GUI 38,29
 Object ( Variant LSB) Input:C;  //_GUI 38,32
 Object ( Variant MSB) Input:D;  //_GUI 38,38
 Object ( Variant LSB) Input:E;  //_GUI 38,41
 Object Output( Variant LSBList) ;  //_GUI 99,25
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 80,23
 //_Attributes Documentation="ztlist"
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 44,22
 Object ( Variant ZTList) NewZTList:A( Variant MSB, Variant LSB) ;  //_GUI 44,37
 Object ( Variant Out1) Cat( Variant Hi, Variant Lo) ;  //_GUI 68,23
 //_Attributes Documentation="ztlist/ztlist"
 Object Text;  //_GUI 52,14,Combine (concatinates) these two lists into a single list

 // Behavior Topology
 Output.0 = ZTListToLSBList.0;  
 ZTListToLSBList.0 = Cat.0;  
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  
 NewZTList:A.0 = Input:D.0;  
 NewZTList:A.1 = Input:E.0;  
 Cat.0 = NewZTList.0;  
 Cat.1 = NewZTList:A.0;  //_GUI 62,28, 62,40
}

Object ( Variant Hi, Variant Lo) Show_Bisect( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 15,31
 //_Attributes WidgetHex=True,WidgetWidth=124,WidgetHeight=49
 Object Output( Variant Hi) ;  //_GUI 78,30
 Object Output:A( Variant Lo) ;  //_GUI 81,41
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 58,28
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 59,39
 //_Attributes Documentation="ztlist"
 Object ( Variant Hi, Variant Lo) Bisect( Variant In1) ;  //_GUI 44,29
 //_Attributes Documentation="zterm"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 29,29
 //_Attributes Documentation="var"
 Object Text;  //_GUI 8,10,E.g. Bin008
 Object Text;  //_GUI 21,20,||vArial,8,255,1
 Object Text;  //_GUI 29,6,([a7, a6, a5, a4, a3, a2, a1, a0]ZT)
 Object Text;  //_GUI 42,10,||||||vArial,8,255,1
 Object Text;  //_GUI 72,15,a7, a6, a5, a4
 Object Text;  //_GUI 79,20,||vArial,8,255,1
 Object Text;  //_GUI 73,52,a3, a2, a1, a0
 Object Text;  //_GUI 80,43,^||Arial,8,255,1
 Object Text;  //_GUI 49,15,([a7, a6, a5, a4]ZT)
 Object Text;  //_GUI 56,19,||vArial,8,255,1
 Object Text;  //_GUI 48,52,([a3, a2, a1, a0]ZT)
 Object Text;  //_GUI 54,43,^||Arial,8,255,1
 Object Text;  //_GUI 8,14,a7, a6, a5, a4, a3, a2, a1, a0

 // Behavior Topology
 Output.0 = ZTListToLSBList.0;  
 Output:A.0 = ZTListToLSBList:A.0;  
 ZTListToLSBList.0 = Bisect.0;  
 ZTListToLSBList:A.0 = Bisect.1;  //_GUI 56,42, 56,34
 Bisect.0 = Bit_ZTList.0;  
 Bit_ZTList.0 = Input.0;  
}

Object ( Variant El, Variant El, Variant El
    , Variant El, Variant El, Variant El, Variant El
    , Variant El, Variant El, Variant El, Variant El
    , Variant El) Show_GetLoElement( MSB005 Data, MSB005 Lo_e, MSB005 Data
    , LSB002 Lo_e, LSB002 Data, MSB005 Lo_e) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( MSB005 Data) Input;  //_GUI 19,26
 //_Attributes WidgetHex=True,WidgetWidth=109,WidgetHeight=49
 Object ( MSB005 Lo_e) Input:A;  //_GUI 19,29
 Object ( MSB005 Data) Input:B;  //_GUI 18,76
 //_Attributes WidgetHex=True,WidgetWidth=109,WidgetHeight=49
 Object ( LSB002 Lo_e) Input:C;  //_GUI 18,79
 Object ( LSB002 Data) Input:D;  //_GUI 17,125
 Object ( MSB005 Lo_e) Input:E;  //_GUI 17,128
 Object Output( Variant El) ;  //_GUI 64,27
 Object Output:A( Variant El) ;  //_GUI 64,39
 Object Output:B( Variant El) ;  //_GUI 64,51
 Object Output:C( Variant El) ;  //_GUI 64,63
 Object Output:D( Variant El) ;  //_GUI 63,77
 Object Output:E( Variant El) ;  //_GUI 63,89
 Object Output:F( Variant El) ;  //_GUI 63,101
 Object Output:G( Variant El) ;  //_GUI 63,113
 Object Output:H( Variant El) ;  //_GUI 64,126
 Object Output:I( Variant El) ;  //_GUI 65,138
 Object Output:J( Variant El) ;  //_GUI 64,150
 Object Output:K( Variant El) ;  //_GUI 64,162
 Object ( Variant El) GetLoElememt( Variant Data, Variant Lo_e) ;  //_GUI 46,111
 //_Attributes Documentation="var/var"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 33,110
 //_Attributes Documentation="var"
 Object ( MSB005 Out1, MSB005 Out2, MSB005 Out3) Junction
    ( MSB005 In0) ;  //_GUI 25,76
 Object ( MSB005 Out1, MSB005 Out2, MSB005 Out3) Junction:A
    ( MSB005 In1) ;  //_GUI 25,88
 Object ( MSB005 Out1, MSB005 Out2, MSB005 Out3) Junction:B
    ( MSB005 In1) ;  //_GUI 25,100
 Object ( LSB002 Out1, LSB002 Out2, LSB002 Out3) Junction:C
    ( LSB002 In0) ;  //_GUI 28,79
 Object ( LSB002 Out1, LSB002 Out2, LSB002 Out3) Junction:D
    ( LSB002 In1) ;  //_GUI 28,103
 Object ( LSB002 Out1, LSB002 Out2, LSB002 Out3) Junction:E
    ( LSB002 In1) ;  //_GUI 28,91
 Object ( Variant Out1) Bit_ZTList:A( Variant In1) ;  //_GUI 33,86
 //_Attributes Documentation="var"
 Object ( Variant El) GetLoElememt:A( Variant Data, Variant Lo_e) ;  //_GUI 46,99
 //_Attributes Documentation="var/var"
 Object ( Variant Out1) Bit_ZTList:B( Variant In1) ;  //_GUI 33,89
 //_Attributes Documentation="var"
 Object ( Variant Out1) Bit_ZTList:C( Variant In1) ;  //_GUI 32,135
 //_Attributes Documentation="var"
 Object ( Variant Out1) Bit_ZTList:D( Variant In1) ;  //_GUI 32,138
 //_Attributes Documentation="var"
 Object ( Variant Out1) Bit_ZTList:E( Variant In1) ;  //_GUI 32,150
 //_Attributes Documentation="var"
 Object ( Variant Out1) Bit_ZTList:F( Variant In1) ;  //_GUI 33,101
 //_Attributes Documentation="var"
 Object ( Variant Out1) Bit_ZTList:G( Variant In1) ;  //_GUI 32,159
 //_Attributes Documentation="var"
 Object ( LSB002 Out1, LSB002 Out2, LSB002 Out3) Junction:F
    ( LSB002 In0) ;  //_GUI 24,125
 Object ( LSB002 Out1, LSB002 Out2, LSB002 Out3) Junction:G
    ( LSB002 In1) ;  //_GUI 24,137
 Object ( LSB002 Out1, LSB002 Out2, LSB002 Out3) Junction:H
    ( LSB002 In1) ;  //_GUI 24,149
 Object ( MSB005 Out1, MSB005 Out2, MSB005 Out3) Junction:I
    ( MSB005 In0) ;  //_GUI 27,128
 Object ( MSB005 Out1, MSB005 Out2, MSB005 Out3) Junction:J
    ( MSB005 In1) ;  //_GUI 27,152
 Object ( MSB005 Out1, MSB005 Out2, MSB005 Out3) Junction:K
    ( MSB005 In1) ;  //_GUI 27,140
 Object ( Variant El) GetLoElememt:B( Variant Data, Variant Lo_e) ;  //_GUI 47,25
 //_Attributes Documentation="var/var"
 Object ( Variant El) GetLoElememt:C( Variant Data, Variant Lo_e) ;  //_GUI 46,75
 //_Attributes Documentation="var/var"
 Object ( Variant El) GetLoElememt:D( Variant Data, Variant Lo_e) ;  //_GUI 47,37
 //_Attributes Documentation="var/var"
 Object ( Variant El) GetLoElememt:E( Variant Data, Variant Lo_e) ;  //_GUI 46,87
 //_Attributes Documentation="var/var"
 Object ( Variant Out1) Bit_ZTList:H( Variant In1) ;  //_GUI 34,36
 //_Attributes Documentation="var"
 Object ( Variant Out1) Bit_ZTList:I( Variant In1) ;  //_GUI 34,39
 //_Attributes Documentation="var"
 Object ( Variant El) GetLoElememt:F( Variant Data, Variant Lo_e) ;  //_GUI 47,49
 //_Attributes Documentation="var/var"
 Object ( Variant Out1) Bit_ZTList:J( Variant In1) ;  //_GUI 34,51
 //_Attributes Documentation="var"
 Object ( Variant El) GetLoElememt:G( Variant Data, Variant Lo_e) ;  //_GUI 47,61
 //_Attributes Documentation="var/var"
 Object ( Variant Out1) Bit_ZTList:K( Variant In1) ;  //_GUI 34,60
 //_Attributes Documentation="var"
 Object ( MSB005 Out1, MSB005 Out2, MSB005 Out3) Junction:L
    ( MSB005 In0) ;  //_GUI 26,26
 Object ( MSB005 Out1, MSB005 Out2, MSB005 Out3) Junction:M
    ( MSB005 In1) ;  //_GUI 26,38
 Object ( MSB005 Out1, MSB005 Out2, MSB005 Out3) Junction:N
    ( MSB005 In1) ;  //_GUI 26,50
 Object ( MSB005 Out1, MSB005 Out2, MSB005 Out3) Junction:O
    ( MSB005 In0) ;  //_GUI 29,29
 Object ( MSB005 Out1, MSB005 Out2, MSB005 Out3) Junction:P
    ( MSB005 In1) ;  //_GUI 29,53
 Object ( MSB005 Out1, MSB005 Out2, MSB005 Out3) Junction:Q
    ( MSB005 In1) ;  //_GUI 29,41
 Object Text;  //_GUI 76,124,This particular example will not work. An error should occur durring compile if you connect the ouput El into any of these. This is because the dataset on Lo_e is smaller than the dataset of Data or the list of bits that will be produced from the Bit_ZTList object.
 Object Text;  //_GUI 3,29,MSB005
 Object Text;  //_GUI 3,25,MSB005
 Object Text;  //_GUI 3,75,MSB005
 Object Text;  //_GUI 3,78,LSB002
 Object Text;  //_GUI 75,25,This example demonstrates how the object GetLoElement works. It detects when a bit is high in a list of bits.The selection of the bit depends on the dataset on the input 'Lo_e'.In the first set since Lo_e has a dataset of MSB005, output El will go high every time the fifth bit on 'Data' is high.The object works on both a ZT list of bits or a regular dataset.
 Object Text;  //_GUI 75,76,In the second set since Lo_e has a dataset of LSB002, output El will go high every time the fsecond bit on 'Data' is high.The object works on both a ZT list of bits or a regular dataset.
 Object ( Variant El) GetLoElememt:H( Variant Data, Variant Lo_e) ;  //_GUI 45,124
 //_Attributes Documentation="var/var"
 Object ( Variant El) GetLoElememt:I( Variant Data, Variant Lo_e) ;  //_GUI 45,136
 //_Attributes Documentation="var/var"
 Object ( Variant El) GetLoElememt:J( Variant Data, Variant Lo_e) ;  //_GUI 45,148
 //_Attributes Documentation="var/var"
 Object ( Variant El) GetLoElememt:K( Variant Data, Variant Lo_e) ;  //_GUI 45,160
 //_Attributes Documentation="var/var"

 // Behavior Topology
 Output.0 = GetLoElememt:B.0;  
 Output:A.0 = GetLoElememt:D.0;  
 Output:B.0 = GetLoElememt:F.0;  
 Output:C.0 = GetLoElememt:G.0;  
 Output:D.0 = GetLoElememt:C.0;  
 Output:E.0 = GetLoElememt:E.0;  
 Output:F.0 = GetLoElememt:A.0;  
 Output:G.0 = GetLoElememt.0;  
 GetLoElememt.0 = Bit_ZTList.0;  
 GetLoElememt.1 = Junction:D.2;  //_GUI 29,116
 Bit_ZTList.0 = Junction:B.2;  //_GUI 26,113
 Junction.0 = Input:B.0;  
 Junction:A.0 = Junction.2;  
 Junction:B.0 = Junction:A.2;  
 Junction:C.0 = Input:C.0;  
 Junction:D.0 = Junction:E.2;  
 Junction:E.0 = Junction:C.2;  
 Bit_ZTList:A.0 = Junction:A.1;  
 GetLoElememt:A.0 = Junction:B.1;  
 GetLoElememt:A.1 = Bit_ZTList:F.0;  
 Bit_ZTList:B.0 = Junction:E.1;  
 Bit_ZTList:C.0 = Junction:G.1;  
 Bit_ZTList:D.0 = Junction:K.1;  
 Bit_ZTList:E.0 = Junction:J.1;  
 Bit_ZTList:F.0 = Junction:D.1;  
 Bit_ZTList:G.0 = Junction:H.2;  //_GUI 25,162
 Junction:F.0 = Input:D.0;  
 Junction:G.0 = Junction:F.2;  
 Junction:H.0 = Junction:G.2;  
 Junction:I.0 = Input:E.0;  
 Junction:J.0 = Junction:K.2;  
 Junction:K.0 = Junction:I.2;  
 GetLoElememt:B.0 = Junction:L.1;  
 GetLoElememt:B.1 = Junction:O.1;  
 GetLoElememt:C.0 = Junction.1;  
 GetLoElememt:C.1 = Junction:C.1;  
 GetLoElememt:D.0 = Bit_ZTList:H.0;  
 GetLoElememt:D.1 = Bit_ZTList:I.0;  
 GetLoElememt:E.0 = Bit_ZTList:A.0;  
 GetLoElememt:E.1 = Bit_ZTList:B.0;  
 Bit_ZTList:H.0 = Junction:M.1;  
 Bit_ZTList:I.0 = Junction:Q.1;  
 GetLoElememt:F.0 = Junction:N.1;  
 GetLoElememt:F.1 = Bit_ZTList:J.0;  
 Bit_ZTList:J.0 = Junction:P.1;  
 GetLoElememt:G.0 = Bit_ZTList:K.0;  
 GetLoElememt:G.1 = Junction:P.2;  //_GUI 30,66
 Bit_ZTList:K.0 = Junction:N.2;  //_GUI 27,63
 Junction:L.0 = Input.0;  
 Junction:M.0 = Junction:L.2;  
 Junction:N.0 = Junction:M.2;  
 Junction:O.0 = Input:A.0;  
 Junction:P.0 = Junction:Q.2;  
 Junction:Q.0 = Junction:O.2;  
 GetLoElememt:H.0 = Junction:F.1;  
 GetLoElememt:H.1 = Junction:I.1;  
 GetLoElememt:I.0 = Bit_ZTList:C.0;  
 GetLoElememt:I.1 = Bit_ZTList:D.0;  
 GetLoElememt:J.0 = Junction:H.1;  
 GetLoElememt:J.1 = Bit_ZTList:E.0;  
 GetLoElememt:K.0 = Bit_ZTList:G.0;  
 GetLoElememt:K.1 = Junction:J.2;  //_GUI 28,165
}

Object ( Variant Out1) Transpose( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 19,42
 Object Output( Variant Out1) ;  //_GUI 60,40
 Object ( Variant Out1) $transpose( Variant transposed, Variant row_in) ;  //_GUI 44,38
 //_Attributes Documentation="zterm/zlist"
 Object ( ZTerm ZTList) NewZTList;  //_GUI 29,35
 //_Attributes Documentation="empty"

 // Behavior Topology
 Output.0 = $transpose.0;  
 $transpose.0 = NewZTList.0;  //_GUI 43,40, 43,38
 $transpose.1 = Input.0;  
}

Object ( Variant Out1) Cast( ZTList Type, Variant Data) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads\ZTCast,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList Type) Input;  //_GUI 28,38
 Object ( Variant Data) Input:A;  //_GUI 29,50
 Object Output( Variant Out1) ;  //_GUI 116,39
 Object ( Variant Out1) Cast( Variant Type, Variant Data) ;  //_GUI 87,36
 Object ( Variant Out1, Variant Out2) VariantIn( Variant In) ;  //_GUI 60,48
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 59,36
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 104,37
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) Cast:A( Variant Type, Variant Data) ;  //_GUI 87,48
 Object ( Bit Out1) SameListStruct( Variant In1, Variant In2) ;  //_GUI 86,61
 //_Attributes Documentation="list/list"
 Object Output:A( Bit Trap) ;  //_GUI 115,63
 //_Attributes Trap="ZTList Cast had incoming list structures that were incongruent."
 Object ( Bit Out) INVERT( Bit In1) ;  //_GUI 103,61
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 83,49
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:A
    ( Variant In0) ;  //_GUI 78,52
 Object ( Bit Out1) SameListStruct:A( Variant In1, Variant In2) ;  //_GUI 83,24
 //_Attributes Documentation="list/list"
 Object Output:B( Bit Trap) ;  //_GUI 112,26
 //_Attributes Trap="ZTList Cast had incoming list structures that were incongruent."
 Object ( Bit Out) INVERT:A( Bit In1) ;  //_GUI 100,24
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:B
    ( Variant In0) ;  //_GUI 82,40
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:C
    ( Variant In0) ;  //_GUI 78,37

 // Behavior Topology
 Output.0 = PushLsb.0;  
 Cast.0 = Junction:C.1;  
 Cast.1 = Junction:B.1;  
 VariantIn.0 = Input:A.0;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = Cast.0;  
 PushLsb.1 = Cast:A.0;  //_GUI 100,42, 100,51
 Cast:A.0 = Junction.1;  
 Cast:A.1 = Junction:A.1;  
 SameListStruct.0 = Junction.2;  //_GUI 86,57, 84,57
 SameListStruct.1 = Junction:A.2;  //_GUI 79,66
 Output:A.0 = INVERT.0;  
 INVERT.0 = SameListStruct.0;  
 Junction.0 = PopLsb.1;  //_GUI 80,50, 80,46, 74,46, 74,41
 Junction:A.0 = VariantIn.0;  
 SameListStruct:A.0 = Junction:C.0;  //_GUI 79,26
 SameListStruct:A.1 = Junction:B.0;  
 Output:B.0 = INVERT:A.0;  
 INVERT:A.0 = SameListStruct:A.0;  
 Junction:B.0 = VariantIn.1;  //_GUI 76,41, 76,50
 Junction:C.0 = PopLsb.0;  
}

Object ( ZTerm Out1) Cast( ZTerm Type, Variant Data) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads\ZTCast,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm Type) Input;  //_GUI 24,20
 Object ( Variant Data) Input:A;  //_GUI 25,31
 Object Output( ZTerm Out1) ;  //_GUI 88,20

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant Out1) $CollectLeavesAsLsb( ZTerm In1, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="zterm/var"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 16,23
 Object ( Variant LSB) Input:A;  //_GUI 16,35
 Object Output( Variant Out1) ;  //_GUI 47,35

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Variant Out1) $CollectLeavesAsLsb( ZTList In1, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="ztlist/var"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 16,23
 Object ( Variant LSB) Input:A;  //_GUI 16,30
 Object Output( Variant Out1) ;  //_GUI 77,28
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 22,21
 //_Attributes Documentation="list"
 Object ( Variant Out1) $CollectLeavesAsLsb( Variant In1, Variant In2) ;  //_GUI 35,21
 //_Attributes Documentation="zterm/var"
 Object ( Variant Out1) CollectLSB( Variant In2, Variant In3) ;  //_GUI 63,26

 // Behavior Topology
 Output.0 = CollectLSB.0;  
 PopLsb.0 = Input.0;  
 $CollectLeavesAsLsb.0 = PopLsb.0;  
 $CollectLeavesAsLsb.1 = PopLsb.1;  
 CollectLSB.0 = $CollectLeavesAsLsb.0;  //_GUI 57,28, 57,24
 CollectLSB.1 = Input:A.0;  
}

Object ( Variant Out1) $CollectLeavesAsLsb( ZTList In1, ZTList LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="ztlist/ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 16,23
 Object ( ZTList LSB) Input:A;  //_GUI 16,35
 Object Output( Variant Out1) ;  //_GUI 74,29
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 22,21
 //_Attributes Documentation="list"
 Object ( Variant Out1) $CollectLeavesAsLsb( Variant In1, Variant In2) ;  //_GUI 34,21
 //_Attributes Documentation="zterm/var"
 Object Text;  //_GUI 15,11,A Ztl of Ztls
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 22,33
 //_Attributes Documentation="list"
 Object ( Variant Out1) $CollectLeavesAsLsb:A( Variant In1, Variant In2) ;  //_GUI 34,33
 //_Attributes Documentation="zterm/var"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 62,27
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input.0;  
 $CollectLeavesAsLsb.0 = PopLsb.0;  
 $CollectLeavesAsLsb.1 = PopLsb.1;  
 PopLsb:A.0 = Input:A.0;  
 $CollectLeavesAsLsb:A.0 = PopLsb:A.0;  
 $CollectLeavesAsLsb:A.1 = PopLsb:A.1;  
 PushLsb.0 = $CollectLeavesAsLsb.0;  //_GUI 56,29, 56,24
 PushLsb.1 = $CollectLeavesAsLsb:A.0;  //_GUI 56,32, 56,36
}

Object ( Variant Out1) $CollectLeavesAsLsb( ZTerm In1, ZTList LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="zterm/ztlist"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 16,28
 Object ( ZTList LSB) Input:A;  //_GUI 16,35
 Object Output( Variant Out1) ;  //_GUI 78,29
 Object Text;  //_GUI 15,11,A Ztl of Ztls
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 22,33
 //_Attributes Documentation="list"
 Object ( Variant Out1) $CollectLeavesAsLsb( Variant In1, Variant In2) ;  //_GUI 34,33
 //_Attributes Documentation="zterm/var"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 63,27
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input:A.0;  
 $CollectLeavesAsLsb.0 = PopLsb.0;  
 $CollectLeavesAsLsb.1 = PopLsb.1;  
 PushLsb.0 = Input.0;  
 PushLsb.1 = $CollectLeavesAsLsb.0;  //_GUI 56,32, 56,36
}

Object ( NULL Out1) LSB( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 11,13
 Object Output( NULL Out1) ;  //_GUI 38,13
 Object ( NULL Out1) NULL;  //_GUI 21,20

 // Behavior Topology
 Output.0 = NULL.0;  //_GUI 38,23
}

Object ( ZTerm "LsbOutIsLsbIn+1", ZTerm LsbOutIsLsbIn) $EveryOtherA( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 51,26
 Object Output( ZTerm "LsbOutIsLsbIn+1") ;  //_GUI 77,26
 Object Output:A( ZTerm LsbOutIsLsbIn) ;  //_GUI 77,33
 Object ( ZTerm Out1, ZTerm Out2, ZTerm Out3) Junction
    ( ZTerm In0) ;  //_GUI 69,26

 // Behavior Topology
 Output.0 = Junction.1;  
 Output:A.0 = Junction.2;  //_GUI 70,34
 Junction.0 = Input.0;  
}

Object ( Variant MSB, ZTList Out1) $PopMsb( ZTList In1
    , Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/var"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 13,16
 Object ( Variant In1) Input:A;  //_GUI 13,27
 Object Output( Variant MSB) ;  //_GUI 78,15
 Object Output:A( ZTList Out1) ;  //_GUI 78,25
 Object ( Variant MSB, Variant Out1) $PopMsb( Variant In1
    , Variant In11) ;  //_GUI 37,14
 //_Attributes Documentation="var/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 23,14
 //_Attributes Documentation="list"
 Object ( ZTList Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 52,23
 //_Attributes Documentation="ztl/var"
 Object Text;  //_GUI 16,7,Pop off LSBs until we get to the MSB.(ZTLists are implemented in LSB order)

 // Behavior Topology
 Output.0 = $PopMsb.0;  
 Output:A.0 = PushLsb.0;  
 $PopMsb.0 = PopLsb.0;  
 $PopMsb.1 = PopLsb.1;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = $PopMsb.1;  //_GUI 50,25, 50,19
 PushLsb.1 = Input:A.0;  
}

Object ( Variant MSB, ZTerm Out1) $PopMsb( ZTerm In1
    , Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/var"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 13,18
 Object ( Variant In1) Input:A;  //_GUI 13,27
 Object Output( Variant MSB) ;  //_GUI 78,15
 Object Output:A( ZTerm Out1) ;  //_GUI 78,25
 Object Text;  //_GUI 16,7,We are now at the MSB end of the list, output the MSB and pass down the terminator.

 // Behavior Topology
 Output.0 = Input:A.0;  //_GUI 33,16, 33,28
 Output:A.0 = Input.0;  //_GUI 40,26, 40,19
}

Object ( Bit Out1) SameDataSets( Variant In1, Bit In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="Bit"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 43,22
 Object ( Bit In2) Input:A;  //_GUI 43,25
 Object Output( Bit Out1) ;  //_GUI 69,22
 Object ( Bit In) Input:B;  //_GUI 59,22
 //_Attributes Constant="*0"

 // Behavior Topology
 Output.0 = Input:B.0;  
}

Object ( Bit Out1) SameDataSets( Bit In1, Variant In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo,Documentation="Bit"
{
 //_ Object Prototypes
 Object ( Bit In1) Input;  //_GUI 43,22
 Object ( Variant In2) Input:A;  //_GUI 43,25
 Object Output( Bit Out1) ;  //_GUI 69,22
 Object ( Bit In) Input:B;  //_GUI 59,22
 //_Attributes Constant="*0"

 // Behavior Topology
 Output.0 = Input:B.0;  
}

Object ( List LSBList) $ZTListToLSBList( ZTList ZTList, Variant In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="ztlist/var"
{
 //_ Object Prototypes
 Object ( ZTList ZTList) Input;  //_GUI 20,32
 Object ( Variant In2) Input:A;  //_GUI 20,38
 Object Output( List LSBList) ;  //_GUI 74,33
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 26,30
 //_Attributes Documentation="list"
 Object ( Variant LSBList) $ZTListToLSBList( Variant ZTList, Variant In2) ;  //_GUI 39,30
 //_Attributes Documentation="ztlist/var"
 Object ( List Out) ListOut( Variant In1, Variant In2) ;  //_GUI 62,31

 // Behavior Topology
 Output.0 = ListOut.0;  
 PopLsb.0 = Input.0;  
 $ZTListToLSBList.0 = PopLsb.0;  
 $ZTListToLSBList.1 = PopLsb.1;  
 ListOut.0 = Input:A.0;  //_GUI 59,36, 59,39
 ListOut.1 = $ZTListToLSBList.0;  
}

Object ( Variant LSBList) $ZTListToLSBList( ZTerm ZTList, Variant In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="zterm/var"
{
 //_ Object Prototypes
 Object ( ZTerm ZTList) Input;  //_GUI 20,32
 Object ( Variant In2) Input:A;  //_GUI 20,42
 Object Output( Variant LSBList) ;  //_GUI 59,42

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( List LSBList) $ZTListToLSBList( ZTList ZTList, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="ztlist/ztlist"
{
 //_ Object Prototypes
 Object ( ZTList ZTList) Input;  //_GUI 20,32
 Object ( ZTList In2) Input:A;  //_GUI 20,38
 Object Output( List LSBList) ;  //_GUI 74,33
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 26,30
 //_Attributes Documentation="list"
 Object ( Variant LSBList) $ZTListToLSBList( Variant ZTList, Variant In2) ;  //_GUI 39,30
 //_Attributes Documentation="ztlist/var"
 Object ( List Out) ListOut( Variant In1, Variant In2) ;  //_GUI 62,31
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 26,45
 //_Attributes Documentation="list"
 Object ( Variant LSBList) $ZTListToLSBList:A( Variant ZTList, Variant In2) ;  //_GUI 39,45
 //_Attributes Documentation="ztlist/var"

 // Behavior Topology
 Output.0 = ListOut.0;  
 PopLsb.0 = Input.0;  
 $ZTListToLSBList.0 = PopLsb.0;  
 $ZTListToLSBList.1 = PopLsb.1;  
 ListOut.0 = $ZTListToLSBList:A.0;  //_GUI 59,36, 59,48
 ListOut.1 = $ZTListToLSBList.0;  
 PopLsb:A.0 = Input:A.0;  //_GUI 25,48, 25,39
 $ZTListToLSBList:A.0 = PopLsb:A.0;  
 $ZTListToLSBList:A.1 = PopLsb:A.1;  
}

Object ( Variant Out1) $transpose( Variant transposed, ZTList row_in) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="var/zlist"
{
 //_ Object Prototypes
 Object ( Variant transposed) Input;  //_GUI 44,34
 Object ( ZTList row_in) Input:A;  //_GUI 44,38
 Object Output( Variant Out1) ;  //_GUI 79,35
 Object Text;  //_GUI 37,27,first pass (empty results so far)
 Object Text;  //_GUI 27,42,This element is another list, i.e. we have another dimension here.
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 50,36
 //_Attributes Documentation="list"
 Object ( Variant Out1) $transpose( Variant transposed, Variant RestOfRowIn
    , Variant row_in) ;  //_GUI 63,33
 //_Attributes Documentation="var/var/zlist"

 // Behavior Topology
 Output.0 = $transpose.0;  
 PopLsb.0 = Input:A.0;  
 $transpose.0 = Input.0;  
 $transpose.1 = PopLsb.0;  
 $transpose.2 = PopLsb.1;  
}

Object ( Variant Out1) $transpose( Variant transposed, Variant row_in) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="var/var"
{
 //_ Object Prototypes
 Object ( Variant transposed) Input;  //_GUI 44,34
 Object ( Variant row_in) Input:A;  //_GUI 44,37
 Object Output( Variant Out1) ;  //_GUI 63,35
 Object Text;  //_GUI 37,42,Leaf of any type
 Object Text;  //_GUI 70,34,Append the leaf to the end of the branch of the transposed list.
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 50,33
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = Input.0;  
 PushLsb.1 = Input:A.0;  
}

Object ( ZTerm Out1) $transpose( Variant transposed, ZTerm row_in) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="var/zterm"
{
 //_ Object Prototypes
 Object ( Variant transposed) Input;  //_GUI 44,33
 Object ( ZTerm row_in) Input:A;  //_GUI 44,36
 Object Output( ZTerm Out1) ;  //_GUI 104,36

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( ZTerm "LsbOutIsLsbIn+1", ZTerm LsbOutIsLsbIn) $EveryOtherB( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 51,26
 Object Output( ZTerm "LsbOutIsLsbIn+1") ;  //_GUI 77,26
 Object Output:A( ZTerm LsbOutIsLsbIn) ;  //_GUI 77,33
 Object ( ZTerm Out1, ZTerm Out2, ZTerm Out3) Junction
    ( ZTerm In0) ;  //_GUI 69,26

 // Behavior Topology
 Output.0 = Junction.1;  
 Output:A.0 = Junction.2;  //_GUI 70,34
 Junction.0 = Input.0;  
}

Object ( Variant Out1) $transpose( ZTerm transposed, Variant RestOfRowIn
    , ZTList row_in) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="zterm/var/zlist"
{
 //_ Object Prototypes
 Object ( ZTerm transposed) Input;  //_GUI 44,34
 Object ( Variant RestOfRowIn) Input:A;  //_GUI 44,37
 Object ( ZTList row_in) Input:B;  //_GUI 44,40
 Object Output( Variant Out1) ;  //_GUI 123,45
 Object Text;  //_GUI 27,45,This element is another list, i.e. we have another dimention here.
 Object Text;  //_GUI 92,52,Split off the end row and put its elements on the end of the transposed list(s).
 Object Text;  //_GUI 94,22,Do the same for any more rows on this dimention.
 Object ( Variant Out1) $transpose( Variant transposed, Variant row_in) ;  //_GUI 99,33
 //_Attributes Documentation="var/zlist"
 Object ( Variant Out1) $transpose:A( Variant transposed, Variant row_in) ;  //_GUI 99,43
 //_Attributes Documentation="var/zlist"
 Object Text;  //_GUI 37,27,first pass (empty results so far)

 // Behavior Topology
 Output.0 = $transpose:A.0;  
 $transpose.0 = Input.0;  
 $transpose.1 = Input:A.0;  
 $transpose:A.0 = $transpose.0;  //_GUI 97,45, 97,42, 114,42, 114,36
 $transpose:A.1 = Input:B.0;  //_GUI 92,48, 92,41
}

Object ( Variant Out1) $transpose( Variant transposed, Variant RestOfRowIn
    , Variant row_in) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="var/var/var"
{
 //_ Object Prototypes
 Object ( Variant transposed) Input;  //_GUI 44,34
 Object ( Variant RestOfRowIn) Input:A;  //_GUI 44,37
 Object ( Variant row_in) Input:B;  //_GUI 44,40
 Object Output( Variant Out1) ;  //_GUI 128,36
 Object Text;  //_GUI 27,45,This element is the leaf.
 Object Text;  //_GUI 99,52,Split off the end row and put its elements on the end of the transposed list(s).
 Object Text;  //_GUI 99,22,Do the same for any more rows on this dimention.
 Object ( Variant Out1) $transpose( Variant transposed, Variant row_in) ;  //_GUI 99,33
 //_Attributes Documentation="var/zlist"
 Object ( Variant Out1) $transpose:A( Variant transposed, Variant row_in) ;  //_GUI 99,43
 //_Attributes Documentation="var/zlist"
 Object Text;  //_GUI 37,27,first pass (empty results so far)
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 116,34
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 94,34

 // Behavior Topology
 Output.0 = PushLsb.0;  
 $transpose.0 = Junction.1;  
 $transpose.1 = Input:A.0;  
 $transpose:A.0 = Junction.2;  //_GUI 95,45
 $transpose:A.1 = Input:B.0;  //_GUI 92,48, 92,41
 PushLsb.0 = $transpose.0;  
 PushLsb.1 = $transpose:A.0;  //_GUI 114,39, 114,46
 Junction.0 = Input.0;  
}

Object ( Variant Out1) $transpose( ZTList transposed, Variant RestOfRowIn
    , Variant row_in) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="ztlist/var/var"
{
 //_ Object Prototypes
 Object ( ZTList transposed) Input;  //_GUI 44,34
 Object ( Variant RestOfRowIn) Input:A;  //_GUI 44,37
 Object ( Variant row_in) Input:B;  //_GUI 44,40
 Object Output( Variant Out1) ;  //_GUI 144,39
 Object ( Variant Out1) $transpose( Variant transposed, Variant row_in) ;  //_GUI 104,33
 //_Attributes Documentation="var/zlist"
 Object ( Variant Out1) $transpose:A( Variant transposed, Variant row_in) ;  //_GUI 103,45
 //_Attributes Documentation="var/zlist"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 70,29
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 132,37
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 $transpose.0 = PopLsb.0;  //_GUI 104,31
 $transpose.1 = Input:A.0;  
 $transpose:A.0 = PopLsb.1;  //_GUI 80,47
 $transpose:A.1 = Input:B.0;  //_GUI 56,50, 56,41
 PopLsb.0 = Input.0;  //_GUI 56,32, 56,35
 PushLsb.0 = $transpose.0;  //_GUI 123,39, 123,36
 PushLsb.1 = $transpose:A.0;  //_GUI 123,42, 123,48
}

Object ( Variant Out1) $transpose( ZTList transposed, Variant RestOfRowIn
    , ZTList row_in) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="ztlist/var/zlist"
{
 //_ Object Prototypes
 Object ( ZTList transposed) Input;  //_GUI 44,34
 Object ( Variant RestOfRowIn) Input:A;  //_GUI 44,37
 Object ( ZTList row_in) Input:B;  //_GUI 44,40
 Object Output( Variant Out1) ;  //_GUI 123,45
 Object Text;  //_GUI 27,45,This element is another list, i.e. we have another dimention here.
 Object Text;  //_GUI 92,52,Split off the end row and put its elements on the end of the transposed list(s).
 Object Text;  //_GUI 94,22,Do the same for any more rows on this dimention.
 Object ( Variant Out1) $transpose( Variant transposed, Variant row_in) ;  //_GUI 99,33
 //_Attributes Documentation="var/zlist"
 Object ( Variant Out1) $transpose:A( Variant transposed, Variant row_in) ;  //_GUI 99,43
 //_Attributes Documentation="var/zlist"
 Object Text;  //_GUI 37,27,first pass (empty results so far)

 // Behavior Topology
 Output.0 = $transpose:A.0;  
 $transpose.0 = Input.0;  
 $transpose.1 = Input:A.0;  
 $transpose:A.0 = $transpose.0;  //_GUI 97,45, 97,42, 114,42, 114,36
 $transpose:A.1 = Input:B.0;  //_GUI 92,48, 92,41
}

Object ( Variant Out1, Variant LSB) ListPopLsb( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads\ListPopLsb,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 15,19
 Object Output( Variant Out1) ;  //_GUI 50,18
 Object Output:A( Variant LSB) ;  //_GUI 50,21
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 30,17
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = PopLsb.0;  
 Output:A.0 = PopLsb.1;  
 PopLsb.0 = Input.0;  
}

Object ( NULL Out1, ZTerm LSB) ListPopLsb( ZTerm Data) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads\ListPopLsb,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm Data) Input;  //_GUI 17,26
 Object Output( NULL Out1) ;  //_GUI 41,17
 Object Output:A( ZTerm LSB) ;  //_GUI 41,26
 Object ( NULL Out1) NULL;  //_GUI 23,38

 // Behavior Topology
 Output.0 = NULL.0;  //_GUI 33,18
 Output:A.0 = Input.0;  
}

Object ( Variant LSBList, Variant LSBList) Show_Cat_PushLsb_Same( Variant MSB
    , Variant In2, Variant In3, Variant LSB, Variant In5
    , Variant MSB, Variant In2, Variant In3, Variant LSB
    , Variant In10) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 32,23
 Object ( Variant In2) Input:A;  //_GUI 32,26
 Object ( Variant In3) Input:B;  //_GUI 32,29
 Object ( Variant LSB) Input:C;  //_GUI 32,32
 Object ( Variant In5) Input:D;  //_GUI 32,39
 Object ( Variant MSB) Input:E;  //_GUI 33,48
 Object ( Variant In2) Input:F;  //_GUI 33,51
 Object ( Variant In3) Input:G;  //_GUI 33,54
 Object ( Variant LSB) Input:H;  //_GUI 33,57
 Object ( Variant In10) Input:I;  //_GUI 33,63
 Object Output( Variant LSBList) ;  //_GUI 87,25
 Object Output:A( Variant LSBList) ;  //_GUI 94,50
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 68,23
 //_Attributes Documentation="ztlist"
 Object Text;  //_GUI 35,16,These two examples do the same thing.
 Object Text;  //_GUI 57,32,The PushLsb puts an element on the LSB end of a 4 element ZTList producing a 5 element ZTList.
 Object Text;  //_GUI 61,57,The Cat combines two ZTLists into one.  In this case, the Lo ZTList is only one element.  We end up with a 5 element ZTList.
 Object ( Variant Out1) Cat( Variant Hi, Variant Lo) ;  //_GUI 63,48
 //_Attributes Documentation="ztlist/ztlist"
 Object ( Variant ZTList) NewZTList( Variant LSB) ;  //_GUI 39,61
 //_Attributes Documentation="single element"
 Object ( Variant ZTList) NewZTList:A( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 38,22
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 56,23
 //_Attributes Documentation="ztl/var"
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 75,48
 //_Attributes Documentation="ztlist"
 Object ( Variant ZTList) NewZTList:B( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 39,47

 // Behavior Topology
 Output.0 = ZTListToLSBList.0;  
 Output:A.0 = ZTListToLSBList:A.0;  
 ZTListToLSBList.0 = PushLsb.0;  
 Cat.0 = NewZTList:B.0;  
 Cat.1 = NewZTList.0;  //_GUI 57,53, 57,64
 NewZTList.0 = Input:I.0;  
 NewZTList:A.0 = Input.0;  
 NewZTList:A.1 = Input:A.0;  
 NewZTList:A.2 = Input:B.0;  
 NewZTList:A.3 = Input:C.0;  
 PushLsb.0 = NewZTList:A.0;  
 PushLsb.1 = Input:D.0;  //_GUI 53,28, 53,40
 ZTListToLSBList:A.0 = Cat.0;  
 NewZTList:B.0 = Input:E.0;  
 NewZTList:B.1 = Input:F.0;  
 NewZTList:B.2 = Input:G.0;  
 NewZTList:B.3 = Input:H.0;  
}

Object ( Variant LSBList, Variant LSBList, Variant LSBList
    , Variant LSB, Variant LSBList, Variant LSBList, Variant LSBList
    , Variant LSBList, Variant LSB, Variant LSBList) Show_Cat_PushLsb_Diff( Variant MSB
    , Variant In2, Variant In3, Variant LSB, Variant MSB
    , Variant LSB, Variant MSB, Variant In2, Variant In3
    , Variant LSB, Variant MSB, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 20,21
 Object ( Variant In2) Input:A;  //_GUI 20,24
 Object ( Variant In3) Input:B;  //_GUI 20,27
 Object ( Variant LSB) Input:C;  //_GUI 20,30
 Object ( Variant MSB) Input:D;  //_GUI 20,37
 Object ( Variant LSB) Input:E;  //_GUI 20,40
 Object ( Variant MSB) Input:F;  //_GUI 20,48
 Object ( Variant In2) Input:G;  //_GUI 20,51
 Object ( Variant In3) Input:H;  //_GUI 20,54
 Object ( Variant LSB) Input:I;  //_GUI 20,57
 Object ( Variant MSB) Input:J;  //_GUI 20,64
 Object ( Variant LSB) Input:K;  //_GUI 20,67
 Object Output( Variant LSBList) ;  //_GUI 97,6
 Object Output:A( Variant LSBList) ;  //_GUI 97,9
 Object Output:B( Variant LSBList) ;  //_GUI 97,12
 Object Output:C( Variant LSB) ;  //_GUI 97,15
 Object Output:D( Variant LSBList) ;  //_GUI 96,23
 Object Output:E( Variant LSBList) ;  //_GUI 115,33
 Object Output:F( Variant LSBList) ;  //_GUI 115,36
 Object Output:G( Variant LSBList) ;  //_GUI 115,39
 Object Output:H( Variant LSB) ;  //_GUI 115,42
 Object Output:I( Variant LSBList) ;  //_GUI 112,50
 Object Text;  //_GUI 48,57,The Cat combines two ZTLists into one.  In this case, we get a 6 element ZTList.
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant LSB) ;  //_GUI 26,36
 Object ( Variant ZTList) NewZTList:A( Variant MSB, Variant LSB) ;  //_GUI 26,63
 Object ( Variant Remnant, Variant Out1, Variant Out1
    , Variant Out1, Variant LSB) ListPopLsb( Variant In1) ;  //_GUI 64,2
 //_Attributes Documentation="var"
 Object ( Variant ZTList) NewZTList:B( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 26,47
 Object Text;  //_GUI 45,30,The PushLsb puts a 2 element ZTList as the LSB element of a 5 element ZTList.
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 44,21
 //_Attributes Documentation="ztl/var"
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 93,48
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 78,4
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:B( Variant ZTList) ;  //_GUI 78,7
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:C( Variant ZTList) ;  //_GUI 78,10
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:D( Variant ZTList) ;  //_GUI 78,13
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 63,23
 Object ( Variant Remnant, Variant Out1, Variant Out1
    , Variant Out1, Variant LSB) ListPopLsb:A( Variant In1) ;  //_GUI 82,29
 //_Attributes Documentation="var"
 Object ( Variant Out1) Cat( Variant Hi, Variant Lo) ;  //_GUI 47,48
 //_Attributes Documentation="ztlist/ztlist"
 Object ( Variant ZTList) NewZTList:C( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 26,20
 Object ( Variant LSBList) ZTListToLSBList:E( Variant ZTList) ;  //_GUI 77,21
 //_Attributes Documentation="ztlist"
 Object Text;  //_GUI 23,15,These two examples do different things.
 Object ( Variant LSBList) ZTListToLSBList:F( Variant ZTList) ;  //_GUI 96,31
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:G( Variant ZTList) ;  //_GUI 96,34
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:H( Variant ZTList) ;  //_GUI 96,37
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:I( Variant ZTList) ;  //_GUI 96,40
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:A
    ( Variant In0) ;  //_GUI 81,50

 // Behavior Topology
 Output.0 = ZTListToLSBList:A.0;  
 Output:A.0 = ZTListToLSBList:B.0;  
 Output:B.0 = ZTListToLSBList:C.0;  
 Output:C.0 = ZTListToLSBList:D.0;  
 Output:D.0 = ZTListToLSBList:E.0;  
 Output:E.0 = ZTListToLSBList:F.0;  
 Output:F.0 = ZTListToLSBList:G.0;  
 Output:G.0 = ZTListToLSBList:H.0;  
 Output:H.0 = ZTListToLSBList:I.0;  
 Output:I.0 = ZTListToLSBList.0;  
 NewZTList.0 = Input:D.0;  
 NewZTList.1 = Input:E.0;  
 NewZTList:A.0 = Input:J.0;  
 NewZTList:A.1 = Input:K.0;  
 ListPopLsb.0 = Junction.0;  
 NewZTList:B.0 = Input:F.0;  
 NewZTList:B.1 = Input:G.0;  
 NewZTList:B.2 = Input:H.0;  
 NewZTList:B.3 = Input:I.0;  
 PushLsb.0 = NewZTList:C.0;  
 PushLsb.1 = NewZTList.0;  //_GUI 41,26, 41,39
 ZTListToLSBList.0 = Junction:A.1;  
 ZTListToLSBList:A.0 = ListPopLsb.1;  
 ZTListToLSBList:B.0 = ListPopLsb.2;  
 ZTListToLSBList:C.0 = ListPopLsb.3;  
 ZTListToLSBList:D.0 = ListPopLsb.4;  
 Junction.0 = PushLsb.0;  
 ListPopLsb:A.0 = Junction:A.0;  
 Cat.0 = NewZTList:B.0;  
 Cat.1 = NewZTList:A.0;  //_GUI 44,53, 44,66
 NewZTList:C.0 = Input.0;  
 NewZTList:C.1 = Input:A.0;  
 NewZTList:C.2 = Input:B.0;  
 NewZTList:C.3 = Input:C.0;  
 ZTListToLSBList:E.0 = Junction.1;  
 ZTListToLSBList:F.0 = ListPopLsb:A.1;  
 ZTListToLSBList:G.0 = ListPopLsb:A.2;  
 ZTListToLSBList:H.0 = ListPopLsb:A.3;  
 ZTListToLSBList:I.0 = ListPopLsb:A.4;  
 Junction:A.0 = Cat.0;  
}

Object ( Variant Data, Variant Data, Variant Data
    , Variant Data, Variant Data) Show_List_Mux( LSB008 Data, Bit Sel
    , LSB008 Data, LSB008 Data, LSB002 Sel, LSB008 Data
    , LSB008 Data, LSB008 Data, LSB008 Data, MSB004 Sel
    , LSB008 Data, LSB008 Data, MSB002 Sel, LSB008 Data
    , LSB008 Data, MSB002 Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( LSB008 Data) Input;  //_GUI 47,26
 Object ( Bit Sel) Input:A;  //_GUI 47,29
 Object ( LSB008 Data) Input:B;  //_GUI 47,36
 Object ( LSB008 Data) Input:C;  //_GUI 47,39
 Object ( LSB002 Sel) Input:D;  //_GUI 61,43
 Object ( LSB008 Data) Input:E;  //_GUI 47,50
 Object ( LSB008 Data) Input:F;  //_GUI 47,53
 Object ( LSB008 Data) Input:G;  //_GUI 47,56
 Object ( LSB008 Data) Input:H;  //_GUI 47,59
 Object ( MSB004 Sel) Input:I;  //_GUI 47,66
 Object ( LSB008 Data) Input:J;  //_GUI 47,81
 Object ( LSB008 Data) Input:K;  //_GUI 47,84
 Object ( MSB002 Sel) Input:L;  //_GUI 47,91
 Object ( LSB008 Data) Input:M;  //_GUI 47,98
 Object ( LSB008 Data) Input:N;  //_GUI 47,101
 Object ( MSB002 Sel) Input:O;  //_GUI 47,108
 Object Output( Variant Data) ;  //_GUI 65,27
 Object Output:A( Variant Data) ;  //_GUI 79,41
 Object Output:B( Variant Data) ;  //_GUI 80,64
 Object Output:C( Variant Data) ;  //_GUI 80,89
 Object Output:D( Variant Data) ;  //_GUI 80,106
 Object ( Variant Out1) Bit_List( Variant In1) ;  //_GUI 54,64
 Object ( List Out1) PackMSB( Variant In1, Variant In2
    , Variant In3, Variant In4) ;  //_GUI 54,49
 Object Text;  //_GUI 10,50,Sel can be list or not as long as Data and Sel are ordered the same.
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant LSB) ;  //_GUI 54,80
 Object ( List Out) ListOut( Variant In1, Variant In2) ;  //_GUI 53,35
 Object ( Variant Data) List_Mux( Variant Data, Variant Sel) ;  //_GUI 53,25
 //_Attributes Documentation="List/Var"
 Object ( Variant ZTList) NewZTList:A( Variant MSB, Variant LSB) ;  //_GUI 54,97
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 54,106
 //_Attributes Documentation="var"
 Object ( Variant Data) List_Mux:A( Variant Data, Variant Sel) ;  //_GUI 68,104
 //_Attributes Documentation="Template"
 Object ( Variant Data) List_Mux:B( Variant Data, Variant Sel) ;  //_GUI 68,87
 //_Attributes Documentation="Template"
 Object ( Variant Data) List_Mux:C( Variant Data, Variant Sel) ;  //_GUI 68,62
 //_Attributes Documentation="Template"
 Object ( Variant Data) List_Mux:D( Variant Data, Variant Sel) ;  //_GUI 67,39
 //_Attributes Documentation="Template"

 // Behavior Topology
 Output.0 = List_Mux.0;  
 Output:A.0 = List_Mux:D.0;  
 Output:B.0 = List_Mux:C.0;  
 Output:C.0 = List_Mux:B.0;  
 Output:D.0 = List_Mux:A.0;  
 Bit_List.0 = Input:I.0;  
 PackMSB.0 = Input:E.0;  
 PackMSB.1 = Input:F.0;  
 PackMSB.2 = Input:G.0;  
 PackMSB.3 = Input:H.0;  
 NewZTList.0 = Input:J.0;  
 NewZTList.1 = Input:K.0;  
 ListOut.0 = Input:C.0;  
 ListOut.1 = Input:B.0;  
 List_Mux.0 = Input.0;  
 List_Mux.1 = Input:A.0;  
 NewZTList:A.0 = Input:M.0;  
 NewZTList:A.1 = Input:N.0;  
 Bit_ZTList.0 = Input:O.0;  
 List_Mux:A.0 = NewZTList:A.0;  //_GUI 66,106
 List_Mux:A.1 = Bit_ZTList.0;  
 List_Mux:B.0 = NewZTList.0;  //_GUI 66,89
 List_Mux:B.1 = Input:L.0;  
 List_Mux:C.0 = PackMSB.0;  //_GUI 65,64
 List_Mux:C.1 = Bit_List.0;  
 List_Mux:D.0 = ListOut.0;  //_GUI 66,41, 66,38
 List_Mux:D.1 = Input:D.0;  
}

Object ( Variant 1of2_outer, Variant 1of4_inner, Variant 1of2_outerAnd1of4_inner) Show_List_Mux_2D_Data
    ( LSB008 Data7, LSB008 Data6, LSB008 Data5, LSB008 Data4
    , LSB008 Data3, LSB008 Data2, LSB008 Data1, LSB008 Data0
    , MSB002 Sel, MSB004 Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( LSB008 Data7) Input;  //_GUI 38,21
 Object ( LSB008 Data6) Input:A;  //_GUI 38,24
 Object ( LSB008 Data5) Input:B;  //_GUI 38,27
 Object ( LSB008 Data4) Input:C;  //_GUI 38,30
 Object ( LSB008 Data3) Input:D;  //_GUI 38,36
 Object ( LSB008 Data2) Input:E;  //_GUI 38,39
 Object ( LSB008 Data1) Input:F;  //_GUI 38,42
 Object ( LSB008 Data0) Input:G;  //_GUI 38,45
 Object ( MSB002 Sel) Input:H;  //_GUI 26,52
 Object ( MSB004 Sel) Input:I;  //_GUI 26,67
 Object Output( Variant 1of2_outer) ;  //_GUI 112,50
 //_Attributes WidgetLeft=240
 Object Output:A( Variant 1of4_inner) ;  //_GUI 112,63
 //_Attributes WidgetLeft=240
 Object Output:B( Variant 1of2_outerAnd1of4_inner) ;  //_GUI 112,94
 //_Attributes WidgetLeft=240
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 44,20
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 93,48
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 32,50
 //_Attributes Documentation="var"
 Object ( Variant Data) List_Mux( Variant Data, Variant Sel) ;  //_GUI 80,61
 //_Attributes Documentation="List/Var"
 Object ( Variant Out1) Bit_ZTList:A( Variant In1) ;  //_GUI 32,65
 //_Attributes Documentation="var"
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 93,61
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In1) ;  //_GUI 75,49
 Object Text;  //_GUI 43,15,4 element list
 Object Text;  //_GUI 62,24,2 element list of 4 element lists
 Object Text;  //_GUI 148,47,Outputs a 4 element list.Select between Data0,1,2,3 or Data4,5,6,7
 Object Text;  //_GUI 148,63,Outputs a 2 element list.Select between Data0,4 or Data1,5 or Data 2,6 or Data3,7
 Object ( NULL Out1) NULL;  //_GUI 49,57
 Object ( Variant ZTList) NewZTList:A( Variant MSB, Variant LSB) ;  //_GUI 61,63
 Object ( Variant ZTList) NewZTList:B( Variant MSB, Variant LSB) ;  //_GUI 61,94
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:A
    ( Variant In0) ;  //_GUI 44,67
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:B
    ( Variant In0) ;  //_GUI 47,52
 Object ( Variant Data) List_Mux:A( Variant Data, Variant Sel) ;  //_GUI 80,92
 //_Attributes Documentation="List/Var"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:C
    ( Variant In1) ;  //_GUI 75,62
 Object ( Variant Data) List_Mux:B( Variant Data, Variant Sel) ;  //_GUI 80,48
 //_Attributes Documentation="List/Var"
 Object ( Variant ZTList) NewZTList:C( Variant MSB, Variant LSB) ;  //_GUI 59,33
 Object ( Variant ZTList) NewZTList:D( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 44,35
 Object Text;  //_GUI 50,72,Generate a 2 element list where each element is a list selector mask for a dimension. A NULL for a selector means don't select at this level (passthrough).
 Object Text;  //_GUI 50,103,Generate a 2 element list where each element is a selector for a dimension.
 Object Text;  //_GUI 148,93,Outputs a single element.Select between Data0-7

 // Behavior Topology
 Output.0 = ZTListToLSBList.0;  
 Output:A.0 = ZTListToLSBList:A.0;  
 Output:B.0 = List_Mux:A.0;  
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  
 ZTListToLSBList.0 = List_Mux:B.0;  
 Bit_ZTList.0 = Input:H.0;  
 List_Mux.0 = Junction:C.1;  
 List_Mux.1 = NewZTList:A.0;  
 Bit_ZTList:A.0 = Input:I.0;  
 ZTListToLSBList:A.0 = List_Mux.0;  
 Junction.0 = NewZTList:C.0;  //_GUI 76,36
 NewZTList:A.0 = NULL.0;  //_GUI 59,65
 NewZTList:A.1 = Junction:A.1;  
 NewZTList:B.0 = Junction:B.2;  //_GUI 48,96
 NewZTList:B.1 = Junction:A.2;  //_GUI 45,99
 Junction:A.0 = Bit_ZTList:A.0;  
 Junction:B.0 = Bit_ZTList.0;  
 List_Mux:A.0 = Junction:C.2;  //_GUI 76,94
 List_Mux:A.1 = NewZTList:B.0;  
 Junction:C.0 = Junction.2;  
 List_Mux:B.0 = Junction.1;  
 List_Mux:B.1 = Junction:B.1;  
 NewZTList:C.0 = NewZTList.0;  //_GUI 58,35, 58,23
 NewZTList:C.1 = NewZTList:D.0;  
 NewZTList:D.0 = Input:D.0;  
 NewZTList:D.1 = Input:E.0;  
 NewZTList:D.2 = Input:F.0;  
 NewZTList:D.3 = Input:G.0;  
}

Object ( Variant 1of2_outer, Variant 1of4_inner, Variant 1of2_outerAnd1of4_inner) Show_List_Mux_Sel_2D_Data
    ( LSB008 Data7, LSB008 Data6, LSB008 Data5, LSB008 Data4
    , LSB008 Data3, LSB008 Data2, LSB008 Data1, LSB008 Data0
    , Bit SelOuter, MSB002 SelInner) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( LSB008 Data7) Input;  //_GUI 33,21
 Object ( LSB008 Data6) Input:A;  //_GUI 33,24
 Object ( LSB008 Data5) Input:B;  //_GUI 33,27
 Object ( LSB008 Data4) Input:C;  //_GUI 33,30
 Object ( LSB008 Data3) Input:D;  //_GUI 33,36
 Object ( LSB008 Data2) Input:E;  //_GUI 33,39
 Object ( LSB008 Data1) Input:F;  //_GUI 33,42
 Object ( LSB008 Data0) Input:G;  //_GUI 33,45
 Object ( Bit SelOuter) Input:H;  //_GUI 33,50
 Object ( MSB002 SelInner) Input:I;  //_GUI 33,61
 Object Output( Variant 1of2_outer) ;  //_GUI 114,48
 //_Attributes WidgetTop=450,WidgetLeft=240
 Object Output:A( Variant 1of4_inner) ;  //_GUI 114,57
 //_Attributes WidgetLeft=240,WidgetTop=500
 Object Output:B( Variant 1of2_outerAnd1of4_inner) ;  //_GUI 114,94
 //_Attributes WidgetLeft=240,WidgetTop=555
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 44,35
 Object ( Variant ZTList) NewZTList:A( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 44,20
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 95,46
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In1) ;  //_GUI 70,47
 Object Text;  //_GUI 43,15,4 element list
 Object Text;  //_GUI 62,24,2 element list of 4 element lists
 Object Text;  //_GUI 144,47,Outputs a 4 element list.Select between Data0,1,2,3 or Data4,5,6,7
 Object ( Variant Data) List_Mux_Sel( Variant ListData, Variant Sel) ;  //_GUI 78,46
 Object ( Variant ZTList) NewZTList:B( Variant MSB, Variant LSB) ;  //_GUI 59,33
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 95,55
 //_Attributes Documentation="ztlist"
 Object Text;  //_GUI 144,57,Outputs a 2 element list.Select between Data0,4 or Data1,5 or Data 2,6 or Data3,7
 Object Text;  //_GUI 45,70,Generate a 2 element list where each element is a selector for a dimension. A NULL for a selector means don't select at this level (passthrough).
 Object ( Variant Data) List_Mux_Sel:A( Variant ListData, Variant Sel) ;  //_GUI 78,55
 Object ( Variant ZTList) NewZTList:C( Variant MSB, Variant LSB) ;  //_GUI 56,57
 Object ( NULL Out1) NULL;  //_GUI 44,53
 Object Text;  //_GUI 144,93,Outputs a single element.Select between Data0-7
 Object Text;  //_GUI 44,103,Generate a 2 element list where each element is a selector for a dimension.
 Object ( Variant Data) List_Mux_Sel:B( Variant ListData, Variant Sel) ;  //_GUI 78,92
 Object ( Variant ZTList) NewZTList:D( Variant MSB, Variant LSB) ;  //_GUI 56,94
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:A
    ( Variant In1) ;  //_GUI 70,56
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:B
    ( Bit In0) ;  //_GUI 42,50
 Object ( MSB002 Out1, MSB002 Out2, MSB002 Out3) Junction:C
    ( MSB002 In0) ;  //_GUI 39,61

 // Behavior Topology
 Output.0 = ZTListToLSBList.0;  
 Output:A.0 = ZTListToLSBList:A.0;  
 Output:B.0 = List_Mux_Sel:B.0;  
 NewZTList.0 = Input:D.0;  
 NewZTList.1 = Input:E.0;  
 NewZTList.2 = Input:F.0;  
 NewZTList.3 = Input:G.0;  
 NewZTList:A.0 = Input.0;  
 NewZTList:A.1 = Input:A.0;  
 NewZTList:A.2 = Input:B.0;  
 NewZTList:A.3 = Input:C.0;  
 ZTListToLSBList.0 = List_Mux_Sel.0;  
 Junction.0 = NewZTList:B.0;  
 List_Mux_Sel.0 = Junction.1;  
 List_Mux_Sel.1 = Junction:B.1;  
 NewZTList:B.0 = NewZTList:A.0;  //_GUI 58,35, 58,23
 NewZTList:B.1 = NewZTList.0;  
 ZTListToLSBList:A.0 = List_Mux_Sel:A.0;  
 List_Mux_Sel:A.0 = Junction:A.1;  
 List_Mux_Sel:A.1 = NewZTList:C.0;  
 NewZTList:C.0 = NULL.0;  //_GUI 56,58, 54,58
 NewZTList:C.1 = Junction:C.1;  
 List_Mux_Sel:B.0 = Junction:A.2;  //_GUI 71,94
 List_Mux_Sel:B.1 = NewZTList:D.0;  
 NewZTList:D.0 = Junction:B.2;  //_GUI 43,96
 NewZTList:D.1 = Junction:C.2;  //_GUI 40,99
 Junction:A.0 = Junction.2;  
 Junction:B.0 = Input:H.0;  
 Junction:C.0 = Input:I.0;  
}

Object ( Variant ZTList) NewZTList( NULL MSB, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList,Documentation="NULL/var"
{
 //_ Object Prototypes
 Object ( NULL MSB) Input;  //_GUI 11,20
 Object ( Variant LSB) Input:A;  //_GUI 11,31
 Object Output( Variant ZTList) ;  //_GUI 50,21
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 38,19
 //_Attributes Documentation="ztl/var"
 Object ( Variant ZTList) NewZTList( Variant LSB) ;  //_GUI 20,18
 //_Attributes Documentation="single element"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input:A.0;  //_GUI 34,24, 34,32
 NewZTList.0 = Input.0;  
}

Object ( Variant ZTList) NewZTList( NULL MSB, NULL LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList,Documentation="NULL/NULL"
{
 //_ Object Prototypes
 Object ( NULL MSB) Input;  //_GUI 11,20
 Object ( NULL LSB) Input:A;  //_GUI 11,31
 Object Output( Variant ZTList) ;  //_GUI 50,21
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 38,19
 //_Attributes Documentation="ztl/var"
 Object ( Variant ZTList) NewZTList( Variant LSB) ;  //_GUI 20,18
 //_Attributes Documentation="single element"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input:A.0;  //_GUI 34,24, 34,32
 NewZTList.0 = Input.0;  
}

Object ( Variant ZTList) NewZTList( Variant MSB, NULL LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack\$NewZTList,Documentation="var/NULL"
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( NULL LSB) Input:A;  //_GUI 11,31
 Object Output( Variant ZTList) ;  //_GUI 50,21
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 38,19
 //_Attributes Documentation="ztl/var"
 Object ( Variant ZTList) NewZTList( Variant LSB) ;  //_GUI 20,18
 //_Attributes Documentation="single element"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = NewZTList.0;  
 PushLsb.1 = Input:A.0;  //_GUI 34,24, 34,32
 NewZTList.0 = Input.0;  
}

Object ( Variant Out1) PushMsb( NULL MSB, ZTList In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="NULL/ztlist"
{
 //_ Object Prototypes
 Object ( NULL MSB) Input;  //_GUI 25,27
 Object ( ZTList In2) Input:A;  //_GUI 25,31
 Object Output( Variant Out1) ;  //_GUI 71,31
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 31,29
 //_Attributes Documentation="list"
 Object Text;  //_GUI 25,46,Pop off LSBs until we get to the MSB.(We do this because zero terminated lists are implemented in LSB order.)
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 58,29
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 43,26
 //_Attributes Documentation="var/zterm"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input:A.0;  
 PushLsb.0 = PushMsb.0;  //_GUI 56,31, 56,29
 PushLsb.1 = PopLsb.1;  
 PushMsb.0 = Input.0;  
 PushMsb.1 = PopLsb.0;  
}

Object ( Variant Out1) PushMsb( NULL MSB, ZTerm In2) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="NULL/zterm"
{
 //_ Object Prototypes
 Object ( NULL MSB) Input;  //_GUI 25,26
 Object ( ZTerm In2) Input:A;  //_GUI 25,31
 Object Output( Variant Out1) ;  //_GUI 82,24
 Object Text;  //_GUI 25,42,We are now at the most significant end of the list, put the new element on.
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 55,22
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = Input:A.0;  //_GUI 42,24, 42,32
 PushLsb.1 = Input.0;  
}

Object ( Variant Data) $List_Mux_Sel_ZTList( ZTList ListData, ZTList Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTList/ZTList"
{
 //_ Object Prototypes
 Object ( ZTList ListData) Input;  //_GUI 41,35
 Object ( ZTList Sel) Input:A;  //_GUI 40,87
 Object Output( Variant Data) ;  //_GUI 194,80
 Object Text;  //_GUI 35,20,An N-dimention mux
 Object ( Variant Data) List_Mux_Sel( Variant ListData, Variant Sel) ;  //_GUI 126,79
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 79,33
 //_Attributes Documentation="list"
 Object ( Variant Data) List_Mux_Sel:A( Variant ListData, Variant Sel) ;  //_GUI 126,33
 Object ( NULL Out1) NULL;  //_GUI 99,37
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 148,77
 //_Attributes Documentation="NULL/var"
 Object ( Variant Data) List_Mux_Sel:B( Variant ListData, Variant Sel) ;  //_GUI 164,78
 Object Text;  //_GUI 103,49,Replace the select for our dimension with a NULL to tell the rest of the list not to multiplex in our dimension.  We are going to do it after we gather all of the elements in our dimension back together.  The rest of the list must still multiplex deeper dimensions.
 Object Text;  //_GUI 126,94,Send the next dimension (which is an element in our dimension) the select for its dimension.
 Object Text;  //_GUI 149,58,Gather the elements in our dimension so that they can be multiplexed.
 Object Text;  //_GUI 78,95,Remove the Sel for our dimension so we can perform a Select our dimension after the deeper dimensions have been selected.
 Object Text;  //_GUI 162,94,Select the element within our dimension and output it.  This must be done after the deeper dimensions have already been selected.
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 79,85
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 112,38
 //_Attributes Documentation="var/NULL"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In3) ;  //_GUI 97,83
 Object Text;  //_GUI 45,128,A single dimension Sel ZTList is used to select a subset of the ListData wich is multi-dimensional.  The Most Significant element (MSB) in the Sel list is used to select the element in the outermost dimension (the current dimension).  This is similar to memory addresses in that the most significant bits do the more corse selecting.

 // Behavior Topology
 Output.0 = List_Mux_Sel:B.0;  
 List_Mux_Sel.0 = PopLsb.1;  //_GUI 95,81, 95,38
 List_Mux_Sel.1 = Junction.2;  
 PopLsb.0 = Input.0;  
 List_Mux_Sel:A.0 = PopLsb.0;  
 List_Mux_Sel:A.1 = PushMsb.0;  //_GUI 125,38, 125,41
 PushLsb.0 = List_Mux_Sel:A.0;  //_GUI 144,79, 144,36
 PushLsb.1 = List_Mux_Sel.0;  
 List_Mux_Sel:B.0 = PushLsb.0;  
 List_Mux_Sel:B.1 = PopMsb.0;  //_GUI 164,87
 PopMsb.0 = Input:A.0;  
 PushMsb.0 = NULL.0;  
 PushMsb.1 = Junction.1;  //_GUI 110,43, 110,44, 98,44
 Junction.0 = PopMsb.1;  //_GUI 98,90
}

Object ( ZTerm Data) $List_Mux_Sel_ZTList( ZTerm ListData, ZTList Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTerm/ZTList"
{
 //_ Object Prototypes
 Object ( ZTerm ListData) Input;  //_GUI 41,35
 Object ( ZTList Sel) Input:A;  //_GUI 41,41
 Object Output( ZTerm Data) ;  //_GUI 59,35
 Object Text;  //_GUI 35,20,An N-dimention mux.  We have come to the end of one of our dimensions

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( NULL MSB, ZTerm Out1) $PopMsb( ZTerm In1
    , NULL In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/NULL"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 13,18
 Object ( NULL In1) Input:A;  //_GUI 13,27
 Object Output( NULL MSB) ;  //_GUI 78,15
 Object Output:A( ZTerm Out1) ;  //_GUI 78,25
 Object Text;  //_GUI 16,7,We are now at the MSB end of the list, output the MSB and pass down the terminator.

 // Behavior Topology
 Output.0 = Input:A.0;  //_GUI 33,16, 33,28
 Output:A.0 = Input.0;  //_GUI 40,26, 40,19
}

Object ( Variant Data) List_Mux( ZTList ListData, ZTList Mask) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTList/ZTList"
{
 //_ Object Prototypes
 Object ( ZTList ListData) Input;  //_GUI 42,40
 Object ( ZTList Mask) Input:A;  //_GUI 42,44
 Object Output( Variant Data) ;  //_GUI 77,41
 Object Text;  //_GUI 35,20,An N-dimention mux
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 48,42
 //_Attributes Documentation="list"
 Object ( Variant Data) $List_Mux_SS( Variant Data, Variant SelMSB
    , Variant Sel) ;  //_GUI 60,39
 //_Attributes Documentation="ztlist/ztlist/var"

 // Behavior Topology
 Output.0 = $List_Mux_SS.0;  
 PopMsb.0 = Input:A.0;  
 $List_Mux_SS.0 = Input.0;  
 $List_Mux_SS.1 = PopMsb.0;  
 $List_Mux_SS.2 = PopMsb.1;  
}

Object ( Variant Data) $List_Mux_SS( ZTList Data, ZTList SelMSB
    , ZTList Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/ztlist/ztlist"
{
 //_ Object Prototypes
 Object ( ZTList Data) Input;  //_GUI 27,32
 Object ( ZTList SelMSB) Input:A;  //_GUI 27,41
 Object ( ZTList Sel) Input:B;  //_GUI 27,47
 Object Output( Variant Data) ;  //_GUI 109,41
 Object Text;  //_GUI 28,67,Data is our N-dimension dataSelMSB is our selector of or current dimension (the outer most dimension of Data).  In this overload, SelMSB is a ZTList and not a Bit.  So we know that Data has more than one dimension that we are selecting on.Sel is the rest of the Selects for the rest of the dimensions.
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 33,30
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 78,38
 //_Attributes Documentation="var/NULL"
 Object ( Variant Data) List_Mux( Variant Data, Variant Sel) ;  //_GUI 57,30
 //_Attributes Documentation="Template"
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction
    ( ZTList In0) ;  //_GUI 52,47
 Object ( NULL Out1) NULL;  //_GUI 39,41
 Object ( Variant Data) List_Mux:A( Variant Data, Variant Sel) ;  //_GUI 97,39
 //_Attributes Documentation="Template"
 Object ( Variant Data) $List_Mux_SS( Variant Data, Variant SelMSB
    , Variant Sel) ;  //_GUI 57,40
 //_Attributes Documentation="ztlist/ztlist/var"
 Object Text;  //_GUI 97,48,Applies SelMSB to the current dimension
 Object Text;  //_GUI 78,28,Gather all of the elements of the current dimension
 Object Text;  //_GUI 42,54,Don't select on the current dimension while recursing through the rest of the elements in the current dimension.
 Object Text;  //_GUI 52,20,Applies Sel for the current element of the current dimension.
 Object Text;  //_GUI 28,102,The behavior when the select element is a ZTListt is to select the deeper dimensions then select the current dimension.  This is different behavior than is needed when the element is a Bit.  This is why we need the special $List_Mux_SS object, so we can overload on SelMSB.

 // Behavior Topology
 Output.0 = List_Mux:A.0;  
 PopMsb.0 = Input.0;  
 PushMsb.0 = List_Mux.0;  //_GUI 75,40, 75,33
 PushMsb.1 = $List_Mux_SS.0;  
 List_Mux.0 = PopMsb.0;  
 List_Mux.1 = Junction.0;  //_GUI 53,35
 Junction.0 = Input:B.0;  
 List_Mux:A.0 = PushMsb.0;  
 List_Mux:A.1 = Input:A.0;  //_GUI 94,44, 94,52, 35,52, 35,42
 $List_Mux_SS.0 = PopMsb.1;  //_GUI 50,42, 50,35
 $List_Mux_SS.1 = NULL.0;  //_GUI 49,45
 $List_Mux_SS.2 = Junction.1;  
}

Object ( Variant Data) $List_Mux_SS( ZTList Data, Bit SelMSB
    , ZTList Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/bit/ztlist"
{
 //_ Object Prototypes
 Object ( ZTList Data) Input;  //_GUI 30,31
 Object ( Bit SelMSB) Input:A;  //_GUI 30,38
 Object ( ZTList Sel) Input:B;  //_GUI 30,51
 Object Output( Variant Data) ;  //_GUI 88,46
 Object Text;  //_GUI 28,72,Data is our current dimension of data.SelMSB is the selector for this dimension.  In this case it is a bit meaning we are either passing through or not passing through this current element.Sel, in this case,  is the rest of the list of bits that select the rest of the elements.
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 36,29
 //_Attributes Documentation="list"
 Object ( Variant Data) List_Mux( Variant Data, Variant Sel) ;  //_GUI 62,29
 //_Attributes Documentation="Template"
 Object ( Variant MSB, Variant Out2) PopMsb:A( Variant In1) ;  //_GUI 36,49
 //_Attributes Documentation="list"
 Object ( Variant Data) $List_Mux_SS( Variant Data, Variant SelMSB
    , Variant Sel) ;  //_GUI 57,46
 //_Attributes Documentation="ztlist/ztlist/var"
 Object ( Variant Out1) OR( Variant In1, Variant In2) ;  //_GUI 76,44
 Object Text;  //_GUI 28,108,The behavior when the select element is a bit is to mask and then OR the data in this dimension.  This is different behavior than is needed when the element is a ZTList.  This is why we need the special $List_Mux_SS object, so we can overload on SelMSB.
 Object Text;  //_GUI 61,19,Mask the current element of this dimension
 Object Text;  //_GUI 57,58,Do the rest of this dimension.
 Object Text;  //_GUI 77,52,Or the results in this dimension.  Only one should pass through at a time assuming only one Sel bit is high.

 // Behavior Topology
 Output.0 = OR.0;  
 PopMsb.0 = Input.0;  
 List_Mux.0 = PopMsb.0;  
 List_Mux.1 = Input:A.0;  //_GUI 56,34, 56,39
 PopMsb:A.0 = Input:B.0;  
 $List_Mux_SS.0 = PopMsb.1;  //_GUI 50,48, 50,34
 $List_Mux_SS.1 = PopMsb:A.0;  
 $List_Mux_SS.2 = PopMsb:A.1;  
 OR.0 = List_Mux.0;  //_GUI 74,46, 74,32
 OR.1 = $List_Mux_SS.0;  
}

Object ( Variant Data) $List_Mux_SS( Variant Data, Variant SelMSB
    , ZTerm Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="var/var/zterm"
{
 //_ Object Prototypes
 Object ( Variant Data) Input;  //_GUI 30,30
 Object ( Variant SelMSB) Input:A;  //_GUI 30,40
 Object ( ZTerm Sel) Input:B;  //_GUI 30,44
 Object Output( Variant Data) ;  //_GUI 70,31
 Object Text;  //_GUI 29,51,We are at the end of this dimension.
 Object ( Variant Data) List_Mux( Variant Data, Variant Sel) ;  //_GUI 58,29
 //_Attributes Documentation="Template"

 // Behavior Topology
 Output.0 = List_Mux.0;  
 List_Mux.0 = Input.0;  
 List_Mux.1 = Input:A.0;  //_GUI 55,34, 55,41
}

Object ( Variant Data) $List_Mux_SS( ZTList Data, NULL SelMSB
    , Variant Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/NULL/var"
{
 //_ Object Prototypes
 Object ( ZTList Data) Input;  //_GUI 27,32
 Object ( NULL SelMSB) Input:A;  //_GUI 27,44
 Object ( Variant Sel) Input:B;  //_GUI 27,47
 Object Output( Variant Data) ;  //_GUI 109,40
 Object Text;  //_GUI 29,73,The SelMSB of NULL tells us that we are not selecting in this dimension.  But we still need to select in the deeper dimensions.
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 33,30
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 78,38
 //_Attributes Documentation="var/NULL"
 Object ( Variant Data) List_Mux( Variant Data, Variant Sel) ;  //_GUI 57,30
 //_Attributes Documentation="Template"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 52,47
 Object ( Variant Data) $List_Mux_SS( Variant Data, Variant SelMSB
    , Variant Sel) ;  //_GUI 57,40
 //_Attributes Documentation="ztlist/ztlist/var"
 Object Text;  //_GUI 55,23,Select the element's deeper dimensions
 Object Text;  //_GUI 56,52,Do the same for the other elements in this dimension.
 Object Text;  //_GUI 78,47,Gather the elements in this dimension, but don't select.

 // Behavior Topology
 Output.0 = PushMsb.0;  
 PopMsb.0 = Input.0;  
 PushMsb.0 = List_Mux.0;  //_GUI 75,40, 75,33
 PushMsb.1 = $List_Mux_SS.0;  
 List_Mux.0 = PopMsb.0;  
 List_Mux.1 = Junction.0;  //_GUI 53,35
 Junction.0 = Input:B.0;  
 $List_Mux_SS.0 = PopMsb.1;  //_GUI 50,42, 50,35
 $List_Mux_SS.1 = Input:A.0;  
 $List_Mux_SS.2 = Junction.1;  
}

Object ( Variant Data) $List_Mux_SS( ZTList Data, Bit SelMSB
    , ZTerm Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/bit/zterm"
{
 //_ Object Prototypes
 Object ( ZTList Data) Input;  //_GUI 30,31
 Object ( Bit SelMSB) Input:A;  //_GUI 30,38
 Object ( ZTerm Sel) Input:B;  //_GUI 30,51
 Object Output( Variant Data) ;  //_GUI 79,31
 Object Text;  //_GUI 29,58,We are at the end of the selector mask list.
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 36,29
 //_Attributes Documentation="list"
 Object ( Variant Data) List_Mux( Variant Data, Variant Sel) ;  //_GUI 62,29
 //_Attributes Documentation="Template"
 Object ( Bit Out1) IsZTerm( Variant In1) ;  //_GUI 52,45
 //_Attributes Documentation="zterm"
 Object ( Bit Out) INVERT( Bit In1) ;  //_GUI 64,45
 Object Output:A( Bit Trap) ;  //_GUI 76,47
 //_Attributes Trap="Number of elements in Data doesn't match number of bits in selector"

 // Behavior Topology
 Output.0 = List_Mux.0;  
 PopMsb.0 = Input.0;  
 List_Mux.0 = PopMsb.0;  
 List_Mux.1 = Input:A.0;  //_GUI 56,34, 56,39
 IsZTerm.0 = PopMsb.1;  //_GUI 50,48, 50,34
 INVERT.0 = IsZTerm.0;  
 Output:A.0 = INVERT.0;  
}

Object ( ZTerm Data) $List_Mux_SS( ZTerm Data, NULL SelMSB
    , Variant Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/NULL/var"
{
 //_ Object Prototypes
 Object ( ZTerm Data) Input;  //_GUI 27,32
 Object ( NULL SelMSB) Input:A;  //_GUI 27,44
 Object ( Variant Sel) Input:B;  //_GUI 27,47
 Object Output( ZTerm Data) ;  //_GUI 109,40
 Object Text;  //_GUI 29,73,We have reached the end of our data in this dimension (which we are not selecting from among due to the NULL SelMSB).

 // Behavior Topology
 Output.0 = Input.0;  //_GUI 70,41, 70,33
}

Object ( Variant Out1, Variant Out2, Variant "LsbOutIsLsbIn+1"
    , Variant LsbOutIsLsbIn, Variant "LsbOutIsLsbIn+1", Variant LsbOutIsLsbIn) Show_Interleave_and_EveryOther( Variant "LsbInIsLsbOut+1"
    , Variant LsbInIsLsbOut) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant "LsbInIsLsbOut+1") Input;  //_GUI 15,42
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=49
 Object ( Variant LsbInIsLsbOut) Input:A;  //_GUI 15,45
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=49
 Object Output( Variant Out1) ;  //_GUI 93,43
 Object Output:A( Variant Out2) ;  //_GUI 93,53
 Object Output:B( Variant "LsbOutIsLsbIn+1") ;  //_GUI 110,65
 Object Output:C( Variant LsbOutIsLsbIn) ;  //_GUI 110,68
 Object Output:D( Variant "LsbOutIsLsbIn+1") ;  //_GUI 110,74
 Object Output:E( Variant LsbOutIsLsbIn) ;  //_GUI 110,77
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 30,56
 //_Attributes Documentation="var"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 21,45
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:A
    ( Variant In0) ;  //_GUI 25,42
 Object ( Variant "LsbOutIsLsbIn+1", Variant LsbOutIsLsbIn) EveryOther( Variant In1) ;  //_GUI 73,64
 Object ( Variant "LsbOutIsLsbIn+1", Variant LsbOutIsLsbIn) EveryOther:A( Variant In1) ;  //_GUI 73,73
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:B
    ( Variant In0) ;  //_GUI 70,43
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:C
    ( Variant In0) ;  //_GUI 67,53
 Object ( Variant Out1) Interleave( Variant "LsbInIsLsbOut+1", Variant LsbInIsLsbOut) ;  //_GUI 48,51
 //_Attributes Documentation="zterm/zterm"
 Object ( Variant Out1) Bit_ZTList:A( Variant In1) ;  //_GUI 30,48
 //_Attributes Documentation="var"
 Object ( Variant Out1) Interleave:A( Variant "LsbInIsLsbOut+1", Variant LsbInIsLsbOut) ;  //_GUI 48,41
 //_Attributes Documentation="zterm/zterm"
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 74,51
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 91,72
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:B( Variant ZTList) ;  //_GUI 91,75
 //_Attributes Documentation="ztlist"
 Object Text;  //_GUI 10,10,LsbInIsLsbOut+1 =
 Object Text;  //_GUI 30,10,E  D  C  B  A
 Object Text;  //_GUI 10,14,LsbInIsLsbOut     =
 Object Text;  //_GUI 30,14,EArial,8,0,4
 Object Text;  //_GUI 32,14,DArial,8,0,4
 Object Text;  //_GUI 35,14,CArial,8,0,4
 Object Text;  //_GUI 38,14,BArial,8,0,4
 Object Text;  //_GUI 40,14,AArial,8,0,4
 Object ( Variant Out1) Interleave:B( Variant "LsbInIsLsbOut+1", Variant LsbInIsLsbOut) ;  //_GUI 44,10
 //_Attributes Documentation="zterm/zterm"
 Object Text;  //_GUI 64,12,E
 Object Text;  //_GUI 67,12,EArial,8,0,4
 Object Text;  //_GUI 73,12,DArial,8,0,4
 Object Text;  //_GUI 70,12,D
 Object Text;  //_GUI 76,12,C
 Object Text;  //_GUI 79,12,CArial,8,0,4
 Object Text;  //_GUI 82,12,B
 Object Text;  //_GUI 85,12,BArial,8,0,4
 Object Text;  //_GUI 88,12,A
 Object Text;  //_GUI 91,12,AArial,8,0,4
 Object ( Variant "LsbOutIsLsbIn+1", Variant LsbOutIsLsbIn) EveryOther:B( Variant In1) ;  //_GUI 44,21
 Object Text;  //_GUI 11,22,E
 Object Text;  //_GUI 14,22,EArial,8,0,4
 Object Text;  //_GUI 20,22,DArial,8,0,4
 Object Text;  //_GUI 17,22,D
 Object Text;  //_GUI 23,22,C
 Object Text;  //_GUI 26,22,CArial,8,0,4
 Object Text;  //_GUI 29,22,B
 Object Text;  //_GUI 32,22,BArial,8,0,4
 Object Text;  //_GUI 35,22,A
 Object Text;  //_GUI 38,22,AArial,8,0,4
 Object Text;  //_GUI 64,21,E  D  C  B  A
 Object Text;  //_GUI 64,26,EArial,8,0,4
 Object Text;  //_GUI 66,26,DArial,8,0,4
 Object Text;  //_GUI 69,26,CArial,8,0,4
 Object Text;  //_GUI 72,26,BArial,8,0,4
 Object Text;  //_GUI 74,26,AArial,8,0,4

 // Behavior Topology
 Output.0 = Junction:B.1;  
 Output:A.0 = ZTListToLSBList.0;  
 Output:B.0 = EveryOther.0;  
 Output:C.0 = EveryOther.1;  
 Output:D.0 = ZTListToLSBList:A.0;  
 Output:E.0 = ZTListToLSBList:B.0;  
 Bit_ZTList.0 = Junction.2;  //_GUI 22,59
 Junction.0 = Input:A.0;  
 Junction:A.0 = Input.0;  
 EveryOther.0 = Junction:B.2;  //_GUI 71,67
 EveryOther:A.0 = Junction:C.2;  //_GUI 68,76
 Junction:B.0 = Interleave:A.0;  
 Junction:C.0 = Interleave.0;  
 Interleave.0 = Bit_ZTList:A.0;  //_GUI 45,53, 45,51
 Interleave.1 = Bit_ZTList.0;  //_GUI 45,56, 45,59
 Bit_ZTList:A.0 = Junction:A.2;  //_GUI 26,51
 Interleave:A.0 = Junction:A.1;  
 Interleave:A.1 = Junction.1;  
 ZTListToLSBList.0 = Junction:C.1;  
 ZTListToLSBList:A.0 = EveryOther:A.0;  
 ZTListToLSBList:B.0 = EveryOther:A.1;  
}

Object ( ZTerm Out1) BitLength( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 27,20
 Object Output( ZTerm Out1) ;  //_GUI 40,20

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant 1D_ZTList_Size, Variant 2D_ZTList_Size) Show_ZTList_Size_and_BitLength( Variant MSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 21,19
 Object Output( Variant 1D_ZTList_Size) ;  //_GUI 123,20
 Object Output:A( Variant 2D_ZTList_Size) ;  //_GUI 123,27
 Object ( Variant Out1) BitLength( Variant Type) ;  //_GUI 91,25
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant LSB) ;  //_GUI 32,18
 Object ( Variant Out1) NewZTList:A( Variant MSB, Variant In2
    , Variant LSB) ;  //_GUI 50,25
 Object ( Variant ZTList) NewZTList:B( Variant MSB, Variant LSB) ;  //_GUI 32,27
 Object ( Variant ZTList) NewZTList:C( Variant MSB, Variant LSB) ;  //_GUI 32,36
 Object ( Variant Out1) ZTList_Size( Variant In1) ;  //_GUI 77,25
 //_Attributes Documentation="Leaf(Var)"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 27,19
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:A
    ( Variant In1) ;  //_GUI 27,37
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:B
    ( Variant In1) ;  //_GUI 27,31
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:C
    ( Variant In1) ;  //_GUI 27,28
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:D
    ( Variant In1) ;  //_GUI 27,22
 Object Text;  //_GUI 122,35,Outputs (2,3)
 Object ( Variant Out1) ZTList_Size:A( Variant In1) ;  //_GUI 77,18
 //_Attributes Documentation="Leaf(Var)"
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 104,25
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) BitLength:A( Variant Type) ;  //_GUI 91,18
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 104,18
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction:E
    ( Variant In0) ;  //_GUI 46,20
 Object Text;  //_GUI 28,52,These objects work (ZTList_Size and BitLength) work well only with congruent lists and may not work with multi-dimensional heterogenous lists.Arial,8,255,1

 // Behavior Topology
 Output.0 = ZTListToLSBList:A.0;  
 Output:A.0 = ZTListToLSBList.0;  
 BitLength.0 = ZTList_Size.0;  
 NewZTList.0 = Junction.1;  
 NewZTList.1 = Junction:D.1;  
 NewZTList:A.0 = Junction:E.2;  //_GUI 47,27
 NewZTList:A.1 = NewZTList:B.0;  
 NewZTList:A.2 = NewZTList:C.0;  //_GUI 47,33, 47,39
 NewZTList:B.0 = Junction:C.1;  
 NewZTList:B.1 = Junction:B.1;  
 NewZTList:C.0 = Junction:A.1;  
 NewZTList:C.1 = Junction:A.2;  //_GUI 28,41
 ZTList_Size.0 = NewZTList:A.0;  
 Junction.0 = Input.0;  
 Junction:A.0 = Junction:B.2;  
 Junction:B.0 = Junction:C.2;  
 Junction:C.0 = Junction:D.2;  
 Junction:D.0 = Junction.2;  
 ZTList_Size:A.0 = Junction:E.1;  
 ZTListToLSBList.0 = BitLength.0;  
 BitLength:A.0 = ZTList_Size:A.0;  
 ZTListToLSBList:A.0 = BitLength:A.0;  
 Junction:E.0 = NewZTList.0;  
}

Object Show_SameListStruct
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( List Out1) PackMSB( Variant In1, Variant In2
    , Variant In3, Variant In4) ;  //_GUI 36,22
 Object ( List Out1) PackMSB:A( Variant In1, Variant In2
    , Variant In3, Variant In4) ;  //_GUI 36,38
 Object ( LSB003 In) Input;  //_GUI 30,23
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:A;  //_GUI 30,26
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:B;  //_GUI 30,29
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:C;  //_GUI 30,32
 //_Attributes Constant="*0"
 Object ( Bit In) Input:D;  //_GUI 30,39
 //_Attributes Constant="*0"
 Object ( Bit In) Input:E;  //_GUI 30,42
 //_Attributes Constant="*0"
 Object ( Bit In) Input:F;  //_GUI 30,45
 //_Attributes Constant="*0"
 Object ( Bit In) Input:G;  //_GUI 30,48
 //_Attributes Constant="*0"
 Object ( Bit Out1) SameListStruct( Variant In1, Variant In2) ;  //_GUI 54,31
 //_Attributes Documentation="list/list"
 Object ( Bit Out) INVERT( Bit In1) ;  //_GUI 71,31
 Object Output( Bit Trap) ;  //_GUI 85,33
 //_Attributes Trap="Trap 1: List structures differ."
 Object ( List Out1) PackMSB:B( Variant In1, Variant In2
    , Variant In3, Variant In4) ;  //_GUI 36,70
 Object ( LSB003 In) Input:H;  //_GUI 30,55
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:I;  //_GUI 30,58
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:J;  //_GUI 30,61
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:K;  //_GUI 30,64
 //_Attributes Constant="*0"
 Object ( Bit In) Input:L;  //_GUI 30,71
 //_Attributes Constant="*0"
 Object ( Bit In) Input:M;  //_GUI 30,74
 //_Attributes Constant="*0"
 Object ( Bit In) Input:N;  //_GUI 30,77
 //_Attributes Constant="*0"
 Object ( Bit In) Input:O;  //_GUI 30,80
 //_Attributes Constant="*0"
 Object ( Bit Out1) SameListStruct:A( Variant In1, Variant In2) ;  //_GUI 54,63
 //_Attributes Documentation="list/list"
 Object ( Bit Out) INVERT:A( Bit In1) ;  //_GUI 71,63
 Object Output:A( Bit Trap) ;  //_GUI 85,65
 //_Attributes Trap="Trap 2: List structures differ."
 Object Text;  //_GUI 82,25,Should not trap.
 Object ( List Out1) PackLSB( Variant In1, Variant In2
    , Variant In3, Variant In4) ;  //_GUI 36,54
 Object Text;  //_GUI 81,57,Should trap.
 Object ( LSB003 In) Input:P;  //_GUI 30,87
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:Q;  //_GUI 30,90
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:R;  //_GUI 30,93
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:S;  //_GUI 30,96
 //_Attributes Constant="*0"
 Object ( Bit In) Input:T;  //_GUI 30,103
 //_Attributes Constant="*0"
 Object ( Bit In) Input:U;  //_GUI 30,106
 //_Attributes Constant="*0"
 Object ( Bit In) Input:V;  //_GUI 30,109
 //_Attributes Constant="*0"
 Object ( Bit In) Input:W;  //_GUI 30,112
 //_Attributes Constant="*0"
 Object ( Bit Out1) SameListStruct:B( Variant In1, Variant In2) ;  //_GUI 54,95
 //_Attributes Documentation="list/list"
 Object ( Bit Out) INVERT:B( Bit In1) ;  //_GUI 71,95
 Object Output:B( Bit Trap) ;  //_GUI 85,97
 //_Attributes Trap="Trap 3: List structures differ."
 Object ( List Out1) PackLSB:A( Variant In1, Variant In2
    , Variant In3, Variant In4) ;  //_GUI 36,86
 Object Text;  //_GUI 81,89,Should trap.
 Object ( List Out1) PackLSB:B( Variant In1, Variant In2
    , Variant In3, Variant In4, Variant In5) ;  //_GUI 36,102
 Object ( Bit In) Input:X;  //_GUI 30,115
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:Y;  //_GUI 30,122
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:Z;  //_GUI 30,125
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:a;  //_GUI 30,128
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:b;  //_GUI 30,131
 //_Attributes Constant="*0"
 Object ( Bit In) Input:c;  //_GUI 30,138
 //_Attributes Constant="*0"
 Object ( Bit In) Input:d;  //_GUI 30,141
 //_Attributes Constant="*0"
 Object ( Bit In) Input:e;  //_GUI 30,144
 //_Attributes Constant="*0"
 Object ( Bit In) Input:f;  //_GUI 30,147
 //_Attributes Constant="*0"
 Object ( Bit Out1) SameListStruct:C( Variant In1, Variant In2) ;  //_GUI 54,130
 //_Attributes Documentation="list/list"
 Object ( Bit Out) INVERT:C( Bit In1) ;  //_GUI 71,130
 Object Output:C( Bit Trap) ;  //_GUI 85,132
 //_Attributes Trap="Trap 4: List structures differ."
 Object Text;  //_GUI 81,124,Should not trap.
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 36,121
 Object ( Variant ZTList) NewZTList:A( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 36,137
 Object ( Bit In) Input:AA;  //_GUI 30,170
 //_Attributes Constant="*0"
 Object ( Bit In) Input:BA;  //_GUI 30,173
 //_Attributes Constant="*0"
 Object ( Bit In) Input:CA;  //_GUI 30,176
 //_Attributes Constant="*0"
 Object ( Bit In) Input:DA;  //_GUI 30,179
 //_Attributes Constant="*0"
 Object ( Bit Out1) SameListStruct:D( Variant In1, Variant In2) ;  //_GUI 54,162
 //_Attributes Documentation="list/list"
 Object ( Bit Out) INVERT:D( Bit In1) ;  //_GUI 71,162
 Object Output:D( Bit Trap) ;  //_GUI 85,164
 //_Attributes Trap="Trap 5: List structures differ."
 Object Text;  //_GUI 81,156,Should trap.
 Object ( Variant ZTList) NewZTList:B( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 36,153
 Object ( Variant ZTList) NewZTList:C( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 36,169
 Object ( LSB003 In) Input:EA;  //_GUI 16,154
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:FA;  //_GUI 16,157
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:GA;  //_GUI 16,160
 //_Attributes Constant="*0"
 Object ( LSB003 In) Input:HA;  //_GUI 16,163
 //_Attributes Constant="*0"
 Object ( Variant ZTList) NewZTList:D( Variant LSB) ;  //_GUI 22,152
 //_Attributes Documentation="single element"
 Object ( Variant ZTList) NewZTList:E( Variant LSB) ;  //_GUI 22,155
 //_Attributes Documentation="single element"
 Object ( Variant ZTList) NewZTList:F( Variant LSB) ;  //_GUI 22,158
 //_Attributes Documentation="single element"
 Object ( Variant ZTList) NewZTList:G( Variant LSB) ;  //_GUI 22,161
 //_Attributes Documentation="single element"

 // Behavior Topology
 PackMSB.0 = Input.0;  
 PackMSB.1 = Input:A.0;  
 PackMSB.2 = Input:B.0;  
 PackMSB.3 = Input:C.0;  
 PackMSB:A.0 = Input:D.0;  
 PackMSB:A.1 = Input:E.0;  
 PackMSB:A.2 = Input:F.0;  
 PackMSB:A.3 = Input:G.0;  
 SameListStruct.0 = PackMSB.0;  //_GUI 49,33, 49,25
 SameListStruct.1 = PackMSB:A.0;  //_GUI 49,36, 49,41
 INVERT.0 = SameListStruct.0;  
 Output.0 = INVERT.0;  
 PackMSB:B.0 = Input:L.0;  
 PackMSB:B.1 = Input:M.0;  
 PackMSB:B.2 = Input:N.0;  
 PackMSB:B.3 = Input:O.0;  
 SameListStruct:A.0 = PackLSB.0;  //_GUI 49,65, 49,57
 SameListStruct:A.1 = PackMSB:B.0;  //_GUI 49,68, 49,73
 INVERT:A.0 = SameListStruct:A.0;  
 Output:A.0 = INVERT:A.0;  
 PackLSB.0 = Input:H.0;  
 PackLSB.1 = Input:I.0;  
 PackLSB.2 = Input:J.0;  
 PackLSB.3 = Input:K.0;  
 SameListStruct:B.0 = PackLSB:A.0;  //_GUI 49,97, 49,89
 SameListStruct:B.1 = PackLSB:B.0;  //_GUI 49,100, 49,105
 INVERT:B.0 = SameListStruct:B.0;  
 Output:B.0 = INVERT:B.0;  
 PackLSB:A.0 = Input:P.0;  
 PackLSB:A.1 = Input:Q.0;  
 PackLSB:A.2 = Input:R.0;  
 PackLSB:A.3 = Input:S.0;  
 PackLSB:B.0 = Input:T.0;  
 PackLSB:B.1 = Input:U.0;  
 PackLSB:B.2 = Input:V.0;  
 PackLSB:B.3 = Input:W.0;  
 PackLSB:B.4 = Input:X.0;  
 SameListStruct:C.0 = NewZTList.0;  //_GUI 51,132, 51,124
 SameListStruct:C.1 = NewZTList:A.0;  //_GUI 51,135, 51,140
 INVERT:C.0 = SameListStruct:C.0;  
 Output:C.0 = INVERT:C.0;  
 NewZTList.0 = Input:Y.0;  
 NewZTList.1 = Input:Z.0;  
 NewZTList.2 = Input:a.0;  
 NewZTList.3 = Input:b.0;  
 NewZTList:A.0 = Input:c.0;  
 NewZTList:A.1 = Input:d.0;  
 NewZTList:A.2 = Input:e.0;  
 NewZTList:A.3 = Input:f.0;  
 SameListStruct:D.0 = NewZTList:B.0;  //_GUI 51,164, 51,156
 SameListStruct:D.1 = NewZTList:C.0;  //_GUI 51,167, 51,172
 INVERT:D.0 = SameListStruct:D.0;  
 Output:D.0 = INVERT:D.0;  
 NewZTList:B.0 = NewZTList:D.0;  
 NewZTList:B.1 = NewZTList:E.0;  
 NewZTList:B.2 = NewZTList:F.0;  
 NewZTList:B.3 = NewZTList:G.0;  
 NewZTList:C.0 = Input:AA.0;  
 NewZTList:C.1 = Input:BA.0;  
 NewZTList:C.2 = Input:CA.0;  
 NewZTList:C.3 = Input:DA.0;  
 NewZTList:D.0 = Input:EA.0;  
 NewZTList:E.0 = Input:FA.0;  
 NewZTList:F.0 = Input:GA.0;  
 NewZTList:G.0 = Input:HA.0;  
}

Object ( Variant Out1) ReverseList( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTList"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 12,22
 Object Output( Variant Out1) ;  //_GUI 100,23
 Object ( Variant Out1) ReverseList( Variant In1) ;  //_GUI 50,19
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 18,20
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 87,21
 //_Attributes Documentation="var/zterm"

 // Behavior Topology
 Output.0 = PushMsb.0;  
 ReverseList.0 = PopLsb.0;  
 PopLsb.0 = Input.0;  
 PushMsb.0 = PopLsb.1;  //_GUI 87,15, 35,15, 35,25
 PushMsb.1 = ReverseList.0;  //_GUI 76,26, 76,22
}

Object ( ZTerm Out1) ReverseList( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTerm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 28,14
 Object Output( ZTerm Out1) ;  //_GUI 35,14

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant Out1, Variant Out2, Variant Out3
    , Variant LSB) Show_ZT_ReverseList( Variant MSB, Variant In2, Variant In3
    , Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 10,22
 Object ( Variant In2) Input:A;  //_GUI 10,25
 Object ( Variant In3) Input:B;  //_GUI 10,28
 Object ( Variant LSB) Input:C;  //_GUI 10,31
 Object Output( Variant Out1) ;  //_GUI 71,25
 Object Output:A( Variant Out2) ;  //_GUI 71,28
 Object Output:B( Variant Out3) ;  //_GUI 70,31
 Object Output:C( Variant LSB) ;  //_GUI 71,34
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 15,21
 Object ( Variant Out1) ReverseList( Variant In1) ;  //_GUI 38,21
 //_Attributes Documentation="ZTList"
 Object ( Variant Out1, Variant Out11, Variant Out12
    , Variant Out13, Variant LSB) ListPopLsb( Variant In1) ;  //_GUI 55,21
 //_Attributes Documentation="var"
 Object Text;  //_GUI 75,17,Leave a blank for the terminator

 // Behavior Topology
 Output.0 = ListPopLsb.1;  
 Output:A.0 = ListPopLsb.2;  
 Output:B.0 = ListPopLsb.3;  
 Output:C.0 = ListPopLsb.4;  
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  
 ReverseList.0 = NewZTList.0;  
 ListPopLsb.0 = ReverseList.0;  
}

Object ( Variant MSB, ZTList Out1) $PopMsb( ZTList In1
    , Bit In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/bit"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 13,16
 Object ( Bit In1) Input:A;  //_GUI 13,27
 //_Attributes Constant="0"
 Object Output( Variant MSB) ;  //_GUI 78,15
 Object Output:A( ZTList Out1) ;  //_GUI 78,25
 Object ( Variant MSB, Variant Out1) $PopMsb( Variant In1
    , Variant In11) ;  //_GUI 37,14
 //_Attributes Documentation="var/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 23,14
 //_Attributes Documentation="list"
 Object ( ZTList Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 52,23
 //_Attributes Documentation="ztl/var"
 Object Text;  //_GUI 16,7,Pop off LSBs until we get to the MSB.(ZTLists are implemented in LSB order)

 // Behavior Topology
 Output.0 = $PopMsb.0;  
 Output:A.0 = PushLsb.0;  
 $PopMsb.0 = PopLsb.0;  
 $PopMsb.1 = PopLsb.1;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = $PopMsb.1;  //_GUI 50,25, 50,19
 PushLsb.1 = Input:A.0;  
}

Object ( Bit MSB, ZTerm Out1) $PopMsb( ZTerm In1
    , Bit In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/bit"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 13,18
 Object ( Bit In1) Input:A;  //_GUI 13,27
 Object Output( Bit MSB) ;  //_GUI 78,15
 Object Output:A( ZTerm Out1) ;  //_GUI 78,25
 Object Text;  //_GUI 16,7,We are now at the MSB end of the list, output the MSB and pass down the terminator.

 // Behavior Topology
 Output.0 = Input:A.0;  //_GUI 33,16, 33,28
 Output:A.0 = Input.0;  //_GUI 40,26, 40,19
}

Object ( Variant Dim) $ZTListDimensions( ZTList ZTList, Variant Dim) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList ZTList) Input;  //_GUI 16,24
 Object ( Variant Dim) Input:A;  //_GUI 37,42
 Object Output( Variant Dim) ;  //_GUI 105,40
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 51,41
 //_Attributes Documentation="var/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 22,22
 //_Attributes Documentation="var"
 Object ( Bit LSB) Input:B;  //_GUI 45,45
 //_Attributes Constant="*0"
 Object ( Variant Dim) $ZTListDimensions( Variant ZTList, Variant Dim) ;  //_GUI 72,32
 //_Attributes Documentation="ztlist"
 Object ( Variant Out) $Select( Variant "#0", Variant "#1"
    , Bit S) ;  //_GUI 62,19
 Object ( Bit Out1) IsNULL( Variant In1) ;  //_GUI 44,24
 //_Attributes Documentation="NULL"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 38,26
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 47,9
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = $ZTListDimensions.0;  //_GUI 98,41, 98,35
 PushLsb.0 = Input:A.0;  
 PushLsb.1 = Input:B.0;  
 PopLsb.0 = Input.0;  
 $ZTListDimensions.0 = $Select.0;  
 $ZTListDimensions.1 = PushLsb.0;  //_GUI 67,37, 67,44
 $Select.0 = Junction.0;  //_GUI 39,21
 $Select.1 = PopLsb:A.1;  //_GUI 57,24
 $Select.2 = IsNULL.0;  
 IsNULL.0 = Junction.1;  
 Junction.0 = PopLsb.1;  
 PopLsb:A.0 = PopLsb.0;  //_GUI 32,12
}

Object ( Variant Dim) $ZTListDimensions( Variant ZTList, Variant Dim) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="leaf"
{
 //_ Object Prototypes
 Object ( Variant ZTList) Input;  //_GUI 35,31
 Object ( Variant Dim) Input:A;  //_GUI 35,39
 Object Output( Variant Dim) ;  //_GUI 71,39

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Variant Dim) ZTListDimensions( ZTList ZTList) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList ZTList) Input;  //_GUI 17,20
 Object Output( Variant Dim) ;  //_GUI 97,34
 Object ( Bit LSB) Input:A;  //_GUI 51,42
 //_Attributes Constant="*0"
 Object Text;  //_GUI 49,49,Each time we pop off the first node we append a bit to Dim. We do this until the first node is not a ZTlist. This means that we are assuming that dimensions in this list will match the first node, even though there is nothing to enforce that the list be created symmetrically like that.
 Object ( Variant Dim) $ZTListDimensions( Variant ZTList, Variant Dim) ;  //_GUI 60,32
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 23,18
 //_Attributes Documentation="var"
 Object ( Variant Out) $Select( Variant "#0", Variant "#1"
    , Bit S) ;  //_GUI 63,15
 Object ( Bit Out1) IsNULL( Variant In1) ;  //_GUI 45,20
 //_Attributes Documentation="NULL"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 39,22
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 48,5
 //_Attributes Documentation="var"
 Object Text;  //_GUI 81,8,if the first element happens to be a NULL we'll ignore it and pass in the next one

 // Behavior Topology
 Output.0 = $ZTListDimensions.0;  
 $ZTListDimensions.0 = $Select.0;  //_GUI 60,27, 73,27
 $ZTListDimensions.1 = Input:A.0;  //_GUI 55,37
 PopLsb.0 = Input.0;  
 $Select.0 = Junction.0;  //_GUI 40,17
 $Select.1 = PopLsb:A.1;  //_GUI 58,20
 $Select.2 = IsNULL.0;  
 IsNULL.0 = Junction.1;  
 Junction.0 = PopLsb.1;  
 PopLsb:A.0 = PopLsb.0;  //_GUI 33,8
}

Object ( Variant Out1) BitLength( ZTList Type) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList Type) Input;  //_GUI 18,20
 Object Output( Variant Out1) ;  //_GUI 65,20
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 24,18
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 53,18
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) BitLength( Variant Type) ;  //_GUI 39,14
 Object ( Variant Out1) BitLength:A( Variant Type) ;  //_GUI 39,23

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = BitLength.0;  //_GUI 52,20, 52,17
 PushLsb.1 = BitLength:A.0;  //_GUI 52,23, 52,26
 BitLength.0 = PopLsb.0;  //_GUI 37,17, 37,20
 BitLength:A.0 = PopLsb.1;  //_GUI 37,26, 37,23
}

Object ( Variant Out1) DynamicOut( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 13,20
 Object Output( Variant Out1) ;  //_GUI 71,20
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 21,18
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 59,18
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) DynamicOut( Variant In1) ;  //_GUI 38,17
 Object ( Variant Out1) DynamicOut:A( Variant In1) ;  //_GUI 38,25

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = DynamicOut.0;  
 PushLsb.1 = DynamicOut:A.0;  //_GUI 59,28
 DynamicOut.0 = PopLsb.0;  
 DynamicOut:A.0 = PopLsb.1;  //_GUI 31,28
}

Object ( ZTerm Out1) DynamicOut( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 13,20
 Object Output( ZTerm Out1) ;  //_GUI 71,20

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Bit OFL, Variant Out1) StaticOut( Variant Type
    , ZTList Data) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( Variant Type) Input;  //_GUI 29,62
 Object ( ZTList Data) Input:A;  //_GUI 27,80
 Object Output( Bit OFL) ;  //_GUI 109,46
 Object Output:A( Variant Out1) ;  //_GUI 141,71
 Object ( Bit OFL, Variant Out1) StaticOut( Variant Type
    , Variant Data) ;  //_GUI 64,61
 Object ( Bit OFL, Variant Out1) StaticOut:A( Variant Type
    , Variant Data) ;  //_GUI 64,73
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 58,62
 Object ( Bit Out) OR( Bit In1, Bit In2) ;  //_GUI 91,44
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 37,78
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 106,69
 //_Attributes Documentation="ztl/var"

 // Behavior Topology
 Output.0 = OR.0;  
 Output:A.0 = PushLsb.0;  
 StaticOut.0 = Junction.1;  
 StaticOut.1 = PopLsb.0;  //_GUI 56,66, 56,80
 StaticOut:A.0 = Junction.2;  //_GUI 59,75
 StaticOut:A.1 = PopLsb.1;  //_GUI 64,83
 Junction.0 = Input.0;  
 OR.0 = StaticOut.0;  //_GUI 74,46
 OR.1 = StaticOut:A.0;  //_GUI 78,49, 78,75
 PopLsb.0 = Input:A.0;  
 PushLsb.0 = StaticOut.1;  //_GUI 81,71, 81,66
 PushLsb.1 = StaticOut:A.1;  //_GUI 81,74, 81,78
}

Object ( Bit OFL, ZTerm Out1) StaticOut( Variant Type
    , ZTerm Data) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( Variant Type) Input;  //_GUI 29,62
 Object ( ZTerm Data) Input:A;  //_GUI 27,80
 Object Output( Bit OFL) ;  //_GUI 109,46
 Object Output:A( ZTerm Out1) ;  //_GUI 109,69
 Object ( Bit In) Input:B;  //_GUI 103,46
 //_Attributes Constant="*0"

 // Behavior Topology
 Output.0 = Input:B.0;  
 Output:A.0 = Input:A.0;  //_GUI 70,70, 70,81
}

Object ( Bit Out1) DiffListStruct( Variant In1, Variant In2) 
//_Attributes TreeGroup=CoreLib-ZTList\General\SynthInfo
{
 // goes high if the lists do not have the same structure
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 20,15
 Object ( Variant In2) Input:A;  //_GUI 20,18
 Object Output( Bit Out1) ;  //_GUI 54,16
 Object ( Bit Out1) SameListStruct( Variant In1, Variant In2) ;  //_GUI 26,14
 //_Attributes Documentation="ztlist/ztlist"
 Object ( Bit Out) INVERT( Bit In1) ;  //_GUI 43,14

 // Behavior Topology
 Output.0 = INVERT.0;  
 SameListStruct.0 = Input.0;  
 SameListStruct.1 = Input:A.0;  
 INVERT.0 = SameListStruct.0;  
}

Object ( Variant FarEl, Variant OtherEls) StackUnshift( Variant Els) 
//_Attributes TreeGroup=CoreLib-ZTList\General
{
 // Same as PopMsb
 //_ Object Prototypes
 Object ( Variant Els) Input;  //_GUI 20,17
 Object Output( Variant FarEl) ;  //_GUI 41,16
 Object Output:A( Variant OtherEls) ;  //_GUI 41,19
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 27,15
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = PopMsb.0;  
 Output:A.0 = PopMsb.1;  
 PopMsb.0 = Input.0;  
}

Object ( Variant HeadEl, Variant OtherEls) GetHead( Variant Els) 
//_Attributes TreeGroup=CoreLib-ZTList\General
{
 // Same as PopMsb
 //_ Object Prototypes
 Object ( Variant Els) Input;  //_GUI 20,17
 Object Output( Variant HeadEl) ;  //_GUI 41,16
 Object Output:A( Variant OtherEls) ;  //_GUI 41,19
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 27,15
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = PopMsb.0;  
 Output:A.0 = PopMsb.1;  
 PopMsb.0 = Input.0;  
}

Object ( Variant OtherEls, Variant TailEl) GetTail( Variant Els) 
//_Attributes TreeGroup=CoreLib-ZTList\General
{
 // Same as PopLsb and compiles quicker than GetHead
 //_ Object Prototypes
 Object ( Variant Els) Input;  //_GUI 20,17
 Object Output( Variant OtherEls) ;  //_GUI 41,16
 Object Output:A( Variant TailEl) ;  //_GUI 41,19
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 27,15
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = PopLsb.0;  
 Output:A.0 = PopLsb.1;  
 PopLsb.0 = Input.0;  
}

Object ( Variant OtherEls, Variant NearEl) StackPop( Variant Els) 
//_Attributes TreeGroup=CoreLib-ZTList\General
{
 // Same as PopLsb and compiles quicker than StackUnshift
 //_ Object Prototypes
 Object ( Variant Els) Input;  //_GUI 20,17
 Object Output( Variant OtherEls) ;  //_GUI 41,16
 Object Output:A( Variant NearEl) ;  //_GUI 41,19
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 27,15
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = PopLsb.0;  
 Output:A.0 = PopLsb.1;  
 PopLsb.0 = Input.0;  
}

Object ( Variant Els) StackPush( Variant Els, Variant NewEl) 
//_Attributes TreeGroup=CoreLib-ZTList\General
{
 // Same as PushLsb and compiles faster than StackShift
 //_ Object Prototypes
 Object ( Variant Els) Input;  //_GUI 22,22
 Object ( Variant NewEl) Input:A;  //_GUI 22,25
 Object Output( Variant Els) ;  //_GUI 41,23
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 28,21
 //_Attributes Documentation="var/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = Input.0;  
 PushLsb.1 = Input:A.0;  
}

Object ( Variant Els) PutTail( Variant Els, Variant NewEl) 
//_Attributes TreeGroup=CoreLib-ZTList\General
{
 // Same as PushLsb and compiles faster than StackShift
 //_ Object Prototypes
 Object ( Variant Els) Input;  //_GUI 22,22
 Object ( Variant NewEl) Input:A;  //_GUI 22,25
 Object Output( Variant Els) ;  //_GUI 41,23
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 28,21
 //_Attributes Documentation="var/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = Input.0;  
 PushLsb.1 = Input:A.0;  
}

Object ( Variant Els) PutHead( Variant NewEl, Variant Els) 
//_Attributes TreeGroup=CoreLib-ZTList\General
{
 // Same as PushMsb
 //_ Object Prototypes
 Object ( Variant NewEl) Input;  //_GUI 22,22
 Object ( Variant Els) Input:A;  //_GUI 22,25
 Object Output( Variant Els) ;  //_GUI 41,23
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 28,21
 //_Attributes Documentation="var/var"

 // Behavior Topology
 Output.0 = PushMsb.0;  
 PushMsb.0 = Input.0;  
 PushMsb.1 = Input:A.0;  
}

Object ( Variant Els) StackShift( Variant NewEl, Variant Els) 
//_Attributes TreeGroup=CoreLib-ZTList\General
{
 // Same as PushMsb
 //_ Object Prototypes
 Object ( Variant NewEl) Input;  //_GUI 22,22
 Object ( Variant Els) Input:A;  //_GUI 22,25
 Object Output( Variant Els) ;  //_GUI 41,23
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 28,21
 //_Attributes Documentation="var/var"

 // Behavior Topology
 Output.0 = PushMsb.0;  
 PushMsb.0 = Input.0;  
 PushMsb.1 = Input:A.0;  
}

Object ( ZTerm ZTList) PackZTList
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack,Documentation="zero elements"
{
 //_ Object Prototypes
 Object Output( ZTerm ZTList) ;  //_GUI 56,18
 Object ( ZTerm ZTList) NewZTList;  //_GUI 39,16
 //_Attributes Documentation="empty"
 Object ( Bit ForceDrillInWithNonExistantGlobal) Input;  //_GUI 38,26
 //_Attributes Resource=Global

 // Behavior Topology
 Output.0 = NewZTList.0;  
}

Object ( Variant ZTList) PackZTList( Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack,Documentation="single element"
{
 //_ Object Prototypes
 Object ( Variant LSB) Input;  //_GUI 11,26
 Object Output( Variant ZTList) ;  //_GUI 50,26
 Object ( Variant ZTList) NewZTList( Variant LSB) ;  //_GUI 34,24
 //_Attributes Documentation="single element"

 // Behavior Topology
 Output.0 = NewZTList.0;  
 NewZTList.0 = Input.0;  
}

Object ( Variant ZTList) PackZTList( Variant MSB, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack,Documentation="double element"
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant LSB) Input:A;  //_GUI 11,31
 Object Output( Variant ZTList) ;  //_GUI 50,21
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant LSB) ;  //_GUI 34,19

 // Behavior Topology
 Output.0 = NewZTList.0;  
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  //_GUI 24,24, 24,32
}

Object ( Variant Out1) PackZTList( Variant MSB, Variant In2
    , Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack,Documentation="triple element"
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,21
 Object ( Variant In2) Input:A;  //_GUI 11,24
 Object ( Variant LSB) Input:B;  //_GUI 11,31
 Object Output( Variant Out1) ;  //_GUI 50,22
 Object ( Variant Out1) NewZTList( Variant MSB, Variant In2
    , Variant LSB) ;  //_GUI 36,20

 // Behavior Topology
 Output.0 = NewZTList.0;  
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  //_GUI 25,28, 25,32
}

Object ( Variant ZTList) PackZTList( Variant MSB, Variant In2
    , Variant In3, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack,Documentation="quad element"
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant In2) Input:A;  //_GUI 11,23
 Object ( Variant In3) Input:B;  //_GUI 11,26
 Object ( Variant LSB) Input:C;  //_GUI 11,31
 Object Output( Variant ZTList) ;  //_GUI 56,21
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant LSB) ;  //_GUI 35,19

 // Behavior Topology
 Output.0 = NewZTList.0;  
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  //_GUI 27,30, 27,32
}

Object ( Variant ZTList) PackZTList( Variant MSB, Variant In2
    , Variant In3, Variant In3, Variant In3, Variant In3
    , Variant In3, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack,Documentation="octal"
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant In2) Input:A;  //_GUI 11,23
 Object ( Variant In3) Input:B;  //_GUI 11,26
 Object ( Variant In3) Input:C;  //_GUI 11,29
 Object ( Variant In3) Input:D;  //_GUI 11,32
 Object ( Variant In3) Input:E;  //_GUI 11,35
 Object ( Variant In3) Input:F;  //_GUI 11,38
 Object ( Variant LSB) Input:G;  //_GUI 11,41
 Object Output( Variant ZTList) ;  //_GUI 53,21
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In31, Variant In32, Variant In33
    , Variant In34, Variant LSB) ;  //_GUI 40,19

 // Behavior Topology
 Output.0 = NewZTList.0;  
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList.2 = Input:B.0;  
 NewZTList.3 = Input:C.0;  
 NewZTList.4 = Input:D.0;  
 NewZTList.5 = Input:E.0;  
 NewZTList.6 = Input:F.0;  
 NewZTList.7 = Input:G.0;  
}

Object ( Variant ZTList) PackZTList( Variant MSB, Variant In2
    , Variant In3, Variant In3, Variant In3, Variant In3
    , Variant In3, Variant In2, Variant In2, Variant In3
    , Variant In3, Variant In3, Variant In3, Variant In3
    , Variant In3, Variant LSB) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack,Documentation="16"
{
 //_ Object Prototypes
 Object ( Variant MSB) Input;  //_GUI 11,20
 Object ( Variant In2) Input:A;  //_GUI 11,23
 Object ( Variant In3) Input:B;  //_GUI 11,26
 Object ( Variant In3) Input:C;  //_GUI 11,29
 Object ( Variant In3) Input:D;  //_GUI 11,32
 Object ( Variant In3) Input:E;  //_GUI 11,35
 Object ( Variant In3) Input:F;  //_GUI 11,38
 Object ( Variant In2) Input:G;  //_GUI 11,41
 Object ( Variant In2) Input:H;  //_GUI 11,47
 Object ( Variant In3) Input:I;  //_GUI 11,50
 Object ( Variant In3) Input:J;  //_GUI 11,53
 Object ( Variant In3) Input:K;  //_GUI 11,56
 Object ( Variant In3) Input:L;  //_GUI 11,59
 Object ( Variant In3) Input:M;  //_GUI 11,62
 Object ( Variant In3) Input:N;  //_GUI 11,65
 Object ( Variant LSB) Input:O;  //_GUI 11,68
 Object Output( Variant ZTList) ;  //_GUI 98,42
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant In2
    , Variant In3, Variant In31, Variant In32, Variant In33
    , Variant In34, Variant LSB) ;  //_GUI 39,46
 Object ( Variant ZTList) NewZTList:A( Variant MSB, Variant In2
    , Variant In3, Variant In31, Variant In32, Variant In33
    , Variant In34, Variant LSB) ;  //_GUI 40,19
 Object ( Variant Out1) Cat( Variant Hi, Variant Lo) ;  //_GUI 86,40
 //_Attributes Documentation="ztlist/ztlist"

 // Behavior Topology
 Output.0 = Cat.0;  
 NewZTList.0 = Input:H.0;  
 NewZTList.1 = Input:I.0;  
 NewZTList.2 = Input:J.0;  
 NewZTList.3 = Input:K.0;  
 NewZTList.4 = Input:L.0;  
 NewZTList.5 = Input:M.0;  
 NewZTList.6 = Input:N.0;  
 NewZTList.7 = Input:O.0;  
 NewZTList:A.0 = Input.0;  
 NewZTList:A.1 = Input:A.0;  
 NewZTList:A.2 = Input:B.0;  
 NewZTList:A.3 = Input:C.0;  
 NewZTList:A.4 = Input:D.0;  
 NewZTList:A.5 = Input:E.0;  
 NewZTList:A.6 = Input:F.0;  
 NewZTList:A.7 = Input:G.0;  
 Cat.0 = NewZTList:A.0;  //_GUI 69,42, 69,22
 Cat.1 = NewZTList.0;  //_GUI 68,45, 68,49
}

Object ( Variant Out1, Variant LSB) UnpackZTList( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 28,16
 Object Output( Variant Out1) ;  //_GUI 48,18
 Object Output:A( Variant LSB) ;  //_GUI 48,21
 Object ( Variant Out1, Variant Out11, Variant LSB) ListPopLsb
    ( Variant In1) ;  //_GUI 34,14
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = ListPopLsb.1;  
 Output:A.0 = ListPopLsb.2;  
 ListPopLsb.0 = Input.0;  
}

Object ( Variant Out1, Variant Out1, Variant LSB) UnpackZTList
    ( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 27,13
 Object Output( Variant Out1) ;  //_GUI 48,15
 Object Output:A( Variant Out1) ;  //_GUI 48,18
 Object Output:B( Variant LSB) ;  //_GUI 48,21
 Object ( Variant Out1, Variant Out11, Variant Out12
    , Variant LSB) ListPopLsb( Variant In1) ;  //_GUI 34,11
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = ListPopLsb.1;  
 Output:A.0 = ListPopLsb.2;  
 Output:B.0 = ListPopLsb.3;  
 ListPopLsb.0 = Input.0;  
}

Object ( Variant Out1, Variant Out1, Variant Out1
    , Variant LSB) UnpackZTList( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 26,23
 Object Output( Variant Out1) ;  //_GUI 48,25
 Object Output:A( Variant Out1) ;  //_GUI 48,28
 Object Output:B( Variant Out1) ;  //_GUI 48,31
 Object Output:C( Variant LSB) ;  //_GUI 48,34
 Object ( Variant Out1, Variant Out11, Variant Out12
    , Variant Out13, Variant LSB) ListPopLsb( Variant In1) ;  //_GUI 34,21
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = ListPopLsb.1;  
 Output:A.0 = ListPopLsb.2;  
 Output:B.0 = ListPopLsb.3;  
 Output:C.0 = ListPopLsb.4;  
 ListPopLsb.0 = Input.0;  
}

Object ( Variant Out1, Variant Out1, Variant Out1
    , Variant Out1, Variant Out1, Variant Out1, Variant Out1
    , Variant LSB) UnpackZTList( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 28,11
 Object Output( Variant Out1) ;  //_GUI 48,13
 Object Output:A( Variant Out1) ;  //_GUI 48,16
 Object Output:B( Variant Out1) ;  //_GUI 48,19
 Object Output:C( Variant Out1) ;  //_GUI 48,22
 Object Output:D( Variant Out1) ;  //_GUI 48,25
 Object Output:E( Variant Out1) ;  //_GUI 48,28
 Object Output:F( Variant Out1) ;  //_GUI 48,31
 Object Output:G( Variant LSB) ;  //_GUI 48,34
 Object ( Variant Out1, Variant Out11, Variant Out12
    , Variant Out13, Variant Out14, Variant Out15, Variant Out16
    , Variant Out17, Variant LSB) ListPopLsb( Variant In1) ;  //_GUI 34,9
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = ListPopLsb.1;  
 Output:A.0 = ListPopLsb.2;  
 Output:B.0 = ListPopLsb.3;  
 Output:C.0 = ListPopLsb.4;  
 Output:D.0 = ListPopLsb.5;  
 Output:E.0 = ListPopLsb.6;  
 Output:F.0 = ListPopLsb.7;  
 Output:G.0 = ListPopLsb.8;  
 ListPopLsb.0 = Input.0;  
}

Object ( Variant Out1, Variant Out1, Variant Out1
    , Variant Out1, Variant Out1, Variant Out1, Variant Out1
    , Variant Out1, Variant Out1, Variant Out1, Variant Out1
    , Variant Out1, Variant Out1, Variant Out1, Variant Out1
    , Variant LSB) UnpackZTList( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 31,5
 Object Output( Variant Out1) ;  //_GUI 51,7
 Object Output:A( Variant Out1) ;  //_GUI 51,10
 Object Output:B( Variant Out1) ;  //_GUI 51,13
 Object Output:C( Variant Out1) ;  //_GUI 51,16
 Object Output:D( Variant Out1) ;  //_GUI 51,19
 Object Output:E( Variant Out1) ;  //_GUI 51,22
 Object Output:F( Variant Out1) ;  //_GUI 51,25
 Object Output:G( Variant Out1) ;  //_GUI 51,28
 Object Output:H( Variant Out1) ;  //_GUI 51,31
 Object Output:I( Variant Out1) ;  //_GUI 51,34
 Object Output:J( Variant Out1) ;  //_GUI 51,37
 Object Output:K( Variant Out1) ;  //_GUI 51,40
 Object Output:L( Variant Out1) ;  //_GUI 51,43
 Object Output:M( Variant Out1) ;  //_GUI 51,46
 Object Output:N( Variant Out1) ;  //_GUI 51,49
 Object Output:O( Variant LSB) ;  //_GUI 51,52
 Object ( Variant Out1, Variant Out11, Variant Out12
    , Variant Out13, Variant Out14, Variant Out15, Variant Out16
    , Variant Out17, Variant Out18, Variant Out19, Variant Out110
    , Variant Out111, Variant Out112, Variant Out113, Variant Out114
    , Variant Out115, Variant LSB) ListPopLsb( Variant In1) ;  //_GUI 37,3
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = ListPopLsb.1;  
 Output:A.0 = ListPopLsb.2;  
 Output:B.0 = ListPopLsb.3;  
 Output:C.0 = ListPopLsb.4;  
 Output:D.0 = ListPopLsb.5;  
 Output:E.0 = ListPopLsb.6;  
 Output:F.0 = ListPopLsb.7;  
 Output:G.0 = ListPopLsb.8;  
 Output:H.0 = ListPopLsb.9;  
 Output:I.0 = ListPopLsb.10;  
 Output:J.0 = ListPopLsb.11;  
 Output:K.0 = ListPopLsb.12;  
 Output:L.0 = ListPopLsb.13;  
 Output:M.0 = ListPopLsb.14;  
 Output:N.0 = ListPopLsb.15;  
 Output:O.0 = ListPopLsb.16;  
 ListPopLsb.0 = Input.0;  
}

Object ( Variant LSB) UnpackZTList( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Pack/Unpack
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 15,19
 Object Output( Variant LSB) ;  //_GUI 50,21
 Object ( Variant Out1, Variant LSB) ListPopLsb( Variant In1) ;  //_GUI 27,17
 //_Attributes Documentation="list"

 // Behavior Topology
 Output.0 = ListPopLsb.1;  
 ListPopLsb.0 = Input.0;  
}

Object ( Variant Dim) $ZTListDimensions( NULL ZTList, Variant Dim) 
//_Attributes TreeGroup=CoreLib-ZTList\General\$General,Documentation="null"
{
 //_ Object Prototypes
 Object ( NULL ZTList) Input;  //_GUI 35,31
 Object ( Variant Dim) Input:A;  //_GUI 35,39
 Object Output( Variant Dim) ;  //_GUI 71,39

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Variant OFL, Variant Out2) UExtnd( Variant Type
    , ZTList Data) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( Variant Type) Input;  //_GUI 45,39
 Object ( ZTList Data) Input:A;  //_GUI 58,56
 Object Output( Variant OFL) ;  //_GUI 145,40
 Object Output:A( Variant Out2) ;  //_GUI 145,56
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 65,54
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 126,54
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In1) ;  //_GUI 88,42
 Object ( Variant Out1) PushLsb:A( Variant In1, Variant LSB) ;  //_GUI 133,38
 //_Attributes Documentation="ztl/var"
 Object ( Variant OFL, Variant Out1) UExtnd( Variant Type
    , Variant Data) ;  //_GUI 95,54
 Object ( Variant OFL, Variant Out1) UExtnd:A( Variant Type
    , Variant Data) ;  //_GUI 94,41

 // Behavior Topology
 Output.0 = PushLsb:A.0;  
 Output:A.0 = PushLsb.0;  
 PopLsb.0 = Input:A.0;  
 PushLsb.0 = UExtnd:A.1;  //_GUI 126,46
 PushLsb.1 = UExtnd.1;  
 Junction.0 = Input.0;  //_GUI 89,40
 PushLsb:A.0 = UExtnd:A.0;  //_GUI 107,40, 107,43
 PushLsb:A.1 = UExtnd.0;  //_GUI 113,43, 113,56
 UExtnd.0 = Junction.2;  //_GUI 89,56
 UExtnd.1 = PopLsb.1;  
 UExtnd:A.0 = Junction.1;  
 UExtnd:A.1 = PopLsb.0;  //_GUI 75,46
}

Object ( ZTerm OFL, ZTerm Out2) UExtnd( Variant Type
    , ZTerm Data) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( Variant Type) Input;  //_GUI 45,39
 Object ( ZTerm Data) Input:A;  //_GUI 58,56
 Object Output( ZTerm OFL) ;  //_GUI 145,40
 Object Output:A( ZTerm Out2) ;  //_GUI 145,56
 Object ( ZTerm Out1, ZTerm Out2, ZTerm Out3) Junction
    ( ZTerm In0) ;  //_GUI 130,56

 // Behavior Topology
 Output.0 = Junction.0;  //_GUI 131,41
 Output:A.0 = Junction.1;  
 Junction.0 = Input:A.0;  
}

Object ( Variant Out1) CAR( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\LISP
{
 // Same as PopLsb
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 20,17
 Object Output( Variant Out1) ;  //_GUI 41,19
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 27,15
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = PopLsb.1;  
 PopLsb.0 = Input.0;  
}

Object ( Variant Out1) CDR( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\LISP
{
 // Same as PopLsb
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 20,17
 Object Output( Variant Out1) ;  //_GUI 42,16
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 27,15
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = PopLsb.0;  
 PopLsb.0 = Input.0;  
}

Object ( Variant Out1) CONS( Variant Els, Variant LeadEl) 
//_Attributes TreeGroup=CoreLib-ZTList\LISP
{
 // Same as PushLsb
 //_ Object Prototypes
 Object ( Variant Els) Input;  //_GUI 22,22
 Object ( Variant LeadEl) Input:A;  //_GUI 22,25
 Object Output( Variant Out1) ;  //_GUI 41,23
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 28,21
 //_Attributes Documentation="var/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = Input.0;  
 PushLsb.1 = Input:A.0;  
}

Object ( Variant Out1) CADR( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\LISP
{
 // Same as two PopLsbs
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 20,17
 Object Output( Variant Out1) ;  //_GUI 60,18
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 27,15
 //_Attributes Documentation="var"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 44,14
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = PopLsb:A.1;  
 PopLsb.0 = Input.0;  
 PopLsb:A.0 = PopLsb.0;  
}

Object ( Variant Out1) FIRST( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\LISP
{
 // Same as PopLsb
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 20,17
 Object Output( Variant Out1) ;  //_GUI 41,19
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 27,15
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = PopLsb.1;  
 PopLsb.0 = Input.0;  
}

Object ( Variant Out1) LAST( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\LISP
{
 // Same as PopMsb
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 20,17
 Object Output( Variant Out1) ;  //_GUI 41,16
 Object ( Variant MSB, Variant Out2) PopMsb( Variant In1) ;  //_GUI 27,15
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = PopMsb.0;  
 PopMsb.0 = Input.0;  
}

Object ( Variant Out1) LENGTH( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\LISP
{
 // Same as ZTList_Size
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 20,17
 Object Output( Variant Out1) ;  //_GUI 47,17
 Object ( Variant Out1) ZTList_Size( Variant In1) ;  //_GUI 29,15
 //_Attributes Documentation="Leaf(Var)"

 // Behavior Topology
 Output.0 = ZTList_Size.0;  
 ZTList_Size.0 = Input.0;  
}

Object ( Variant Out1) REVERSE( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\LISP
{
 // Same as ReverseList
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 20,17
 Object Output( Variant Out1) ;  //_GUI 47,17
 Object ( Variant Out1) ReverseList( Variant In1) ;  //_GUI 28,15
 //_Attributes Documentation="ZTList"

 // Behavior Topology
 Output.0 = ReverseList.0;  
 ReverseList.0 = Input.0;  
}

Object ( Bit Out1) LISTP( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\LISP
{
 // Same as IsAZTList
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 22,22
 Object Output( Bit Out1) ;  //_GUI 43,22
 Object ( Bit Out1) IsAZTList( Variant In1) ;  //_GUI 28,20
 //_Attributes Documentation="ztlist"

 // Behavior Topology
 Output.0 = IsAZTList.0;  
 IsAZTList.0 = Input.0;  
}

Object ( Bit Out1) CONSP( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\LISP
{
 // Same as IsZTList
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 22,22
 Object Output( Bit Out1) ;  //_GUI 43,22
 Object ( Bit Out1) IsZTList( Variant In1) ;  //_GUI 29,20
 //_Attributes Documentation="ztlist"

 // Behavior Topology
 Output.0 = IsZTList.0;  
 IsZTList.0 = Input.0;  
}

Object ( Bit Out1) ATOM( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\LISP
{
 // Same as !IsAZTList
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 22,22
 Object Output( Bit Out1) ;  //_GUI 55,22
 Object ( Bit Out1) IsAZTList( Variant In1) ;  //_GUI 28,20
 //_Attributes Documentation="ztlist"
 Object ( Bit Out) INVERT( Bit In1) ;  //_GUI 43,20

 // Behavior Topology
 Output.0 = INVERT.0;  
 IsAZTList.0 = Input.0;  
 INVERT.0 = IsAZTList.0;  
}

Object ( Variant Out1) Cat( ZTList Hi, Variant Lo) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist/var"
{
 //_ Object Prototypes
 Object ( ZTList Hi) Input;  //_GUI 7,19
 Object ( Variant Lo) Input:A;  //_GUI 7,22
 Object Output( Variant Out1) ;  //_GUI 33,20
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 21,18

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = Input.0;  
 PushLsb.1 = Input:A.0;  
}

Object ( Variant Out1) Cat( ZTerm Hi, Variant Lo) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm/var"
{
 //_ Object Prototypes
 Object ( ZTerm Hi) Input;  //_GUI 7,19
 Object ( Variant Lo) Input:A;  //_GUI 7,22
 Object Output( Variant Out1) ;  //_GUI 33,20
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 21,18

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = Input.0;  
 PushLsb.1 = Input:A.0;  
}

Object ( Variant Out1) Cat( Variant Hi, ZTList Lo) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/ztlist"
{
 //_ Object Prototypes
 Object ( Variant Hi) Input;  //_GUI 7,19
 Object ( ZTList Lo) Input:A;  //_GUI 7,22
 Object Output( Variant Out1) ;  //_GUI 33,20
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 19,18

 // Behavior Topology
 Output.0 = PushMsb.0;  
 PushMsb.0 = Input.0;  
 PushMsb.1 = Input:A.0;  
}

Object ( Variant Out1) Cat( Variant Hi, ZTerm Lo) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/zterm"
{
 //_ Object Prototypes
 Object ( Variant Hi) Input;  //_GUI 7,19
 Object ( ZTerm Lo) Input:A;  //_GUI 7,22
 Object Output( Variant Out1) ;  //_GUI 33,20
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 19,18

 // Behavior Topology
 Output.0 = PushMsb.0;  
 PushMsb.0 = Input.0;  
 PushMsb.1 = Input:A.0;  
}

Object ( Variant Out1) Cat( Variant Hi, Variant Lo) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var/var"
{
 //_ Object Prototypes
 Object ( Variant Hi) Input;  //_GUI 7,19
 Object ( Variant Lo) Input:A;  //_GUI 7,22
 Object Output( Variant Out1) ;  //_GUI 33,20
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 18,18

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PushLsb.0 = Input.0;  
 PushLsb.1 = Input:A.0;  
}

Object ( Variant Val) MaskToNum( ZTList Bits) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList Bits) Input;  //_GUI 45,20
 Object Output( Variant Val) ;  //_GUI 93,20
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 52,18
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 81,18
 //_Attributes Documentation="ztl/var"
 Object ( Variant Num) MaskToNum( Variant Mask) ;  //_GUI 65,14
 Object ( Variant Num) MaskToNum:A( Variant Mask) ;  //_GUI 65,24

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = MaskToNum.0;  //_GUI 80,20, 80,17
 PushLsb.1 = MaskToNum:A.0;  //_GUI 80,23, 80,27
 MaskToNum.0 = PopLsb.0;  //_GUI 64,17, 64,20
 MaskToNum:A.0 = PopLsb.1;  //_GUI 65,25, 62,25
}

Object ( Variant Bits) NumToMask( ZTList Val) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList Val) Input;  //_GUI 42,28
 Object Output( Variant Bits) ;  //_GUI 89,28
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 48,26
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 77,26
 //_Attributes Documentation="ztl/var"
 Object ( Variant Mask) NumToMask( Variant Num) ;  //_GUI 61,22
 Object ( Variant Mask) NumToMask:A( Variant Num) ;  //_GUI 61,32

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = NumToMask.0;  //_GUI 76,28, 76,25
 PushLsb.1 = NumToMask:A.0;  //_GUI 76,31, 76,35
 NumToMask.0 = PopLsb.0;  //_GUI 60,25, 60,28
 NumToMask:A.0 = PopLsb.1;  //_GUI 61,33, 58,33
}

Object ( ZTerm Bits) NumToMask( ZTerm Val) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm Val) Input;  //_GUI 42,28
 Object Output( ZTerm Bits) ;  //_GUI 86,28

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( ZTerm Val) MaskToNum( ZTerm Bits) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm Bits) Input;  //_GUI 45,20
 Object Output( ZTerm Val) ;  //_GUI 93,20

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant LSBList, Variant LSBList, Variant EncodeRevBits) Show_MaskToNum
    ( LSB004 e3, LSB004 e2, LSB004 e1, LSB004 e0
    , LSB004 Val) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( LSB004 e3) Input;  //_GUI 24,24
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=50
 Object ( LSB004 e2) Input:A;  //_GUI 24,27
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=50
 Object ( LSB004 e1) Input:B;  //_GUI 24,43
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=50
 Object ( LSB004 e0) Input:C;  //_GUI 24,46
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=50
 Object ( LSB004 Val) Input:D;  //_GUI 75,61
 //_Attributes WidgetHex=True,WidgetWidth=104,WidgetHeight=50
 Object Output( Variant LSBList) ;  //_GUI 176,30
 Object Output:A( Variant LSBList) ;  //_GUI 176,40
 Object Output:B( Variant EncodeRevBits) ;  //_GUI 114,61
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 157,28
 //_Attributes Documentation="ztlist"
 Object ( ZTList ZTList) NewZTList( Variant MSB, Variant LSB) ;  //_GUI 77,36
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 105,36
 //_Attributes Documentation="list"
 Object ( ZTList ZTList) NewZTList:A( Variant MSB, Variant LSB) ;  //_GUI 52,23
 Object ( ZTList ZTList) NewZTList:B( Variant MSB, Variant LSB) ;  //_GUI 52,42
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 117,26
 //_Attributes Documentation="list"
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 157,38
 //_Attributes Documentation="ztlist"
 Object Text;  //_GUI 90,26,Just does a EncodeRev on the Leaves
 Object ( Variant Num) MaskToNum( Variant Mask) ;  //_GUI 89,36
 Object ( Variant Num) MaskToNum:A( Variant Mask) ;  //_GUI 87,59

 // Behavior Topology
 Output.0 = ZTListToLSBList.0;  
 Output:A.0 = ZTListToLSBList:A.0;  
 Output:B.0 = MaskToNum:A.0;  
 ZTListToLSBList.0 = PopLsb:A.1;  
 NewZTList.0 = NewZTList:A.0;  //_GUI 65,38, 65,26
 NewZTList.1 = NewZTList:B.0;  //_GUI 77,45
 PopLsb.0 = MaskToNum.0;  
 NewZTList:A.0 = Input.0;  
 NewZTList:A.1 = Input:A.0;  
 NewZTList:B.0 = Input:B.0;  
 NewZTList:B.1 = Input:C.0;  
 PopLsb:A.0 = PopLsb.0;  //_GUI 117,34, 115,34
 ZTListToLSBList:A.0 = PopLsb.1;  
 MaskToNum.0 = NewZTList.0;  
 MaskToNum:A.0 = Input:D.0;  
}

Object ( Variant "e3, e2", Variant "e1, e0", Variant DecodeRevBits) Show_NumToMask
    ( LSB002 e3, LSB002 e2, LSB002 e1, LSB002 e0
    , LSB002 TestVal) 
//_Attributes TreeGroup=CoreLib-ZTList\Examples
{
 //_ Object Prototypes
 Object ( LSB002 e3) Input;  //_GUI 32,16
 Object ( LSB002 e2) Input:A;  //_GUI 32,19
 Object ( LSB002 e1) Input:B;  //_GUI 32,35
 Object ( LSB002 e0) Input:C;  //_GUI 32,38
 Object ( LSB002 TestVal) Input:D;  //_GUI 55,60
 Object Output( Variant "e3, e2") ;  //_GUI 200,22
 //_Attributes WidgetHex=True,WidgetWidth=129,WidgetHeight=41
 Object Output:A( Variant "e1, e0") ;  //_GUI 200,32
 Object Output:B( Variant DecodeRevBits) ;  //_GUI 94,60
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 141,18
 //_Attributes Documentation="list"
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 181,30
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 181,20
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 129,28
 //_Attributes Documentation="list"
 Object Text;  //_GUI 102,18,Just does a DecodeRev on the Leaves
 Object ( ZTList ZTList) NewZTList( Variant MSB, Variant LSB) ;  //_GUI 60,15
 Object ( ZTList ZTList) NewZTList:A( Variant MSB, Variant LSB) ;  //_GUI 60,34
 Object ( ZTList ZTList) NewZTList:B( Variant MSB, Variant LSB) ;  //_GUI 85,28
 Object ( Variant Out1) Bit_List( Variant In1) ;  //_GUI 82,58
 Object Text;  //_GUI 153,17,zterm out on top
 Object ( Variant Mask) NumToMask( Variant Num) ;  //_GUI 102,28
 Object ( Variant Mask) NumToMask:A( Variant Num) ;  //_GUI 66,58

 // Behavior Topology
 Output.0 = ZTListToLSBList:A.0;  
 Output:A.0 = ZTListToLSBList.0;  
 Output:B.0 = Bit_List.0;  
 PopLsb.0 = PopLsb:A.0;  //_GUI 141,26, 139,26
 ZTListToLSBList.0 = PopLsb:A.1;  
 ZTListToLSBList:A.0 = PopLsb.1;  
 PopLsb:A.0 = NumToMask.0;  
 NewZTList.0 = Input.0;  
 NewZTList.1 = Input:A.0;  
 NewZTList:A.0 = Input:B.0;  
 NewZTList:A.1 = Input:C.0;  
 NewZTList:B.0 = NewZTList.0;  //_GUI 73,30, 73,18
 NewZTList:B.1 = NewZTList:A.0;  //_GUI 85,37
 Bit_List.0 = NumToMask:A.0;  
 NumToMask.0 = NewZTList:B.0;  
 NumToMask:A.0 = Input:D.0;  
}

Object ( Variant Size) ListSize( ZTList List) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTList"
{
 // Description:
 // Returns the number of elements contained in the outer ZTList.
 //
 // Inputs:
 // List:  iuput ZTlist
 //
 // Outputs:
 // Size:  list size
 //
 // Date:
 // November 13, 2005
 //_ Object Prototypes
 Object ( ZTList List) Input;  //_GUI 18,24
 Object Output( Variant Size) ;  //_GUI 79,24
 Object Text;  //_GUI 27,37,This object returns a data set with as many bits as the outer List has elements.
 Object ( Variant Size) ListSize( Variant List) ;  //_GUI 46,16
 //_Attributes Documentation="Leaf"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 27,22
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 63,22
 //_Attributes Documentation="ztl/var"
 Object ( Bit Bit) Input:A;  //_GUI 52,26
 //_Attributes Constant="*0"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 ListSize.0 = PopLsb.0;  //_GUI 44,19, 44,24
 PopLsb.0 = Input.0;  
 PushLsb.0 = ListSize.0;  //_GUI 56,24
 PushLsb.1 = Input:A.0;  
}

Object ( NULL Size) ListSize( ZTerm List) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTerm"
{
 // Description:
 // Returns the number of elements contained in the List.
 //
 // Inputs:
 // List:  iuput list
 //
 // Outputs:
 // Size:  list size
 //
 // Date:
 // November 13, 2002
 //_ Object Prototypes
 Object ( ZTerm List) Input;  //_GUI 18,24
 Object Output( NULL Size) ;  //_GUI 79,24
 Object Text;  //_GUI 27,37,This object returns a data set with as many bits as the List has elements.
 Object ( NULL Out1) NULL;  //_GUI 56,22

 // Behavior Topology
 Output.0 = NULL.0;  
}

Object ( Variant Out1) 2MinList( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTerm"
{
 // Makes the list at least 2 elements long.
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 25,25
 Object Output( Variant Out1) ;  //_GUI 62,23
 Object Text;  //_GUI 23,7,A ZTerm is a 0 element ZTList.  We don't know the original dataset of the list, so just pick a bit. Make it a 2 element list by adding two elements.
 Object ( Bit In) Input:A;  //_GUI 37,22
 //_Attributes Constant="*0"
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction
    ( Bit In0) ;  //_GUI 43,22
 Object ( Variant ZTList) NewZTList( Variant MSB, Variant LSB) ;  //_GUI 47,21

 // Behavior Topology
 Output.0 = NewZTList.0;  
 Junction.0 = Input:A.0;  
 NewZTList.0 = Junction.1;  
 NewZTList.1 = Junction.2;  //_GUI 44,26
}

Object ( Variant Out1) 2MinList( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTList"
{
 // Makes the list at least 2 elements long.
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 12,37
 Object Output( Variant Out1) ;  //_GUI 118,32
 Object ( Variant Out1) Zero( Variant In1) ;  //_GUI 76,31
 //_Attributes Documentation="ztlist"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 72,36
 Object Text;  //_GUI 28,4,A ZTList dataset can have 1, 2 or more elements.  The only way to see if it has only 1 is by poping it.
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 24,35
 //_Attributes Documentation="ztlist"
 Object ( Bit Out1) IsZTerm( Variant In1) ;  //_GUI 36,34
 //_Attributes Documentation="zterm"
 Object ( Variant "#0", Variant "#1") $SelectOut( Variant D
    , Bit S) ;  //_GUI 56,32
 Object ( Variant Out) $Select( Variant "#0", Variant "#1"
    , Bit S) ;  //_GUI 106,30
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction:A
    ( ZTList In0) ;  //_GUI 19,37
 Object ( Variant Out1) PushMsb( Variant MSB, Variant In2) ;  //_GUI 88,32
 //_Attributes Documentation="var/zterm"
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:B
    ( Bit In0) ;  //_GUI 50,36
 Object Text;  //_GUI 23,19,Pop and element then see if what's left over is a ZTerm.  This means the original list had only one element.
 Object Text;  //_GUI 70,40,There was only one element so add another element, zeroed, to the most significant end of the list.
 Object Text;  //_GUI 74,18,There is already at least two elements, so don't do anything else.

 // Behavior Topology
 Output.0 = $Select.0;  
 Zero.0 = Junction.0;  //_GUI 73,34
 Junction.0 = $SelectOut.1;  
 PopLsb.0 = Junction:A.1;  
 IsZTerm.0 = PopLsb.0;  
 $SelectOut.0 = Junction:A.0;  //_GUI 56,32, 20,32
 $SelectOut.1 = Junction:B.1;  
 $Select.0 = $SelectOut.0;  //_GUI 106,29, 68,29
 $Select.1 = PushMsb.0;  
 $Select.2 = Junction:B.2;  //_GUI 106,51, 51,51
 Junction:A.0 = Input.0;  
 PushMsb.0 = Zero.0;  
 PushMsb.1 = Junction.1;  
 Junction:B.0 = IsZTerm.0;  
}

Object ( NULL Out1) MSB( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 11,13
 Object Output( NULL Out1) ;  //_GUI 38,13
 Object ( NULL Out1) NULL;  //_GUI 21,20

 // Behavior Topology
 Output.0 = NULL.0;  //_GUI 38,23
}

Object ( NULL Out1) BIN( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 11,13
 Object Output( NULL Out1) ;  //_GUI 38,13
 Object ( NULL Out1) NULL;  //_GUI 21,20

 // Behavior Topology
 Output.0 = NULL.0;  //_GUI 38,23
}

Object ( Variant R, Variant PipeLen, Bit ClkG
    , Bit AClr, Bit Done, Bit Busy) Mul_Pipe( ZTList A
    , ZTList B, Bit ClkG, Bit AClr, Bit Go
    , Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/ztlist"
{
 //_ Object Prototypes
 Object ( ZTList A) Input;  //_GUI 17,38
 Object ( ZTList B) Input:A;  //_GUI 17,47
 Object ( Bit ClkG) Input:B;  //_GUI 17,53
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:C;  //_GUI 17,56
 //_Attributes Constant="0"
 Object ( Bit Go) Input:D;  //_GUI 17,59
 Object ( Bit Wait) Input:E;  //_GUI 137,71
 //_Attributes Constant="0"
 Object Output( Variant R) ;  //_GUI 149,35
 Object Output:A( Variant PipeLen) ;  //_GUI 138,46
 Object Output:B( Bit ClkG) ;  //_GUI 138,49
 Object Output:C( Bit AClr) ;  //_GUI 138,52
 Object Output:D( Bit Done) ;  //_GUI 138,64
 Object Output:E( Bit Busy) ;  //_GUI 18,66
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction
    ( Bit In0) ;  //_GUI 49,59
 Object ( Variant A, Variant B, Variant PipeLenA
    , Variant PipeLenB, Variant FullPipeLen, Bit ClkG, Bit AClr
    , Bit BusyA, Bit BusyB, Bit Done) SyncRegPair_Pipe( Variant A
    , Variant B, Variant PipeLenA, Variant PipeLenB, Bit ClkG
    , Bit AClr, Bit GoA, Bit GoB, Bit Wait) ;  //_GUI 107,33
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:A
    ( Bit In0) ;  //_GUI 43,53
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:B
    ( Bit In0) ;  //_GUI 46,56
 Object ( Variant R, Variant PipeLen, Bit ClkG
    , Bit AClr, Bit Done, Bit Busy) Mul_Pipe( Variant A
    , Variant B, Bit ClkG, Bit AClr, Bit Go
    , Bit Wait) ;  //_GUI 59,72
 Object ( Variant R, Variant PipeLen, Bit ClkG
    , Bit AClr, Bit Done, Bit Busy) Mul_Pipe:A( Variant A
    , Variant B, Bit ClkG, Bit AClr, Bit Go
    , Bit Wait) ;  //_GUI 59,11
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 24,36
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 136,33
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 24,45

 // Behavior Topology
 Output.0 = PushLsb.0;  
 Output:A.0 = SyncRegPair_Pipe.4;  
 Output:B.0 = SyncRegPair_Pipe.5;  
 Output:C.0 = SyncRegPair_Pipe.6;  
 Output:D.0 = SyncRegPair_Pipe.9;  
 Output:E.0 = Mul_Pipe.5;  //_GUI 18,63, 53,63, 53,89
 Junction.0 = Input:D.0;  
 SyncRegPair_Pipe.0 = Mul_Pipe:A.0;  //_GUI 88,35, 88,13
 SyncRegPair_Pipe.1 = Mul_Pipe.0;  //_GUI 88,38, 88,74
 SyncRegPair_Pipe.2 = Mul_Pipe:A.1;  //_GUI 91,41, 91,16
 SyncRegPair_Pipe.3 = Mul_Pipe.1;  //_GUI 91,44, 91,77
 SyncRegPair_Pipe.4 = Mul_Pipe.2;  //_GUI 94,47, 94,80
 SyncRegPair_Pipe.5 = Mul_Pipe.3;  //_GUI 97,50, 97,83
 SyncRegPair_Pipe.6 = Mul_Pipe:A.4;  //_GUI 100,53, 100,25
 SyncRegPair_Pipe.7 = Mul_Pipe.4;  //_GUI 100,56, 100,86
 SyncRegPair_Pipe.8 = Input:E.0;  //_GUI 141,68
 Junction:A.0 = Input:B.0;  
 Junction:B.0 = Input:C.0;  
 Mul_Pipe.0 = PopLsb.1;  //_GUI 38,74, 38,41
 Mul_Pipe.1 = PopLsb:A.1;  //_GUI 41,77, 41,50
 Mul_Pipe.2 = Junction:A.2;  //_GUI 44,80
 Mul_Pipe.3 = Junction:B.2;  //_GUI 47,83
 Mul_Pipe.4 = Junction.2;  //_GUI 50,86
 Mul_Pipe.5 = SyncRegPair_Pipe.8;  //_GUI 131,89, 131,59
 Mul_Pipe:A.0 = PopLsb.0;  //_GUI 38,13, 38,38
 Mul_Pipe:A.1 = PopLsb:A.0;  //_GUI 41,16, 41,47
 Mul_Pipe:A.2 = Junction:A.0;  //_GUI 44,19
 Mul_Pipe:A.3 = Junction:B.0;  //_GUI 47,22
 Mul_Pipe:A.4 = Junction.0;  //_GUI 50,25
 Mul_Pipe:A.5 = SyncRegPair_Pipe.7;  //_GUI 131,28, 131,56
 PopLsb.0 = Input.0;  
 PushLsb.0 = SyncRegPair_Pipe.0;  
 PushLsb.1 = SyncRegPair_Pipe.1;  
 PopLsb:A.0 = Input:A.0;  
}

Object ( Variant R, Variant PipeLen, Bit ClkG
    , Bit AClr, Bit Done, Bit Busy) Mul_Pipe( Variant A
    , ZTList B, Bit ClkG, Bit AClr, Bit Go
    , Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="var/ztlist"
{
 //_ Object Prototypes
 Object ( Variant A) Input;  //_GUI 17,35
 Object ( ZTList B) Input:A;  //_GUI 17,41
 Object ( Bit ClkG) Input:B;  //_GUI 17,44
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:C;  //_GUI 17,47
 //_Attributes Constant="0"
 Object ( Bit Go) Input:D;  //_GUI 17,50
 Object ( Bit Wait) Input:E;  //_GUI 57,57
 //_Attributes Constant="0"
 Object Output( Variant R) ;  //_GUI 58,38
 Object Output:A( Variant PipeLen) ;  //_GUI 58,41
 Object Output:B( Bit ClkG) ;  //_GUI 58,44
 Object Output:C( Bit AClr) ;  //_GUI 58,47
 Object Output:D( Bit Done) ;  //_GUI 58,50
 Object Output:E( Bit Busy) ;  //_GUI 18,56
 Object ( Variant DataList) ListFill( Variant Data, Variant List) ;  //_GUI 26,34
 Object ( Variant R, Variant PipeLen, Bit ClkG
    , Bit AClr, Bit Done, Bit Busy) Mul_Pipe( Variant A
    , Variant B, Bit ClkG, Bit AClr, Bit Go
    , Bit Wait) ;  //_GUI 43,37
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction
    ( ZTList In0) ;  //_GUI 23,41

 // Behavior Topology
 Output.0 = Mul_Pipe.0;  
 Output:A.0 = Mul_Pipe.1;  
 Output:B.0 = Mul_Pipe.2;  
 Output:C.0 = Mul_Pipe.3;  
 Output:D.0 = Mul_Pipe.4;  
 Output:E.0 = Mul_Pipe.5;  //_GUI 18,54
 ListFill.0 = Input.0;  
 ListFill.1 = Junction.0;  //_GUI 24,39
 Mul_Pipe.0 = ListFill.0;  //_GUI 41,39, 41,37
 Mul_Pipe.1 = Junction.1;  
 Mul_Pipe.2 = Input:B.0;  
 Mul_Pipe.3 = Input:C.0;  
 Mul_Pipe.4 = Input:D.0;  
 Mul_Pipe.5 = Input:E.0;  //_GUI 61,54
 Junction.0 = Input:A.0;  
}

Object ( Variant R, Variant PipeLen, Bit ClkG
    , Bit AClr, Bit Done, Bit Busy) Mul_Pipe( ZTList A
    , Variant B, Bit ClkG, Bit AClr, Bit Go
    , Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/var"
{
 //_ Object Prototypes
 Object ( ZTList A) Input;  //_GUI 15,33
 Object ( Variant B) Input:A;  //_GUI 15,37
 Object ( Bit ClkG) Input:B;  //_GUI 17,44
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:C;  //_GUI 17,47
 //_Attributes Constant="0"
 Object ( Bit Go) Input:D;  //_GUI 17,50
 Object ( Bit Wait) Input:E;  //_GUI 57,57
 //_Attributes Constant="0"
 Object Output( Variant R) ;  //_GUI 58,38
 Object Output:A( Variant PipeLen) ;  //_GUI 58,41
 Object Output:B( Bit ClkG) ;  //_GUI 58,44
 Object Output:C( Bit AClr) ;  //_GUI 58,47
 Object Output:D( Bit Done) ;  //_GUI 58,50
 Object Output:E( Bit Busy) ;  //_GUI 18,56
 Object ( Variant DataList) ListFill( Variant Data, Variant List) ;  //_GUI 26,36
 Object ( Variant R, Variant PipeLen, Bit ClkG
    , Bit AClr, Bit Done, Bit Busy) Mul_Pipe( Variant A
    , Variant B, Bit ClkG, Bit AClr, Bit Go
    , Bit Wait) ;  //_GUI 43,37
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction
    ( ZTList In0) ;  //_GUI 21,33

 // Behavior Topology
 Output.0 = Mul_Pipe.0;  
 Output:A.0 = Mul_Pipe.1;  
 Output:B.0 = Mul_Pipe.2;  
 Output:C.0 = Mul_Pipe.3;  
 Output:D.0 = Mul_Pipe.4;  
 Output:E.0 = Mul_Pipe.5;  //_GUI 18,54
 ListFill.0 = Input:A.0;  
 ListFill.1 = Junction.2;  //_GUI 22,41
 Mul_Pipe.0 = Junction.1;  //_GUI 43,34
 Mul_Pipe.1 = ListFill.0;  //_GUI 40,42, 40,39
 Mul_Pipe.2 = Input:B.0;  
 Mul_Pipe.3 = Input:C.0;  
 Mul_Pipe.4 = Input:D.0;  
 Mul_Pipe.5 = Input:E.0;  //_GUI 61,54
 Junction.0 = Input.0;  
}

Object ( Variant OFL, Variant R, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Add_Pipe
    ( ZTList A, ZTList B, Bit Add, Bit ClkG
    , Bit AClr, Bit Go, Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/ztlist/Bit"
{
 //_ Object Prototypes
 Object ( ZTList A) Input;  //_GUI 8,30
 Object ( ZTList B) Input:A;  //_GUI 8,39
 Object ( Bit Add) Input:B;  //_GUI 8,46
 //_Attributes Constant="1"
 Object ( Bit ClkG) Input:C;  //_GUI 8,52
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:D;  //_GUI 8,55
 //_Attributes Constant="0"
 Object ( Bit Go) Input:E;  //_GUI 8,58
 Object ( Bit Wait) Input:F;  //_GUI 161,70
 //_Attributes Constant="0"
 Object Output( Variant OFL) ;  //_GUI 162,27
 Object Output:A( Variant R) ;  //_GUI 162,36
 Object Output:B( Variant PipeLen) ;  //_GUI 162,45
 Object Output:C( Bit ClkG) ;  //_GUI 162,48
 Object Output:D( Bit AClr) ;  //_GUI 162,51
 Object Output:E( Bit Done) ;  //_GUI 162,63
 Object Output:F( Bit Busy) ;  //_GUI 9,67
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction
    ( Bit In0) ;  //_GUI 45,58
 Object ( Variant A, Variant B, Variant PipeLenA
    , Variant PipeLenB, Variant FullPipeLen, Bit ClkG, Bit AClr
    , Bit BusyA, Bit BusyB, Bit Done) SyncRegPair_Pipe( Variant A
    , Variant B, Variant PipeLenA, Variant PipeLenB, Bit ClkG
    , Bit AClr, Bit GoA, Bit GoB, Bit Wait) ;  //_GUI 103,32
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:A
    ( Bit In0) ;  //_GUI 39,52
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:B
    ( Bit In0) ;  //_GUI 42,55
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:C
    ( Bit In0) ;  //_GUI 33,46
 Object ( Variant Out1, Variant Out2) ListIn( List In) ;  //_GUI 131,25
 Object ( List Out) ListOut( Variant In1, Variant In2) ;  //_GUI 70,5
 Object ( List Out) ListOut:A( Variant In1, Variant In2) ;  //_GUI 70,63
 Object ( Variant Out1, Variant Out2) ListIn:A( List In) ;  //_GUI 131,34
 Object ( Variant OFL, Variant R, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Add_Pipe
    ( Variant A, Variant B, Bit Add, Bit ClkG
    , Bit AClr, Bit Go, Bit Wait) ;  //_GUI 55,5
 //_Attributes Documentation="complex"
 Object ( Variant OFL, Variant R, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Add_Pipe:A
    ( Variant A, Variant B, Bit Add, Bit ClkG
    , Bit AClr, Bit Go, Bit Wait) ;  //_GUI 55,63
 //_Attributes Documentation="complex"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 15,28
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 15,37
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 148,25
 Object ( Variant Out1) PushLsb:A( Variant In1, Variant LSB) ;  //_GUI 148,34

 // Behavior Topology
 Output.0 = PushLsb.0;  
 Output:A.0 = PushLsb:A.0;  
 Output:B.0 = SyncRegPair_Pipe.4;  
 Output:C.0 = SyncRegPair_Pipe.5;  
 Output:D.0 = SyncRegPair_Pipe.6;  
 Output:E.0 = SyncRegPair_Pipe.9;  
 Output:F.0 = Add_Pipe:A.6;  //_GUI 9,62, 49,62, 49,83
 Junction.0 = Input:E.0;  
 SyncRegPair_Pipe.0 = ListOut.0;  //_GUI 84,34, 84,8
 SyncRegPair_Pipe.1 = ListOut:A.0;  //_GUI 84,37, 84,66
 SyncRegPair_Pipe.2 = Add_Pipe.2;  //_GUI 87,40, 87,13
 SyncRegPair_Pipe.3 = Add_Pipe:A.2;  //_GUI 87,43, 87,71
 SyncRegPair_Pipe.4 = Add_Pipe:A.3;  //_GUI 90,46, 90,74
 SyncRegPair_Pipe.5 = Add_Pipe:A.4;  //_GUI 93,49, 93,77
 SyncRegPair_Pipe.6 = Add_Pipe.5;  //_GUI 96,52, 96,22
 SyncRegPair_Pipe.7 = Add_Pipe:A.5;  //_GUI 96,55, 96,80
 SyncRegPair_Pipe.8 = Input:F.0;  //_GUI 165,67
 Junction:A.0 = Input:C.0;  
 Junction:B.0 = Input:D.0;  
 Junction:C.0 = Input:B.0;  
 ListIn.0 = SyncRegPair_Pipe.0;  //_GUI 124,28, 124,34
 ListOut.0 = Add_Pipe.1;  
 ListOut.1 = Add_Pipe.0;  
 ListOut:A.0 = Add_Pipe:A.1;  
 ListOut:A.1 = Add_Pipe:A.0;  
 ListIn:A.0 = SyncRegPair_Pipe.1;  
 Add_Pipe.0 = PopLsb.0;  //_GUI 28,7, 28,30
 Add_Pipe.1 = PopLsb:A.0;  //_GUI 31,10, 31,39
 Add_Pipe.2 = Junction:C.0;  //_GUI 34,13
 Add_Pipe.3 = Junction:A.0;  //_GUI 40,16
 Add_Pipe.4 = Junction:B.0;  //_GUI 43,19
 Add_Pipe.5 = Junction.0;  //_GUI 46,22
 Add_Pipe.6 = SyncRegPair_Pipe.7;  //_GUI 127,25, 127,55
 Add_Pipe:A.0 = PopLsb.1;  //_GUI 28,65, 28,33
 Add_Pipe:A.1 = PopLsb:A.1;  //_GUI 31,68, 31,42
 Add_Pipe:A.2 = Junction:C.2;  //_GUI 34,71
 Add_Pipe:A.3 = Junction:A.2;  //_GUI 40,74
 Add_Pipe:A.4 = Junction:B.2;  //_GUI 43,77
 Add_Pipe:A.5 = Junction.2;  //_GUI 46,80
 Add_Pipe:A.6 = SyncRegPair_Pipe.8;  //_GUI 127,83, 127,58
 PopLsb.0 = Input.0;  
 PopLsb:A.0 = Input:A.0;  
 PushLsb.0 = ListIn.1;  
 PushLsb.1 = ListIn:A.1;  //_GUI 148,33, 142,33
 PushLsb:A.0 = ListIn.0;  //_GUI 145,36, 145,30
 PushLsb:A.1 = ListIn:A.0;  
}

Object ( Variant OFL, Variant R, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Add_Pipe
    ( ZTList A, Variant B, Bit Add, Bit ClkG
    , Bit AClr, Bit Go, Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/Var/Bit"
{
 //_ Object Prototypes
 Object ( ZTList A) Input;  //_GUI 22,18
 Object ( Variant B) Input:A;  //_GUI 22,21
 Object ( Bit Add) Input:B;  //_GUI 22,28
 //_Attributes Constant="1"
 Object ( Bit ClkG) Input:C;  //_GUI 22,31
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:D;  //_GUI 22,34
 //_Attributes Constant="0"
 Object ( Bit Go) Input:E;  //_GUI 22,37
 Object ( Bit Wait) Input:F;  //_GUI 74,43
 //_Attributes Constant="0"
 Object Output( Variant OFL) ;  //_GUI 75,22
 Object Output:A( Variant R) ;  //_GUI 75,25
 Object Output:B( Variant PipeLen) ;  //_GUI 75,28
 Object Output:C( Bit ClkG) ;  //_GUI 75,31
 Object Output:D( Bit AClr) ;  //_GUI 75,34
 Object Output:E( Bit Done) ;  //_GUI 75,37
 Object Output:F( Bit Busy) ;  //_GUI 23,43
 Object ( Variant DataList) ListFill( Variant Data, Variant List) ;  //_GUI 32,20
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction
    ( ZTList In0) ;  //_GUI 28,18
 Object ( Variant OFL, Variant R, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Add_Pipe
    ( Variant A, Variant B, Bit Add, Bit ClkG
    , Bit AClr, Bit Go, Bit Wait) ;  //_GUI 49,21
 //_Attributes Documentation="complex"

 // Behavior Topology
 Output.0 = Add_Pipe.0;  
 Output:A.0 = Add_Pipe.1;  
 Output:B.0 = Add_Pipe.2;  
 Output:C.0 = Add_Pipe.3;  
 Output:D.0 = Add_Pipe.4;  
 Output:E.0 = Add_Pipe.5;  
 Output:F.0 = Add_Pipe.6;  //_GUI 23,41
 ListFill.0 = Input:A.0;  
 ListFill.1 = Junction.2;  //_GUI 29,25
 Junction.0 = Input.0;  
 Add_Pipe.0 = Junction.1;  //_GUI 49,19
 Add_Pipe.1 = ListFill.0;  //_GUI 45,26
 Add_Pipe.2 = Input:B.0;  
 Add_Pipe.3 = Input:C.0;  
 Add_Pipe.4 = Input:D.0;  
 Add_Pipe.5 = Input:E.0;  
 Add_Pipe.6 = Input:F.0;  //_GUI 78,41
}

Object ( Variant OFL, Variant R, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Add_Pipe
    ( Variant A, ZTList B, Bit Add, Bit ClkG
    , Bit AClr, Bit Go, Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="Var/ztlist/Bit"
{
 //_ Object Prototypes
 Object ( Variant A) Input;  //_GUI 23,18
 Object ( ZTList B) Input:A;  //_GUI 23,25
 Object ( Bit Add) Input:B;  //_GUI 23,28
 //_Attributes Constant="1"
 Object ( Bit ClkG) Input:C;  //_GUI 23,31
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:D;  //_GUI 23,34
 //_Attributes Constant="0"
 Object ( Bit Go) Input:E;  //_GUI 23,37
 Object ( Bit Wait) Input:F;  //_GUI 74,43
 //_Attributes Constant="0"
 Object Output( Variant OFL) ;  //_GUI 75,22
 Object Output:A( Variant R) ;  //_GUI 75,25
 Object Output:B( Variant PipeLen) ;  //_GUI 75,28
 Object Output:C( Bit ClkG) ;  //_GUI 75,31
 Object Output:D( Bit AClr) ;  //_GUI 75,34
 Object Output:E( Bit Done) ;  //_GUI 75,37
 Object Output:F( Bit Busy) ;  //_GUI 24,43
 Object ( Variant DataList) ListFill( Variant Data, Variant List) ;  //_GUI 32,17
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction
    ( ZTList In0) ;  //_GUI 31,25
 Object ( Variant OFL, Variant R, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Add_Pipe
    ( Variant A, Variant B, Bit Add, Bit ClkG
    , Bit AClr, Bit Go, Bit Wait) ;  //_GUI 49,21
 //_Attributes Documentation="complex"

 // Behavior Topology
 Output.0 = Add_Pipe.0;  
 Output:A.0 = Add_Pipe.1;  
 Output:B.0 = Add_Pipe.2;  
 Output:C.0 = Add_Pipe.3;  
 Output:D.0 = Add_Pipe.4;  
 Output:E.0 = Add_Pipe.5;  
 Output:F.0 = Add_Pipe.6;  //_GUI 24,41
 ListFill.0 = Input.0;  
 ListFill.1 = Junction.0;  
 Junction.0 = Input:A.0;  
 Add_Pipe.0 = ListFill.0;  //_GUI 47,23, 47,20
 Add_Pipe.1 = Junction.1;  
 Add_Pipe.2 = Input:B.0;  
 Add_Pipe.3 = Input:C.0;  
 Add_Pipe.4 = Input:D.0;  
 Add_Pipe.5 = Input:E.0;  
 Add_Pipe.6 = Input:F.0;  //_GUI 78,41
}

Object ( Variant OFL, Variant Q, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Div_Pipe
    ( ZTList A, ZTList B, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/ztlist"
{
 //_ Object Prototypes
 Object ( ZTList A) Input;  //_GUI 17,38
 Object ( ZTList B) Input:A;  //_GUI 17,47
 Object ( Bit ClkG) Input:B;  //_GUI 17,53
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:C;  //_GUI 17,56
 //_Attributes Constant="0"
 Object ( Bit Go) Input:D;  //_GUI 17,59
 Object ( Bit Wait) Input:E;  //_GUI 170,71
 //_Attributes Constant="0"
 Object Output( Variant OFL) ;  //_GUI 171,28
 Object Output:A( Variant Q) ;  //_GUI 171,37
 Object Output:B( Variant PipeLen) ;  //_GUI 171,46
 Object Output:C( Bit ClkG) ;  //_GUI 171,49
 Object Output:D( Bit AClr) ;  //_GUI 171,52
 Object Output:E( Bit Done) ;  //_GUI 171,64
 Object Output:F( Bit Busy) ;  //_GUI 18,66
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction
    ( Bit In0) ;  //_GUI 43,53
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:A
    ( Bit In0) ;  //_GUI 46,56
 Object ( Variant A, Variant B, Variant PipeLenA
    , Variant PipeLenB, Variant FullPipeLen, Bit ClkG, Bit AClr
    , Bit BusyA, Bit BusyB, Bit Done) SyncRegPair_Pipe( Variant A
    , Variant B, Variant PipeLenA, Variant PipeLenB, Bit ClkG
    , Bit AClr, Bit GoA, Bit GoB, Bit Wait) ;  //_GUI 107,33
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:B
    ( Bit In0) ;  //_GUI 49,59
 Object ( Variant Out1, Variant Out2) ListIn( List In) ;  //_GUI 136,35
 Object ( List Out) ListOut( Variant In1, Variant In2) ;  //_GUI 74,8
 Object ( List Out) ListOut:A( Variant In1, Variant In2) ;  //_GUI 74,71
 Object ( Variant Out1, Variant Out2) ListIn:A( List In) ;  //_GUI 136,26
 Object ( Variant OFL, Variant Q, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Div_Pipe
    ( Variant A, Variant B, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) ;  //_GUI 59,8
 Object ( Variant OFL, Variant Q, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Div_Pipe:A
    ( Variant A, Variant B, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) ;  //_GUI 59,71
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 153,26
 Object ( Variant Out1) PushLsb:A( Variant In1, Variant LSB) ;  //_GUI 153,35
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 25,36
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 25,45

 // Behavior Topology
 Output.0 = PushLsb.0;  
 Output:A.0 = PushLsb:A.0;  
 Output:B.0 = SyncRegPair_Pipe.4;  
 Output:C.0 = SyncRegPair_Pipe.5;  
 Output:D.0 = SyncRegPair_Pipe.6;  
 Output:E.0 = SyncRegPair_Pipe.9;  
 Output:F.0 = Div_Pipe:A.6;  //_GUI 18,63, 53,63, 53,91
 Junction.0 = Input:B.0;  
 Junction:A.0 = Input:C.0;  
 SyncRegPair_Pipe.0 = ListOut.0;  //_GUI 88,35, 88,11
 SyncRegPair_Pipe.1 = ListOut:A.0;  //_GUI 88,38, 88,74
 SyncRegPair_Pipe.2 = Div_Pipe.3;  //_GUI 91,41, 91,19
 SyncRegPair_Pipe.3 = Div_Pipe:A.2;  //_GUI 91,44, 91,79
 SyncRegPair_Pipe.4 = Div_Pipe:A.3;  //_GUI 94,47, 94,82
 SyncRegPair_Pipe.5 = Div_Pipe:A.4;  //_GUI 97,50, 97,85
 SyncRegPair_Pipe.6 = Div_Pipe.5;  //_GUI 100,53, 100,25
 SyncRegPair_Pipe.7 = Div_Pipe:A.5;  //_GUI 100,56, 100,88
 SyncRegPair_Pipe.8 = Input:E.0;  //_GUI 174,68
 Junction:B.0 = Input:D.0;  
 ListIn.0 = SyncRegPair_Pipe.1;  
 ListOut.0 = Div_Pipe.1;  
 ListOut.1 = Div_Pipe.0;  
 ListOut:A.0 = Div_Pipe:A.1;  
 ListOut:A.1 = Div_Pipe:A.0;  
 ListIn:A.0 = SyncRegPair_Pipe.0;  //_GUI 134,29, 134,35
 Div_Pipe.0 = PopLsb.0;  //_GUI 38,10, 38,38
 Div_Pipe.1 = PopLsb:A.0;  //_GUI 41,13, 41,47
 Div_Pipe.2 = Junction.0;  //_GUI 44,16
 Div_Pipe.3 = Junction:A.0;  //_GUI 47,19
 Div_Pipe.4 = Junction:B.0;  //_GUI 50,25
 Div_Pipe.5 = SyncRegPair_Pipe.7;  //_GUI 131,28, 131,56
 Div_Pipe:A.0 = PopLsb.1;  //_GUI 38,73, 38,41
 Div_Pipe:A.1 = PopLsb:A.1;  //_GUI 41,76, 41,50
 Div_Pipe:A.2 = Junction.2;  //_GUI 44,79
 Div_Pipe:A.3 = Junction:A.2;  //_GUI 47,82
 Div_Pipe:A.4 = Junction:B.2;  //_GUI 50,88
 Div_Pipe:A.5 = SyncRegPair_Pipe.8;  //_GUI 131,91, 131,59
 PushLsb.0 = ListIn:A.1;  
 PushLsb.1 = ListIn.1;  //_GUI 150,31, 150,37
 PushLsb:A.0 = ListIn:A.0;  //_GUI 153,34, 147,34
 PushLsb:A.1 = ListIn.0;  
 PopLsb.0 = Input.0;  
 PopLsb:A.0 = Input:A.0;  
}

Object ( Variant OFL, Variant Q, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Div_Pipe
    ( Variant A, ZTList B, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="var/ztlist"
{
 //_ Object Prototypes
 Object ( Variant A) Input;  //_GUI 23,18
 Object ( ZTList B) Input:A;  //_GUI 23,25
 Object ( Bit ClkG) Input:B;  //_GUI 23,28
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:C;  //_GUI 23,31
 //_Attributes Constant="0"
 Object ( Bit Go) Input:D;  //_GUI 23,37
 Object ( Bit Wait) Input:E;  //_GUI 74,43
 //_Attributes Constant="0"
 Object Output( Variant OFL) ;  //_GUI 75,22
 Object Output:A( Variant Q) ;  //_GUI 75,25
 Object Output:B( Variant PipeLen) ;  //_GUI 75,28
 Object Output:C( Bit ClkG) ;  //_GUI 75,31
 Object Output:D( Bit AClr) ;  //_GUI 75,34
 Object Output:E( Bit Done) ;  //_GUI 75,37
 Object Output:F( Bit Busy) ;  //_GUI 24,43
 Object ( Variant DataList) ListFill( Variant Data, Variant List) ;  //_GUI 32,17
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction
    ( ZTList In0) ;  //_GUI 31,25
 Object ( Variant OFL, Variant Q, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Div_Pipe
    ( Variant A, Variant B, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) ;  //_GUI 49,21

 // Behavior Topology
 Output.0 = Div_Pipe.0;  
 Output:A.0 = Div_Pipe.1;  
 Output:B.0 = Div_Pipe.2;  
 Output:C.0 = Div_Pipe.3;  
 Output:D.0 = Div_Pipe.4;  
 Output:E.0 = Div_Pipe.5;  
 Output:F.0 = Div_Pipe.6;  //_GUI 24,41
 ListFill.0 = Input.0;  
 ListFill.1 = Junction.0;  
 Junction.0 = Input:A.0;  
 Div_Pipe.0 = ListFill.0;  //_GUI 47,23, 47,20
 Div_Pipe.1 = Junction.1;  
 Div_Pipe.2 = Input:B.0;  
 Div_Pipe.3 = Input:C.0;  
 Div_Pipe.4 = Input:D.0;  
 Div_Pipe.5 = Input:E.0;  //_GUI 78,41
}

Object ( Variant OFL, Variant Q, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Div_Pipe
    ( ZTList A, Variant B, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist/var"
{
 //_ Object Prototypes
 Object ( ZTList A) Input;  //_GUI 22,18
 Object ( Variant B) Input:A;  //_GUI 22,21
 Object ( Bit ClkG) Input:B;  //_GUI 22,28
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:C;  //_GUI 22,31
 //_Attributes Constant="0"
 Object ( Bit Go) Input:D;  //_GUI 22,37
 Object ( Bit Wait) Input:E;  //_GUI 74,43
 //_Attributes Constant="0"
 Object Output( Variant OFL) ;  //_GUI 75,22
 Object Output:A( Variant Q) ;  //_GUI 75,25
 Object Output:B( Variant PipeLen) ;  //_GUI 75,28
 Object Output:C( Bit ClkG) ;  //_GUI 75,31
 Object Output:D( Bit AClr) ;  //_GUI 75,34
 Object Output:E( Bit Done) ;  //_GUI 75,37
 Object Output:F( Bit Busy) ;  //_GUI 23,43
 Object ( Variant DataList) ListFill( Variant Data, Variant List) ;  //_GUI 32,20
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction
    ( ZTList In0) ;  //_GUI 28,18
 Object ( Variant OFL, Variant Q, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Div_Pipe
    ( Variant A, Variant B, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) ;  //_GUI 49,21

 // Behavior Topology
 Output.0 = Div_Pipe.0;  
 Output:A.0 = Div_Pipe.1;  
 Output:B.0 = Div_Pipe.2;  
 Output:C.0 = Div_Pipe.3;  
 Output:D.0 = Div_Pipe.4;  
 Output:E.0 = Div_Pipe.5;  
 Output:F.0 = Div_Pipe.6;  //_GUI 23,41
 ListFill.0 = Input:A.0;  
 ListFill.1 = Junction.2;  //_GUI 29,25
 Junction.0 = Input.0;  
 Div_Pipe.0 = Junction.1;  //_GUI 49,19
 Div_Pipe.1 = ListFill.0;  //_GUI 45,26
 Div_Pipe.2 = Input:B.0;  
 Div_Pipe.3 = Input:C.0;  
 Div_Pipe.4 = Input:D.0;  
 Div_Pipe.5 = Input:E.0;  //_GUI 78,41
}

Object ( Variant OFL, Variant S, Variant R
    , Variant PipeLen, Bit ClkG, Bit AClr, Bit Done
    , Bit Busy) Sqrt_Pipe( ZTList N, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList N) Input;  //_GUI 17,47
 Object ( Bit ClkG) Input:A;  //_GUI 17,53
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:B;  //_GUI 17,56
 //_Attributes Constant="0"
 Object ( Bit Go) Input:C;  //_GUI 17,59
 Object ( Bit Wait) Input:D;  //_GUI 183,71
 //_Attributes Constant="0"
 Object Output( Variant OFL) ;  //_GUI 184,21
 Object Output:A( Variant S) ;  //_GUI 184,31
 Object Output:B( Variant R) ;  //_GUI 184,40
 Object Output:C( Variant PipeLen) ;  //_GUI 184,46
 Object Output:D( Bit ClkG) ;  //_GUI 184,49
 Object Output:E( Bit AClr) ;  //_GUI 184,52
 Object Output:F( Bit Done) ;  //_GUI 184,64
 Object Output:G( Bit Busy) ;  //_GUI 18,66
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction
    ( Bit In0) ;  //_GUI 43,53
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:A
    ( Bit In0) ;  //_GUI 46,56
 Object ( List Out1) PackLSB( Variant In1, Variant In2
    , Variant In3) ;  //_GUI 75,8
 Object ( Variant Out1, Variant Out2, Variant Out3) UnPackLSB
    ( Variant In1) ;  //_GUI 137,19
 Object ( Variant Out1, Variant Out2, Variant Out3) UnPackLSB:A
    ( Variant In1) ;  //_GUI 137,35
 Object ( List Out1) PackLSB:A( Variant In1, Variant In2
    , Variant In3) ;  //_GUI 75,71
 Object ( Variant A, Variant B, Variant PipeLenA
    , Variant PipeLenB, Variant FullPipeLen, Bit ClkG, Bit AClr
    , Bit BusyA, Bit BusyB, Bit Done) SyncRegPair_Pipe( Variant A
    , Variant B, Variant PipeLenA, Variant PipeLenB, Bit ClkG
    , Bit AClr, Bit GoA, Bit GoB, Bit Wait) ;  //_GUI 108,33
 Object ( Bit Out1, Bit Out2, Bit Out3) Junction:B
    ( Bit In0) ;  //_GUI 49,59
 Object ( Variant OFL, Variant S, Variant R
    , Variant PipeLen, Bit ClkG, Bit AClr, Bit Done
    , Bit Busy) Sqrt_Pipe( Variant N, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) ;  //_GUI 60,8
 Object ( Variant OFL, Variant S, Variant R
    , Variant PipeLen, Bit ClkG, Bit AClr, Bit Done
    , Bit Busy) Sqrt_Pipe:A( Variant N, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) ;  //_GUI 59,71
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 25,45
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 166,19
 Object ( Variant Out1) PushLsb:A( Variant In1, Variant LSB) ;  //_GUI 166,29
 Object ( Variant Out1) PushLsb:B( Variant In1, Variant LSB) ;  //_GUI 166,38

 // Behavior Topology
 Output.0 = PushLsb.0;  
 Output:A.0 = PushLsb:A.0;  
 Output:B.0 = PushLsb:B.0;  
 Output:C.0 = SyncRegPair_Pipe.4;  
 Output:D.0 = SyncRegPair_Pipe.5;  
 Output:E.0 = SyncRegPair_Pipe.6;  
 Output:F.0 = SyncRegPair_Pipe.9;  
 Output:G.0 = Sqrt_Pipe:A.7;  //_GUI 18,63, 53,63, 53,94
 Junction.0 = Input:A.0;  
 Junction:A.0 = Input:B.0;  
 PackLSB.0 = Sqrt_Pipe.0;  
 PackLSB.1 = Sqrt_Pipe.1;  
 PackLSB.2 = Sqrt_Pipe.2;  
 UnPackLSB.0 = SyncRegPair_Pipe.0;  //_GUI 135,22, 135,35
 UnPackLSB:A.0 = SyncRegPair_Pipe.1;  
 PackLSB:A.0 = Sqrt_Pipe:A.0;  
 PackLSB:A.1 = Sqrt_Pipe:A.1;  
 PackLSB:A.2 = Sqrt_Pipe:A.2;  
 SyncRegPair_Pipe.0 = PackLSB.0;  //_GUI 89,35, 89,11
 SyncRegPair_Pipe.1 = PackLSB:A.0;  //_GUI 89,38, 89,74
 SyncRegPair_Pipe.2 = Sqrt_Pipe.3;  //_GUI 92,41, 92,19
 SyncRegPair_Pipe.3 = Sqrt_Pipe:A.3;  //_GUI 92,44, 92,82
 SyncRegPair_Pipe.4 = Sqrt_Pipe:A.4;  //_GUI 95,47, 95,85
 SyncRegPair_Pipe.5 = Sqrt_Pipe:A.5;  //_GUI 98,50, 98,88
 SyncRegPair_Pipe.6 = Sqrt_Pipe.6;  //_GUI 101,53, 101,28
 SyncRegPair_Pipe.7 = Sqrt_Pipe:A.6;  //_GUI 101,56, 101,91
 SyncRegPair_Pipe.8 = Input:D.0;  //_GUI 187,68
 Junction:B.0 = Input:C.0;  
 Sqrt_Pipe.0 = PopLsb.0;  //_GUI 41,10, 41,47
 Sqrt_Pipe.1 = Junction.0;  //_GUI 44,13
 Sqrt_Pipe.2 = Junction:A.0;  //_GUI 47,16
 Sqrt_Pipe.3 = Junction:B.0;  //_GUI 50,28
 Sqrt_Pipe.4 = SyncRegPair_Pipe.7;  //_GUI 132,31, 132,56
 Sqrt_Pipe:A.0 = PopLsb.1;  //_GUI 41,73, 41,50
 Sqrt_Pipe:A.1 = Junction.2;  //_GUI 44,76
 Sqrt_Pipe:A.2 = Junction:A.2;  //_GUI 47,79
 Sqrt_Pipe:A.3 = Junction:B.2;  //_GUI 50,91
 Sqrt_Pipe:A.4 = SyncRegPair_Pipe.8;  //_GUI 132,94, 132,59
 PopLsb.0 = Input.0;  
 PushLsb.0 = UnPackLSB.0;  
 PushLsb.1 = UnPackLSB:A.0;  //_GUI 163,24, 163,31, 150,31
 PushLsb:A.0 = UnPackLSB.1;  //_GUI 166,28, 159,28, 159,24
 PushLsb:A.1 = UnPackLSB:A.1;  //_GUI 153,34, 153,40
 PushLsb:B.0 = UnPackLSB.2;  //_GUI 156,40, 156,27
 PushLsb:B.1 = UnPackLSB:A.2;  
}

Object ( Variant AND, Variant OR, Variant XOR
    , Variant PipeLen, Bit ClkG, Bit AClr, Bit Done
    , Bit Busy) Gate-List_Pipe( ZTList List, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList List) Input;  //_GUI 9,12
 Object ( Bit ClkG) Input:A;  //_GUI 36,15
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:B;  //_GUI 36,18
 //_Attributes Constant="0"
 Object ( Bit Go) Input:C;  //_GUI 38,30
 Object ( Bit Wait) Input:D;  //_GUI 57,43
 //_Attributes Constant="0"
 Object Output( Variant AND) ;  //_GUI 61,12
 Object Output:A( Variant OR) ;  //_GUI 60,15
 Object Output:B( Variant XOR) ;  //_GUI 60,18
 Object Output:C( Variant PipeLen) ;  //_GUI 58,21
 Object Output:D( Bit ClkG) ;  //_GUI 59,24
 Object Output:E( Bit AClr) ;  //_GUI 59,27
 Object Output:F( Bit Done) ;  //_GUI 59,30
 Object Output:G( Bit Busy) ;  //_GUI 39,39
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 17,10
 //_Attributes Documentation="ztlist"
 Object ( Variant AND, Variant OR, Variant XOR
    , Variant PipeLen, Bit ClkG, Bit AClr, Bit Done
    , Bit Busy) Gate-List_Pipe( List List, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) ;  //_GUI 42,11

 // Behavior Topology
 Output.0 = Gate-List_Pipe.0;  
 Output:A.0 = Gate-List_Pipe.1;  
 Output:B.0 = Gate-List_Pipe.2;  
 Output:C.0 = Gate-List_Pipe.3;  
 Output:D.0 = Gate-List_Pipe.4;  
 Output:E.0 = Gate-List_Pipe.5;  
 Output:F.0 = Gate-List_Pipe.6;  
 Output:G.0 = Gate-List_Pipe.7;  //_GUI 39,34
 ZTListToLSBList.0 = Input.0;  
 Gate-List_Pipe.0 = ZTListToLSBList.0;  
 Gate-List_Pipe.1 = Input:A.0;  
 Gate-List_Pipe.2 = Input:B.0;  
 Gate-List_Pipe.3 = Input:C.0;  
 Gate-List_Pipe.4 = Input:D.0;  //_GUI 61,34
}

Object ( Bit OFL, Variant S, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Sum_Pipe
    ( ZTList List, Bit ClkG, Bit AClr, Bit Go
    , Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ztlist"
{
 //_ Object Prototypes
 Object ( ZTList List) Input;  //_GUI 11,11
 Object ( Bit ClkG) Input:A;  //_GUI 39,14
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:B;  //_GUI 39,17
 //_Attributes Constant="0"
 Object ( Bit Go) Input:C;  //_GUI 39,26
 Object ( Bit Wait) Input:D;  //_GUI 54,34
 //_Attributes Constant="0"
 Object Output( Bit OFL) ;  //_GUI 60,11
 Object Output:A( Variant S) ;  //_GUI 60,14
 Object Output:B( Variant PipeLen) ;  //_GUI 63,17
 Object Output:C( Bit ClkG) ;  //_GUI 62,20
 Object Output:D( Bit AClr) ;  //_GUI 62,23
 Object Output:E( Bit Done) ;  //_GUI 60,26
 Object Output:F( Bit Busy) ;  //_GUI 45,38
 Object ( Bit OFL, Variant S, Variant PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Sum_Pipe
    ( Variant List, Bit ClkG, Bit AClr, Bit Go
    , Bit Wait) ;  //_GUI 45,10
 //_Attributes Documentation="leaf"
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 17,9
 //_Attributes Documentation="ztlist"

 // Behavior Topology
 Output.0 = Sum_Pipe.0;  
 Output:A.0 = Sum_Pipe.1;  
 Output:B.0 = Sum_Pipe.2;  
 Output:C.0 = Sum_Pipe.3;  
 Output:D.0 = Sum_Pipe.4;  
 Output:E.0 = Sum_Pipe.5;  
 Output:F.0 = Sum_Pipe.6;  
 Sum_Pipe.0 = ZTListToLSBList.0;  
 Sum_Pipe.1 = Input:A.0;  
 Sum_Pipe.2 = Input:B.0;  
 Sum_Pipe.3 = Input:C.0;  
 Sum_Pipe.4 = Input:D.0;  
 ZTListToLSBList.0 = Input.0;  
}

Object ( List Out1) Cat( List Hi, List Lo) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="list/list"
{
 //_ Object Prototypes
 Object ( List Hi) Input;  //_GUI 7,19
 Object ( List Lo) Input:A;  //_GUI 7,22
 Object Output( List Out1) ;  //_GUI 34,20
 Object ( List LsbList) LsbList( Variant AnyList_Hi, Variant AnyList_Lo) ;  //_GUI 13,18

 // Behavior Topology
 Output.0 = LsbList.0;  
 LsbList.0 = Input.0;  
 LsbList.1 = Input:A.0;  
}

Object ( ZTerm OFL, ZTerm R, NULL PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Add_Pipe
    ( ZTerm A, ZTerm B, Bit Add, Bit ClkG
    , Bit AClr, Bit Go, Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/zterm/Bit"
{
 //_ Object Prototypes
 Object ( ZTerm A) Input;  //_GUI 8,30
 Object ( ZTerm B) Input:A;  //_GUI 8,39
 Object ( Bit Add) Input:B;  //_GUI 8,46
 //_Attributes Constant="1"
 Object ( Bit ClkG) Input:C;  //_GUI 8,52
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:D;  //_GUI 8,55
 //_Attributes Constant="0"
 Object ( Bit Go) Input:E;  //_GUI 8,58
 Object ( Bit Wait) Input:F;  //_GUI 85,65
 //_Attributes Constant="0"
 Object Output( ZTerm OFL) ;  //_GUI 18,30
 Object Output:A( ZTerm R) ;  //_GUI 21,39
 Object Output:B( NULL PipeLen) ;  //_GUI 79,47
 Object Output:C( Bit ClkG) ;  //_GUI 80,52
 Object Output:D( Bit AClr) ;  //_GUI 80,55
 Object Output:E( Bit Done) ;  //_GUI 86,58
 Object Output:F( Bit Busy) ;  //_GUI 9,67
 Object ( NULL Out1) NULL;  //_GUI 63,45

 // Behavior Topology
 Output.0 = Input.0;  
 Output:A.0 = Input:A.0;  
 Output:B.0 = NULL.0;  
 Output:C.0 = Input:C.0;  
 Output:D.0 = Input:D.0;  
 Output:E.0 = Input:E.0;  
 Output:F.0 = Input:F.0;  //_GUI 9,62, 89,62
}

Object ( ZTerm OFL, ZTerm Q, NULL PipeLen
    , Bit ClkG, Bit AClr, Bit Done, Bit Busy) Div_Pipe
    ( ZTerm A, ZTerm B, Bit ClkG, Bit AClr
    , Bit Go, Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/zterm"
{
 //_ Object Prototypes
 Object ( ZTerm A) Input;  //_GUI 16,23
 Object ( ZTerm B) Input:A;  //_GUI 16,32
 Object ( Bit ClkG) Input:B;  //_GUI 17,53
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:C;  //_GUI 17,56
 //_Attributes Constant="0"
 Object ( Bit Go) Input:D;  //_GUI 17,59
 Object ( Bit Wait) Input:E;  //_GUI 94,66
 //_Attributes Constant="0"
 Object Output( ZTerm OFL) ;  //_GUI 33,23
 Object Output:A( ZTerm Q) ;  //_GUI 35,32
 Object Output:B( NULL PipeLen) ;  //_GUI 75,43
 Object Output:C( Bit ClkG) ;  //_GUI 89,53
 Object Output:D( Bit AClr) ;  //_GUI 89,56
 Object Output:E( Bit Done) ;  //_GUI 95,59
 Object Output:F( Bit Busy) ;  //_GUI 17,66
 Object ( NULL Out1) NULL;  //_GUI 54,41

 // Behavior Topology
 Output.0 = Input.0;  
 Output:A.0 = Input:A.0;  
 Output:B.0 = NULL.0;  
 Output:C.0 = Input:B.0;  
 Output:D.0 = Input:C.0;  
 Output:E.0 = Input:D.0;  
 Output:F.0 = Input:E.0;  //_GUI 17,63, 98,63
}

Object ( ZTerm R, NULL PipeLen, Bit ClkG
    , Bit AClr, Bit Done, Bit Busy) Mul_Pipe( ZTerm A
    , ZTerm B, Bit ClkG, Bit AClr, Bit Go
    , Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="zterm/zterm"
{
 //_ Object Prototypes
 Object ( ZTerm A) Input;  //_GUI 17,38
 Object ( ZTerm B) Input:A;  //_GUI 17,47
 Object ( Bit ClkG) Input:B;  //_GUI 17,53
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:C;  //_GUI 17,56
 //_Attributes Constant="0"
 Object ( Bit Go) Input:D;  //_GUI 17,59
 Object ( Bit Wait) Input:E;  //_GUI 61,66
 //_Attributes Constant="0"
 Object Output( ZTerm R) ;  //_GUI 54,38
 Object Output:A( NULL PipeLen) ;  //_GUI 66,46
 Object Output:B( Bit ClkG) ;  //_GUI 56,53
 Object Output:C( Bit AClr) ;  //_GUI 56,56
 Object Output:D( Bit Done) ;  //_GUI 62,59
 Object Output:E( Bit Busy) ;  //_GUI 18,66
 Object ( NULL Out1) NULL;  //_GUI 45,44

 // Behavior Topology
 Output.0 = Input.0;  
 Output:A.0 = NULL.0;  
 Output:B.0 = Input:B.0;  
 Output:C.0 = Input:C.0;  
 Output:D.0 = Input:D.0;  
 Output:E.0 = Input:E.0;  //_GUI 18,63, 65,63
}

Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="var"
{
 //_ Object Prototypes
 Object ( Variant ZTList) Input;  //_GUI 20,32
 Object Output( Variant LSBList) ;  //_GUI 29,32

 // Behavior Topology
 Output.0 = Input.0;  
}

Object ( Variant Data) List_Mux( ZTList ListData, Variant Mask) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTList/var"
{
 //_ Object Prototypes
 Object ( ZTList ListData) Input;  //_GUI 42,40
 Object ( Variant Mask) Input:A;  //_GUI 42,43
 Object Output( Variant Data) ;  //_GUI 87,41
 Object Text;  //_GUI 35,20,An N-dimention mux
 Object ( Variant Data) List_Mux( Variant Data, Variant Mask) ;  //_GUI 70,39
 //_Attributes Documentation="zterm/zterm"
 Object ( Variant Out1) Bit_ZTList( Variant In1) ;  //_GUI 49,41
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = List_Mux.0;  
 List_Mux.0 = Input.0;  
 List_Mux.1 = Bit_ZTList.0;  
 Bit_ZTList.0 = Input:A.0;  
}

Object ( Variant Data) $List_Mux_Sel( ZTList ListData, NULL Sel) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTList/NULL"
{
 //_ Object Prototypes
 Object ( ZTList ListData) Input;  //_GUI 23,25
 Object ( NULL Sel) Input:A;  //_GUI 15,41
 Object Output( Variant Data) ;  //_GUI 101,26
 Object ( Bit Out1) IsZTerm( Variant In1) ;  //_GUI 65,37
 //_Attributes Documentation="zterm"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 37,38
 //_Attributes Documentation="ztlist"
 Object ( Variant Out) $Select( Variant "#0", Variant "#1"
    , Bit S) ;  //_GUI 85,24
 Object ( ZTList Out1, ZTList Out2, ZTList Out3) Junction
    ( ZTList In0) ;  //_GUI 31,25
 Object Text;  //_GUI 56,47,The Bisect always returns ZTLists in the case of ZTList input. If the input ZTList is only two elements, you get two one-element ZTLists out.We think this $Select is unnecessary because we can't think of a case where ListData will be any larger than a single element on the outer dimension. Therefore, the Pop should be sufficient.

 // Behavior Topology
 Output.0 = $Select.0;  
 IsZTerm.0 = PopLsb.0;  
 PopLsb.0 = Junction.2;  //_GUI 32,41
 $Select.0 = Junction.1;  
 $Select.1 = PopLsb.1;  //_GUI 54,29, 54,43
 $Select.2 = IsZTerm.0;  //_GUI 80,32, 80,40
 Junction.0 = Input.0;  
}

Object ( Variant Data, ZTerm Context) $Context( ZTerm Context
    , Variant Data) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTerm"
{
 // Date:
 // 8/9/04
 //
 // Revision 1
 //_ Object Prototypes
 Object ( ZTerm Context) Input;  //_GUI 14,12
 Object ( Variant Data) Input:A;  //_GUI 14,15
 Object Output( Variant Data) ;  //_GUI 26,9
 Object Output:A( ZTerm Context) ;  //_GUI 26,12

 // Behavior Topology
 Output.0 = Input:A.0;  //_GUI 22,10, 22,16
 Output:A.0 = Input.0;  
}

Object ( NULL Data, ZTerm Context) $Context( ZTerm Context
    , NULL Data) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTerm/NULL"
{
 // Date:
 // 8/9/04
 //
 // Revision 1
 //_ Object Prototypes
 Object ( ZTerm Context) Input;  //_GUI 14,12
 Object ( NULL Data) Input:A;  //_GUI 14,15
 Object Output( NULL Data) ;  //_GUI 26,9
 Object Output:A( ZTerm Context) ;  //_GUI 26,12

 // Behavior Topology
 Output.0 = Input:A.0;  //_GUI 22,10, 22,16
 Output:A.0 = Input.0;  
}

Object ( ZTList Data, Bit ClkG, Bit AClr
    , Bit Done, ZTList Busy) SyncRegClr( ZTList Data, Bit ClkG
    , Bit AClr, ZTList Go, Bit Wait) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTList"
{
 //_ Object Prototypes
 Object ( ZTList Data) Input;  //_GUI 12,12
 Object ( Bit ClkG) Input:A;  //_GUI 31,15
 //_Attributes Resource=*Global
 Object ( Bit AClr) Input:B;  //_GUI 31,18
 //_Attributes Constant="0"
 Object ( ZTList Go) Input:C;  //_GUI 12,21
 Object ( Bit Wait) Input:D;  //_GUI 45,32
 //_Attributes Constant="0"
 Object Output( ZTList Data) ;  //_GUI 80,12
 Object Output:A( Bit ClkG) ;  //_GUI 51,15
 Object Output:B( Bit AClr) ;  //_GUI 51,18
 Object Output:C( Bit Done) ;  //_GUI 51,21
 Object Output:D( ZTList Busy) ;  //_GUI 37,39
 Object ( Variant Data, Bit ClkG, Bit AClr
    , Bit Done, Variant Busy) SyncRegClr( Variant Data, Bit ClkG
    , Bit AClr, Variant Go, Bit Wait) ;  //_GUI 37,11
 //_Attributes Documentation="List/List"
 Object ( Variant LSBList) ZTListToLSBList( Variant ZTList) ;  //_GUI 18,10
 //_Attributes Documentation="ztlist"
 Object ( Variant LSBList) ZTListToLSBList:A( Variant ZTList) ;  //_GUI 18,19
 //_Attributes Documentation="ztlist"
 Object ( ZTList ZTList) LsbListToZTList( Variant LsbList) ;  //_GUI 19,37
 //_Attributes Documentation="var"
 Object ( ZTList ZTList) LsbListToZTList:A( Variant LsbList) ;  //_GUI 62,10
 //_Attributes Documentation="var"

 // Behavior Topology
 Output.0 = LsbListToZTList:A.0;  
 Output:A.0 = SyncRegClr.1;  
 Output:B.0 = SyncRegClr.2;  
 Output:C.0 = SyncRegClr.3;  
 Output:D.0 = LsbListToZTList.0;  
 SyncRegClr.0 = ZTListToLSBList.0;  
 SyncRegClr.1 = Input:A.0;  
 SyncRegClr.2 = Input:B.0;  
 SyncRegClr.3 = ZTListToLSBList:A.0;  
 SyncRegClr.4 = Input:D.0;  
 ZTListToLSBList.0 = Input.0;  
 ZTListToLSBList:A.0 = Input:C.0;  
 LsbListToZTList.0 = SyncRegClr.4;  //_GUI 19,33, 37,33
 LsbListToZTList:A.0 = SyncRegClr.0;  
}

Object ( ZTerm MSB, ZTerm Out2) LeafPopLsb( ZTerm In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="zterm"
{
 //_ Object Prototypes
 Object ( ZTerm In1) Input;  //_GUI 30,28
 Object Output( ZTerm MSB) ;  //_GUI 89,28
 Object Output:A( ZTerm Out2) ;  //_GUI 89,37
 Object Text;  //_GUI 45,21,Signal the end of both lists
 Object ( ZTerm Out1, ZTerm Out2, ZTerm Out3) Junction
    ( ZTerm In0) ;  //_GUI 83,28

 // Behavior Topology
 Output.0 = Junction.1;  
 Output:A.0 = Junction.2;  //_GUI 84,38
 Junction.0 = Input.0;  
}

Object ( Variant MSB, Variant Out1) LeafPopLsb( ZTList In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="ztlist"
{
 // The MSB value is not coming out correctly
 //_ Object Prototypes
 Object ( ZTList In1) Input;  //_GUI 30,32
 Object Output( Variant MSB) ;  //_GUI 96,28
 Object Output:A( Variant Out1) ;  //_GUI 97,37
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 36,30
 //_Attributes Documentation="list"
 Object Text;  //_GUI 41,17,The order in which we recurse through the list is independent of which elememt we pop at the leaf.
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 77,26
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1) PushLsb:A( Variant In1, Variant LSB) ;  //_GUI 77,35
 //_Attributes Documentation="ztl/var"
 Object ( Variant MSB, Variant Out2) LeafPopLsb( Variant In1) ;  //_GUI 52,26
 //_Attributes Documentation="zterm"
 Object ( Variant MSB, Variant Out2) LeafPopLsb:A( Variant In1) ;  //_GUI 52,35
 //_Attributes Documentation="zterm"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 Output:A.0 = PushLsb:A.0;  
 PopLsb.0 = Input.0;  
 PushLsb.0 = LeafPopLsb.0;  
 PushLsb.1 = LeafPopLsb:A.0;  //_GUI 72,31, 72,37
 PushLsb:A.0 = LeafPopLsb.1;  //_GUI 75,37, 75,34, 69,34, 69,31
 PushLsb:A.1 = LeafPopLsb:A.1;  
 LeafPopLsb.0 = PopLsb.0;  //_GUI 49,29, 49,32
 LeafPopLsb:A.0 = PopLsb.1;  //_GUI 49,38, 49,35
}

Object ( Variant OFL, Variant Out1) ShiftLeftBy( ZTList Data
    , Variant ShiftBy) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTList/var"
{
 // A barrel shifter.  Data is shifted left (towards the most significant end) by ShiftBy amount.
 //
 // ShiftLeftBy instantiates a barrelshifter that can dynamically shift a data set left n bits, which are specified by the ShiftBy input.
 //
 // Since barrel shifters use large amounts of physical resources, the ShiftBy input is preprocessed, converting it into the smallest data set possible of representing the bitlength of Data.  This ensures that an optimal structure is created.
 //
 // If the ShiftBy input is constant, this object simply becomes a series of SHLs, which are free.
 //
 // Inputs:
 //
 // Variant Data: The input data that will be shifted at runtime (as apposed to SHL which shifts at compile time).
 //
 // Variant ShiftBy: The amount to shift data by.
 //
 // Outputs:
 //
 // Bit OFL: Overflow (OFL) goes high when any bits shifted off the end have a high value or there is an error in the ShiftBy range.
 //
 // Variant output: The result of Data shifted left by ShiftBy.
 //
 // Date:
 // 07/30/04
 //
 // Revision 1
 //_ Object Prototypes
 Object ( ZTList Data) Input;  //_GUI 14,12
 Object ( Variant ShiftBy) Input:A;  //_GUI 14,23
 Object Output( Variant OFL) ;  //_GUI 79,10
 Object Output:A( Variant Out1) ;  //_GUI 79,18
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 64,16
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 20,10
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb:A( Variant In1, Variant LSB) ;  //_GUI 64,8
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 35,23
 Object ( Variant OFL, Variant Out1) ShiftLeftBy( Variant Data
    , Variant ShiftBy) ;  //_GUI 42,13
 //_Attributes Documentation="ZTList"
 Object ( Variant OFL, Variant Out1) ShiftLeftBy:A( Variant Data
    , Variant ShiftBy) ;  //_GUI 42,22
 //_Attributes Documentation="ZTList"

 // Behavior Topology
 Output.0 = PushLsb:A.0;  
 Output:A.0 = PushLsb.0;  
 PushLsb.0 = ShiftLeftBy.1;  
 PushLsb.1 = ShiftLeftBy:A.1;  //_GUI 64,27
 PopLsb.0 = Input.0;  
 PushLsb:A.0 = ShiftLeftBy.0;  //_GUI 54,10
 PushLsb:A.1 = ShiftLeftBy:A.0;  //_GUI 59,13, 59,24
 Junction.0 = Input:A.0;  
 ShiftLeftBy.0 = PopLsb.0;  //_GUI 42,12
 ShiftLeftBy.1 = Junction.0;  //_GUI 36,18
 ShiftLeftBy:A.0 = PopLsb.1;  //_GUI 39,24, 39,15
 ShiftLeftBy:A.1 = Junction.2;  //_GUI 36,27
}

Object ( ZTerm OFL, ZTerm Out1) ShiftLeftBy( ZTerm Data
    , Variant ShiftBy) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTerm"
{
 // A barrel shifter.  Data is shifted left (towards the most significant end) by ShiftBy amount.
 //
 // ShiftLeftBy instantiates a barrelshifter that can dynamically shift a data set left n bits, which are specified by the ShiftBy input.
 //
 // Since barrel shifters use large amounts of physical resources, the ShiftBy input is preprocessed, converting it into the smallest data set possible of representing the bitlength of Data.  This ensures that an optimal structure is created.
 //
 // If the ShiftBy input is constant, this object simply becomes a series of SHLs, which are free.
 //
 // Inputs:
 //
 // Variant Data: The input data that will be shifted at runtime (as apposed to SHL which shifts at compile time).
 //
 // Variant ShiftBy: The amount to shift data by.
 //
 // Outputs:
 //
 // Bit OFL: Overflow (OFL) goes high when any bits shifted off the end have a high value or there is an error in the ShiftBy range.
 //
 // Variant output: The result of Data shifted left by ShiftBy.
 //
 // Date:
 // 07/30/04
 //
 // Revision 1
 //_ Object Prototypes
 Object ( ZTerm Data) Input;  //_GUI 14,12
 Object ( Variant ShiftBy) Input:A;  //_GUI 14,15
 Object Output( ZTerm OFL) ;  //_GUI 35,12
 Object Output:A( ZTerm Out1) ;  //_GUI 35,15
 Object ( ZTerm Out1, ZTerm Out2, ZTerm Out3) Junction
    ( ZTerm In0) ;  //_GUI 29,12

 // Behavior Topology
 Output.0 = Junction.1;  
 Output:A.0 = Junction.2;  //_GUI 30,16
 Junction.0 = Input.0;  
}

Object ( ZTerm OFL, ZTerm Out1) ShiftRightBy( ZTerm Data
    , Variant ShiftBy) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTerm"
{
 // A barrel shifter.  Data is shifted left (towards the most significant end) by ShiftBy amount.
 //
 // ShiftLeftBy instantiates a barrelshifter that can dynamically shift a data set left n bits, which are specified by the ShiftBy input.
 //
 // Since barrel shifters use large amounts of physical resources, the ShiftBy input is preprocessed, converting it into the smallest data set possible of representing the bitlength of Data.  This ensures that an optimal structure is created.
 //
 // If the ShiftBy input is constant, this object simply becomes a series of SHLs, which are free.
 //
 // Inputs:
 //
 // Variant Data: The input data that will be shifted at runtime (as apposed to SHL which shifts at compile time).
 //
 // Variant ShiftBy: The amount to shift data by.
 //
 // Outputs:
 //
 // Bit OFL: Overflow (OFL) goes high when any bits shifted off the end have a high value or there is an error in the ShiftBy range.
 //
 // Variant output: The result of Data shifted left by ShiftBy.
 //
 // Date:
 // 07/30/04
 //
 // Revision 1
 //_ Object Prototypes
 Object ( ZTerm Data) Input;  //_GUI 14,12
 Object ( Variant ShiftBy) Input:A;  //_GUI 14,15
 Object Output( ZTerm OFL) ;  //_GUI 35,12
 Object Output:A( ZTerm Out1) ;  //_GUI 35,15
 Object ( ZTerm Out1, ZTerm Out2, ZTerm Out3) Junction
    ( ZTerm In0) ;  //_GUI 29,12

 // Behavior Topology
 Output.0 = Junction.1;  
 Output:A.0 = Junction.2;  //_GUI 30,16
 Junction.0 = Input.0;  
}

Object ( Variant OFL, Variant Out1) ShiftRightBy( ZTList Data
    , Variant ShiftBy) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTList/var"
{
 // A barrel shifter.  Data is shifted left (towards the most significant end) by ShiftBy amount.
 //
 // ShiftLeftBy instantiates a barrelshifter that can dynamically shift a data set left n bits, which are specified by the ShiftBy input.
 //
 // Since barrel shifters use large amounts of physical resources, the ShiftBy input is preprocessed, converting it into the smallest data set possible of representing the bitlength of Data.  This ensures that an optimal structure is created.
 //
 // If the ShiftBy input is constant, this object simply becomes a series of SHLs, which are free.
 //
 // Inputs:
 //
 // Variant Data: The input data that will be shifted at runtime (as apposed to SHL which shifts at compile time).
 //
 // Variant ShiftBy: The amount to shift data by.
 //
 // Outputs:
 //
 // Bit OFL: Overflow (OFL) goes high when any bits shifted off the end have a high value or there is an error in the ShiftBy range.
 //
 // Variant output: The result of Data shifted left by ShiftBy.
 //
 // Date:
 // 07/30/04
 //
 // Revision 1
 //_ Object Prototypes
 Object ( ZTList Data) Input;  //_GUI 14,12
 Object ( Variant ShiftBy) Input:A;  //_GUI 14,23
 Object Output( Variant OFL) ;  //_GUI 79,10
 Object Output:A( Variant Out1) ;  //_GUI 79,18
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 64,16
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 20,10
 //_Attributes Documentation="list"
 Object ( Variant Out1) PushLsb:A( Variant In1, Variant LSB) ;  //_GUI 64,8
 //_Attributes Documentation="ztl/var"
 Object ( Variant Out1, Variant Out2, Variant Out3) Junction
    ( Variant In0) ;  //_GUI 35,23
 Object ( Variant OFL, Variant Out1) ShiftRightBy( Variant Data
    , Variant ShiftBy) ;  //_GUI 42,13
 //_Attributes Documentation="ZTerm"
 Object ( Variant OFL, Variant Out1) ShiftRightBy:A( Variant Data
    , Variant ShiftBy) ;  //_GUI 42,22
 //_Attributes Documentation="ZTerm"

 // Behavior Topology
 Output.0 = PushLsb:A.0;  
 Output:A.0 = PushLsb.0;  
 PushLsb.0 = ShiftRightBy.1;  
 PushLsb.1 = ShiftRightBy:A.1;  //_GUI 64,27
 PopLsb.0 = Input.0;  
 PushLsb:A.0 = ShiftRightBy.0;  //_GUI 55,10
 PushLsb:A.1 = ShiftRightBy:A.0;  //_GUI 59,13, 59,24
 Junction.0 = Input:A.0;  
 ShiftRightBy.0 = PopLsb.0;  //_GUI 42,12
 ShiftRightBy.1 = Junction.0;  //_GUI 36,18
 ShiftRightBy:A.0 = PopLsb.1;  //_GUI 39,24, 39,15
 ShiftRightBy:A.1 = Junction.2;  //_GUI 36,27
}

Object ( Variant O) RoundUp( ZTList Round, ZTList D) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTList"
{
 //
 // Revision 1
 //_ Object Prototypes
 Object ( ZTList Round) Input;  //_GUI 23,12
 Object ( ZTList D) Input:A;  //_GUI 23,24
 Object Output( Variant O) ;  //_GUI 94,13
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 29,22
 //_Attributes Documentation="list"
 Object ( Variant Out1, Variant LSB) PopLsb:A( Variant In1) ;  //_GUI 29,10
 //_Attributes Documentation="list"
 Object ( Variant O) RoundUp( Variant Round, Variant D) ;  //_GUI 50,22
 Object ( Variant O) RoundUp:A( Variant Round, Variant D) ;  //_GUI 63,10
 Object ( Variant Out1) PushLsb( Variant In1, Variant LSB) ;  //_GUI 80,11
 //_Attributes Documentation="NULL/var"

 // Behavior Topology
 Output.0 = PushLsb.0;  
 PopLsb.0 = Input:A.0;  
 PopLsb:A.0 = Input.0;  
 RoundUp.0 = PopLsb:A.1;  //_GUI 50,15
 RoundUp.1 = PopLsb.1;  
 RoundUp:A.0 = PopLsb:A.0;  
 RoundUp:A.1 = PopLsb.0;  //_GUI 55,15, 55,19, 44,19, 44,24
 PushLsb.0 = RoundUp:A.0;  
 PushLsb.1 = RoundUp.0;  //_GUI 80,25
}

Object ( ZTerm O) RoundUp( ZTerm Round, ZTerm D) 
//_Attributes TreeGroup=CoreLib-ZTList\Corelib_Overloads,Documentation="ZTerm"
{
 //
 // Revision 1
 //_ Object Prototypes
 Object ( ZTerm Round) Input;  //_GUI 23,12
 Object ( ZTerm D) Input:A;  //_GUI 23,15
 Object Output( ZTerm O) ;  //_GUI 33,15

 // Behavior Topology
 Output.0 = Input:A.0;  
}

Object ( Variant Out1, Variant LSB) LeafPopLsb( Variant In1) 
//_Attributes TreeGroup=CoreLib-ZTList\General,Documentation="Var/Var"
{
 //_ Object Prototypes
 Object ( Variant In1) Input;  //_GUI 35,29
 Object Output( Variant Out1) ;  //_GUI 51,28
 Object Output:A( Variant LSB) ;  //_GUI 51,31
 Object ( Variant Out1, Variant LSB) PopLsb( Variant In1) ;  //_GUI 40,27
 //_Attributes Documentation="ztlist"

 // Behavior Topology
 Output.0 = PopLsb.0;  
 Output:A.0 = PopLsb.1;  
 PopLsb.0 = Input.0;  
}

