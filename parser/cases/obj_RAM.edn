(:sheet "RAM"
        [(:input "Data" "Variant" 0 (17 19) {})
         (:input "Addr" "Variant" 1 (17 26) {})
         (:input "WE" "Bit" 2 (17 46) {})
         (:input "ClkG" "Bit" 3 (17 50) {})
         (:input "Go" "Bit" 4 (17 54) {})
         (:input "Wait" "Bit" 5 (162 62) {})
         (:output "O" "Variant" 6 (166 22) {})
         (:output "Done" "Bit" 7 (166 35) {})
         (:output "Busy" "Bit" 8 (18 64) {})
         (:symbol "RAMSP" 9 [("Data" "Variant") ("Addr" "Variant") ("ClkG" "Bit") ("WE" "Bit")]
                  [("Data" "Variant")] (135 19) {})
         (:symbol "RegOnGo" 10 [("D" "Variant") ("ClkG" "Bit") ("AClr" "Bit") ("Go" "Bit") ("Wait" "Bit")]
                  [("Q" "Variant") ("ClkG" "Bit") ("AClr" "Bit") ("Done" "Bit") ("Busy" "Bit")]
                  (59 24) {})
         (:symbol "AND" 11 [("In1" "Bit") ("In2" "Bit")] [("Out" "Bit")] (47 32) {})
         (:symbol "Mux" 12 [("A" "Variant") ("B" "Variant") ("S" "Bit")] [("O" "Variant")] (80 21) {})
         (:junction "Junction" 13 (55 26))
         (:symbol "INVERT" 14 [("In1" "Bit")] [("Out" "Bit")] (35 31) {})
         (:junction "Junction" 15 (77 38))
         (:symbol "AND" 16 [("In1" "Variant") ("In2" "Variant") ("In3" "Variant")] [("Out1" "Variant")] (117 25) {})
         (:symbol "INVERT" 17 [("In1" "Bit")] [("Out" "Bit")] (105 24) {})
         (:junction "Junction" 18 (34 54))
         (:junction "Junction" 19 (30 46))
         (:junction "Junction" 20 (26 50))
         (:junction "Junction" 21 (57 58))]
        [(:net (9 "Data") (6 "O") [])
         (:net (10 "Done") (7 "Done") [])
         (:net (21 nil) (8 "Busy") [(16 58)])
         (:net (0 "Data") (9 "Data") [(131 19) (131 21)])
         (:net (12 "O") (9 "Addr") [])
         (:net (20 nil) (9 "ClkG") [(133 50) (133 27)])
         (:net (16 "Out1") (9 "WE") [(130 28) (130 30)])
         (:net (13 nil) (10 "D") [])
         (:net (20 nil) (10 "ClkG") [(26 29)])
         (:net (11 "Out") (10 "Go") [])
         (:net (15 nil) (10 "Wait") [])
         (:net (14 "Out") (11 "In1") [])
         (:net (18 nil) (11 "In2") [(34 37)])
         (:net (13 nil) (12 "A") [(55 23)])
         (:net (10 "Q") (12 "B") [])
         (:net (15 nil) (12 "S") [(77 29)])
         (:net (1 "Addr") (13 nil) [])
         (:net (19 nil) (14 "In1") [(30 34)])
         (:net (5 "Wait") (15 nil) [(164 38)])
         (:net (17 "Out") (16 "In1") [])
         (:net (19 nil) (16 "In2") [(108 46) (108 30)])
         (:net (18 nil) (16 "In3") [(112 54) (112 33)])
         (:net (21 nil) (17 "In1") [(102 58) (102 27)])
         (:net (4 "Go") (18 nil) [])
         (:net (2 "WE") (19 nil) [])
         (:net (3 "ClkG") (20 nil) [])
         (:net (10 "Busy") (21 nil) [(57 38)])]
        [(:text "Register the Address \non a Read to be used \nif a Wait comes on." (50 9))
         (:text "If waiting, then switch the RAM's \naddress to the stored address, \nso if a read  Done is pending, we \nwill continue reading from the \nsame address."
                (75 3))
         (:text "Only write when Go, \nWE and not Busy." (107 12))
         (:text "A Wait will keep a \nRead or a Write from \nstarting, but only a \nRead from completing."
                (146 66))
         (:text "Dones only come \nout after a Read." (160 27))
         (:text "Reads and writes \nare synchronous." (132 10))
         (:text "Don't need to store the \nGo on a write because \nwe don't need to send \nout a Done on a write."
                (38 61))
         (:text "The Mux won't effect writes (it \nwill be a passthrough) because \nwrites will only occur when we \nare not Busy which is the same \nas when we are not Waiting for \nthe RegOnGo object."
                (73 60))
         (:text "O is valid while \nDone is high." (160 12))])
